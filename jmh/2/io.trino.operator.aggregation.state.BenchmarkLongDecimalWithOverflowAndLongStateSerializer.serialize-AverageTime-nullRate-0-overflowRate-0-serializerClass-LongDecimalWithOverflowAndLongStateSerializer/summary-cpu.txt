--- Execution profile ---
Total samples       : 3542
not_walkable_Java   : 2 (0.06%)

--- 2780000000 ns (7.85%), 278 samples
  [ 0] java.util.Arrays.copyOf
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 2] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 1990000000 ns (5.62%), 199 samples
  [ 0] io.trino.array.LongBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateFactory$GroupedLongDecimalWithOverflowAndLongState.getLong
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 1690000000 ns (4.77%), 169 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 1220000000 ns (3.44%), 122 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 920000000 ns (2.60%), 92 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 880000000 ns (2.48%), 88 samples
  [ 0] io.trino.array.LongBigArray.getSegment
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArray
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 850000000 ns (2.40%), 85 samples
  [ 0] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 830000000 ns (2.34%), 83 samples
  [ 0] io.trino.array.BooleanBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 780000000 ns (2.20%), 78 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getOverflow
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 750000000 ns (2.12%), 75 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 710000000 ns (2.00%), 71 samples
  [ 0] io.trino.array.BigArrays.offset
  [ 1] io.trino.array.LongBigArray.getOffset
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArrayOffset
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 690000000 ns (1.95%), 69 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 690000000 ns (1.95%), 69 samples
  [ 0] io.trino.array.BigArrays.offset
  [ 1] io.trino.array.BooleanBigArray.get
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 670000000 ns (1.89%), 67 samples
  [ 0] io.trino.array.LongBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateFactory$GroupedLongDecimalWithOverflowAndLongState.getLong
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 670000000 ns (1.89%), 67 samples
  [ 0] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 660000000 ns (1.86%), 66 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 650000000 ns (1.84%), 65 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 630000000 ns (1.78%), 63 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 630000000 ns (1.78%), 63 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 600000000 ns (1.69%), 60 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 550000000 ns (1.55%), 55 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 550000000 ns (1.55%), 55 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 540000000 ns (1.52%), 54 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 480000000 ns (1.36%), 48 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 460000000 ns (1.30%), 46 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 450000000 ns (1.27%), 45 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateFactory$GroupedLongDecimalWithOverflowAndLongState.getLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 440000000 ns (1.24%), 44 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 420000000 ns (1.19%), 42 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 410000000 ns (1.16%), 41 samples
  [ 0] io.trino.array.BigArrays.segment
  [ 1] io.trino.array.LongBigArray.getSegment
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArray
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 400000000 ns (1.13%), 40 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 400000000 ns (1.13%), 40 samples
  [ 0] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 390000000 ns (1.10%), 39 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 380000000 ns (1.07%), 38 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 380000000 ns (1.07%), 38 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 370000000 ns (1.04%), 37 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 370000000 ns (1.04%), 37 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 360000000 ns (1.02%), 36 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 350000000 ns (0.99%), 35 samples
  [ 0] io.trino.array.BigArrays.segment
  [ 1] io.trino.array.BooleanBigArray.get
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 350000000 ns (0.99%), 35 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 340000000 ns (0.96%), 34 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArray
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 340000000 ns (0.96%), 34 samples
  [ 0] io.trino.array.BooleanBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 340000000 ns (0.96%), 34 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 330000000 ns (0.93%), 33 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 320000000 ns (0.90%), 32 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 320000000 ns (0.90%), 32 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 310000000 ns (0.88%), 31 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 290000000 ns (0.82%), 29 samples
  [ 0] io.trino.operator.aggregation.state.AbstractGroupedAccumulatorState.getGroupId
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 280000000 ns (0.79%), 28 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 270000000 ns (0.76%), 27 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 270000000 ns (0.76%), 27 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 260000000 ns (0.73%), 26 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 240000000 ns (0.68%), 24 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getOverflow
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 230000000 ns (0.65%), 23 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 220000000 ns (0.62%), 22 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 210000000 ns (0.59%), 21 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 190000000 ns (0.54%), 19 samples
  [ 0] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 190000000 ns (0.54%), 19 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 180000000 ns (0.51%), 18 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 170000000 ns (0.48%), 17 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 170000000 ns (0.48%), 17 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 150000000 ns (0.42%), 15 samples
  [ 0] java.util.Arrays.copyOf
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 2] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 130000000 ns (0.37%), 13 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 120000000 ns (0.34%), 12 samples
  [ 0] java.util.Arrays.copyOf
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 2] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 110000000 ns (0.31%), 11 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 100000000 ns (0.28%), 10 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 100000000 ns (0.28%), 10 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 80000000 ns (0.23%), 8 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 70000000 ns (0.20%), 7 samples
  [ 0] io.trino.array.LongBigArray.getSegment
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArray
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 60000000 ns (0.17%), 6 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 60000000 ns (0.17%), 6 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 50000000 ns (0.14%), 5 samples
  [ 0] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 1] G1RemSetScanState::reset()
  [ 2] G1CollectedHeap::pre_evacuate_collection_set()
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 4] VM_G1CollectForAllocation::doit()
  [ 5] VM_Operation::evaluate()
  [ 6] VMThread::evaluate_operation(VM_Operation*)
  [ 7] VMThread::loop()
  [ 8] VMThread::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 40000000 ns (0.11%), 4 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 40000000 ns (0.11%), 4 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 40000000 ns (0.11%), 4 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 40000000 ns (0.11%), 4 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformEvent::park(long)
  [ 2] Monitor::IWait(Thread*, long)
  [ 3] Monitor::wait(bool, long, bool)
  [ 4] WatcherThread::sleep() const
  [ 5] WatcherThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] io.trino.array.BooleanBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 30000000 ns (0.08%), 3 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformEvent::park(long)
  [ 2] Monitor::IWait(Thread*, long)
  [ 3] Monitor::wait(bool, long, bool)
  [ 4] G1YoungRemSetSamplingThread::sleep_before_next_cycle()
  [ 5] G1YoungRemSetSamplingThread::run_service()
  [ 6] ConcurrentGCThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::stop()
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 30000000 ns (0.08%), 3 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 3] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 4] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 5] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 6] java.lang.reflect.Method.invoke
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.Executors$RunnableAdapter.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.ThreadPoolExecutor.runWorker
  [13] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [14] java.lang.Thread.run

--- 30000000 ns (0.08%), 3 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int)
  [ 2] WorkGang::run_task(AbstractGangTask*, unsigned int)
  [ 3] G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1CollectForAllocation::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::loop()
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 2] G1RemSetScanState::reset()
  [ 3] G1CollectedHeap::pre_evacuate_collection_set()
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1CollectForAllocation::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::loop()
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] semaphore_signal_trap
  [ 1] SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int)
  [ 2] WorkGang::run_task(AbstractGangTask*, unsigned int)
  [ 3] G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1CollectForAllocation::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::loop()
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 30000000 ns (0.08%), 3 samples
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 20000000 ns (0.06%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&)
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&)
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformEvent::park(long)
  [ 2] Monitor::IWait(Thread*, long)
  [ 3] Monitor::wait(bool, long, bool)
  [ 4] VMThread::loop()
  [ 5] VMThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
  [ 1] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 20000000 ns (0.06%), 2 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 1] G1CollectedHeap::register_humongous_regions_with_cset()
  [ 2] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 3] VM_G1CollectForAllocation::doit()
  [ 4] VM_Operation::evaluate()
  [ 5] VMThread::evaluate_operation(VM_Operation*)
  [ 6] VMThread::loop()
  [ 7] VMThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&)
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
  [ 1] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 1] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 2] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 3] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 4] G1ParTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 20000000 ns (0.06%), 2 samples
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*)
  [ 1] MemAllocator::Allocation::notify_allocation()
  [ 2] MemAllocator::allocate() const
  [ 3] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 4] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 5] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 6] java.util.Arrays.copyOf
  [ 7] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 9] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [14] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [16] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsedTime()
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
  [ 1] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal(unsigned int, int*, StarTask&)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1Allocator::unsafe_max_tlab_alloc()
  [ 1] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 2] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 3] MemAllocator::allocate() const
  [ 4] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 5] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 6] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 7] java.util.Arrays.copyOf
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 9] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [14] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [16] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [17] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*)
  [ 1] MemAllocator::Allocation::notify_allocation()
  [ 2] MemAllocator::allocate() const
  [ 3] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 4] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 5] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 6] java.util.Arrays.copyOf
  [ 7] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 9] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [14] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [16] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
  [ 1] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 2] MemAllocator::allocate() const
  [ 3] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 4] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 5] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 6] java.util.Arrays.copyOf
  [ 7] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 9] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [14] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [16] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] ThreadLocalAllocBuffer::make_parsable(bool, bool)
  [ 1] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 2] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 3] MemAllocator::allocate() const
  [ 4] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 5] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 6] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 7] java.util.Arrays.copyOf
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 9] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [14] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [16] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [17] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] [unknown]
  [ 1] [unknown]
  [ 2] [unknown]
  [ 3] [unknown]
  [ 4] [unknown]
  [ 5] os::malloc(unsigned long, MemoryType, NativeCallStack const&)
  [ 6] AllocateHeap(unsigned long, MemoryType, NativeCallStack const&, AllocFailStrategy::AllocFailEnum)
  [ 7] AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum)
  [ 8] G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap*, unsigned int, unsigned long)
  [ 9] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [10] VM_G1CollectForAllocation::doit()
  [11] VM_Operation::evaluate()
  [12] VMThread::evaluate_operation(VM_Operation*)
  [13] VMThread::loop()
  [14] VMThread::run()
  [15] Thread::call_run()
  [16] thread_native_entry(Thread*)
  [17] __os_ch_md_redzone_cookie
  [18] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] Monitor::TryFast()
  [ 1] Monitor::lock(Thread*)
  [ 2] G1CollectedHeap::attempt_allocation_slow(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)
  [ 4] G1CollectedHeap::mem_allocate(unsigned long, bool*)
  [ 5] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 6] MemAllocator::allocate() const
  [ 7] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 8] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 9] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [10] java.util.Arrays.copyOf
  [11] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [12] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [13] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [14] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [15] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [16] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [17] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [18] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [19] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [20] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] _platform_bzero$VARIANT$Haswell
  [ 1] G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)
  [ 2] G1CollectedHeap::mem_allocate(unsigned long, bool*)
  [ 3] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 4] MemAllocator::allocate() const
  [ 5] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 6] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 7] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 8] java.util.Arrays.copyOf
  [ 9] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [10] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [11] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [12] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [14] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [15] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [16] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [17] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [18] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::stop()
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] constantPoolHandle::~constantPoolHandle()
  [ 1] InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  [ 2] java.util.concurrent.locks.AbstractQueuedSynchronizer.initializeSyncQueue
  [ 3] java.util.concurrent.locks.AbstractQueuedSynchronizer.enq
  [ 4] java.util.concurrent.locks.AbstractQueuedSynchronizer.transferAfterCancelledWait
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos
  [ 6] java.util.concurrent.LinkedBlockingQueue.poll
  [ 7] java.util.concurrent.ExecutorCompletionService.poll
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 9] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [10] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [11] org.openjdk.jmh.runner.BaseRunner.doSingle
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [13] org.openjdk.jmh.runner.ForkedRunner.run
  [14] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.03%), 1 sample
  [ 0] Method::bcp_from(unsigned char*) const
  [ 1] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
  [ 2] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 3] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
  [ 1] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal(unsigned int, int*, StarTask&)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1CollectionSet::add_young_region_common(HeapRegion*)
  [ 1] G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long)
  [ 2] G1AllocRegion::retire_internal(HeapRegion*, bool)
  [ 3] MutatorAllocRegion::retire(bool)
  [ 4] G1CollectedHeap::attempt_allocation_slow(unsigned long)
  [ 5] G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)
  [ 6] G1CollectedHeap::mem_allocate(unsigned long, bool*)
  [ 7] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 8] MemAllocator::allocate() const
  [ 9] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [10] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [11] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [12] java.util.Arrays.copyOf
  [13] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [14] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [15] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [16] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [17] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [18] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [19] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [20] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [21] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [22] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] RSHashTableIter::has_next(unsigned long&)
  [ 1] HeapRegionRemSetIterator::has_next(unsigned long&)
  [ 2] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 3] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 4] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 5] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] os::PlatformEvent::park()
  [ 2] Monitor::ILock(Thread*)
  [ 3] Monitor::lock_without_safepoint_check()
  [ 4] DirtyCardQueueSet::get_completed_buffer(unsigned long)
  [ 5] DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool)
  [ 6] G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int)
  [ 7] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 8] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 9] G1ParTask::work(unsigned int)
  [10] GangWorker::loop()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] __os_ch_md_redzone_cookie
  [14] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] Monitor::TryFast()
  [ 1] Monitor::ILock(Thread*)
  [ 2] Monitor::lock_without_safepoint_check()
  [ 3] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 4] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 5] G1YoungRemSetSamplingThread::sample_young_list_rs_lengths()
  [ 6] G1YoungRemSetSamplingThread::run_service()
  [ 7] ConcurrentGCThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] JvmtiThreadState::oops_do(OopClosure*, CodeBlobClosure*)
  [ 1] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 2] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 3] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 4] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1ParTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] __os_ch_md_redzone_cookie
  [ 1] os::PlatformEvent::park(long)
  [ 2] Monitor::IWait(Thread*, long)
  [ 3] Monitor::wait(bool, long, bool)
  [ 4] VMThread::loop()
  [ 5] VMThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] RSHashTableIter::has_next(unsigned long&)
  [ 1] HeapRegionRemSetIterator::has_next(unsigned long&)
  [ 2] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 3] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 4] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 5] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] Thread::claim_oops_do_par_case(int)
  [ 1] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 2] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 3] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 4] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1ParTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] Monitor::IUnlock(bool)
  [ 1] G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
  [ 2] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 3] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 4] G1YoungRemSetSamplingThread::sample_young_list_rs_lengths()
  [ 5] G1YoungRemSetSamplingThread::run_service()
  [ 6] ConcurrentGCThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&, LogDecorators const&)
  [ 1] LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*)
  [ 2] LogTargetHandle::print(char const*, ...)
  [ 3] LogStream::write(char const*, unsigned long)
  [ 4] outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool)
  [ 5] outputStream::print_cr(char const*, ...)
  [ 6] ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const
  [ 7] ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const
  [ 8] G1GCPhaseTimes::print_post_evacuate_collection_set() const
  [ 9] G1GCPhaseTimes::print()
  [10] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [11] VM_G1CollectForAllocation::doit()
  [12] VM_Operation::evaluate()
  [13] VMThread::evaluate_operation(VM_Operation*)
  [14] VMThread::loop()
  [15] VMThread::run()
  [16] Thread::call_run()
  [17] thread_native_entry(Thread*)
  [18] __os_ch_md_redzone_cookie
  [19] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] OtherRegionsTable::occ_fine() const
  [ 1] OtherRegionsTable::occupied() const
  [ 2] G1CollectionSet::add_young_region_common(HeapRegion*)
  [ 3] G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long)
  [ 4] G1AllocRegion::retire_internal(HeapRegion*, bool)
  [ 5] MutatorAllocRegion::retire(bool)
  [ 6] G1CollectedHeap::attempt_allocation_slow(unsigned long)
  [ 7] G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)
  [ 8] G1CollectedHeap::mem_allocate(unsigned long, bool*)
  [ 9] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [10] MemAllocator::allocate() const
  [11] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [12] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [13] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [14] java.util.Arrays.copyOf
  [15] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [16] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [17] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [18] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [19] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [20] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [21] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [22] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [23] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [24] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseTimesTracker::G1EvacPhaseTimesTracker(G1GCPhaseTimes*, G1ParScanThreadState*, G1GCPhaseTimes::GCParPhases, unsigned int)
  [ 4] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 5] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int)
  [ 2] WorkGang::run_task(AbstractGangTask*, unsigned int)
  [ 3] G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1CollectForAllocation::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::loop()
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] TaskQueueSetSuper::randomParkAndMiller(int*)
  [ 1] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
  [ 2] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal(unsigned int, int*, StarTask&)
  [ 3] G1ParEvacuateFollowersClosure::do_void()
  [ 4] G1ParTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] _platform_bzero$VARIANT$Haswell
  [ 1] CardTable::clear(MemRegion)
  [ 2] G1RemSetScanState::G1ClearCardTableTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState*, G1CollectedHeap*)
  [ 1] G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long)
  [ 2] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] HeapRegionRemSetIterator::coarse_has_next(unsigned long&)
  [ 1] HeapRegionRemSetIterator::has_next(unsigned long&)
  [ 2] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 3] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 4] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 5] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1GCPhaseTimes::record_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long, unsigned int)
  [ 1] G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int)
  [ 2] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 3] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 4] G1ParTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] __psynch_cvsignal
  [ 1] CompileBroker::compile_method_base(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool, Thread*)
  [ 2] CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, Thread*)
  [ 3] CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, Thread*)
  [ 4] TieredThresholdPolicy::submit_compile(methodHandle const&, int, CompLevel, JavaThread*)
  [ 5] TieredThresholdPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*)
  [ 6] InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*)
  [ 7] InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  [ 8] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
  [ 9] java.util.concurrent.locks.ReentrantLock.lock
  [10] java.util.concurrent.LinkedBlockingQueue.offer
  [11] java.util.AbstractQueue.add
  [12] java.util.concurrent.ExecutorCompletionService$QueueingFuture.done
  [13] java.util.concurrent.FutureTask.finishCompletion
  [14] java.util.concurrent.FutureTask.set
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] OSXSemaphore::signal(unsigned int)
  [ 1] SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int)
  [ 2] WorkGang::run_task(AbstractGangTask*, unsigned int)
  [ 3] G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1CollectForAllocation::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::loop()
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] _platform_bzero$VARIANT$Haswell
  [ 1] G1RemSetScanState::reset()
  [ 2] G1CollectedHeap::pre_evacuate_collection_set()
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 4] VM_G1CollectForAllocation::doit()
  [ 5] VM_Operation::evaluate()
  [ 6] VMThread::evaluate_operation(VM_Operation*)
  [ 7] VMThread::loop()
  [ 8] VMThread::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] ConstantPool::impl_name_and_type_ref_index_at(int, bool)
  [ 1] ConstantPool::impl_signature_ref_at(int, bool)
  [ 2] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
  [ 3] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 4] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 5] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 6] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 7] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1ParTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*)
  [ 1] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 2] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 3] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 4] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 5] G1ParTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1ContiguousSpace::free() const
  [ 1] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 2] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 3] MemAllocator::allocate() const
  [ 4] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 5] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 6] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 7] java.util.Arrays.copyOf
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 9] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [14] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [16] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [17] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 1] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 2] java.util.Arrays.copyOf
  [ 3] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 4] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 5] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 8] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 9] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [10] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [11] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [12] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] _platform_bzero$VARIANT$Haswell
  [ 1] G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)
  [ 2] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 3] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 4] MemAllocator::allocate() const
  [ 5] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 6] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 7] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 8] java.util.Arrays.copyOf
  [ 9] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [10] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [11] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [12] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [14] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [15] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [16] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [17] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [18] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] [unknown]
  [ 1] [unknown]
  [ 2] [unknown]
  [ 3] [unknown]
  [ 4] os::malloc(unsigned long, MemoryType, NativeCallStack const&)
  [ 5] AllocateHeap(unsigned long, MemoryType, NativeCallStack const&, AllocFailStrategy::AllocFailEnum)
  [ 6] AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum)
  [ 7] SubTasksDone::SubTasksDone(unsigned int)
  [ 8] G1RootProcessor::G1RootProcessor(G1CollectedHeap*, unsigned int)
  [ 9] G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*)
  [10] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [11] VM_G1CollectForAllocation::doit()
  [12] VM_Operation::evaluate()
  [13] VMThread::evaluate_operation(VM_Operation*)
  [14] VMThread::loop()
  [15] VMThread::run()
  [16] Thread::call_run()
  [17] thread_native_entry(Thread*)
  [18] __os_ch_md_redzone_cookie
  [19] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] mach_task_special_port_for_id.tsp_ids
  [ 1] Monitor::IWait(Thread*, long)
  [ 2] Monitor::wait(bool, long, bool)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::stop()
  [ 4] G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker()
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
  [ 1] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 2] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 3] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 4] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] frame::sender(RegisterMap*) const
  [ 1] OptoRuntime::is_deoptimized_caller_frame(JavaThread*)
  [ 2] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 3] [not_walkable_Java]

--- 10000000 ns (0.03%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.park
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt
  [ 6] java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly
  [ 7] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly
  [ 8] java.util.concurrent.CountDownLatch.await
  [ 9] org.openjdk.jmh.runner.InfraControlL2.awaitWarmdownReady
  [10] org.openjdk.jmh.runner.InfraControl.awaitWarmdownReady
  [11] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [14] org.openjdk.jmh.runner.BaseRunner.doSingle
  [15] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [16] org.openjdk.jmh.runner.ForkedRunner.run
  [17] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1RemSetScanState::G1ClearCardTableTask::work(unsigned int)
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
  [ 1] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal(unsigned int, int*, StarTask&)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 1] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 2] G1ParTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] java.util.Arrays.copyOf
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 2] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
  [ 1] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 2] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 3] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 4] G1ParTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] Method::bcp_from(unsigned char*) const
  [ 1] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 2] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 3] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 4] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
  [ 1] G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*)
  [ 2] void G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop_work<oopDesc*>(oopDesc**)
  [ 3] InterpreterOopMap::iterate_oop(OffsetClosure*) const
  [ 4] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
  [ 5] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 6] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 7] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 8] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 9] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [10] G1ParTask::work(unsigned int)
  [11] GangWorker::loop()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] __os_ch_md_redzone_cookie
  [15] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.updateDataSize
  [ 1] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 2] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 7] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 9] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [10] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*)
  [ 1] G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&, G1ParScanThreadStateSet*)
  [ 2] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 3] VM_G1CollectForAllocation::doit()
  [ 4] VM_Operation::evaluate()
  [ 5] VMThread::evaluate_operation(VM_Operation*)
  [ 6] VMThread::loop()
  [ 7] VMThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1EvacPhaseWithTrimTimeTracker::stop()
  [ 4] G1ScanRSForRegionClosure::do_heap_region(HeapRegion*)
  [ 5] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 6] G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1ParTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int)
  [ 4] G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] OtherRegionsTable::occ_fine() const
  [ 1] OtherRegionsTable::occupied() const
  [ 2] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 3] G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const
  [ 4] G1YoungRemSetSamplingThread::sample_young_list_rs_lengths()
  [ 5] G1YoungRemSetSamplingThread::run_service()
  [ 6] ConcurrentGCThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] SemaphoreGangTaskDispatcher::worker_wait_for_task()
  [ 2] GangWorker::loop()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] __os_ch_md_redzone_cookie
  [ 6] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1RemSetScanState::reset()
  [ 1] G1CollectedHeap::pre_evacuate_collection_set()
  [ 2] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 3] VM_G1CollectForAllocation::doit()
  [ 4] VM_Operation::evaluate()
  [ 5] VMThread::evaluate_operation(VM_Operation*)
  [ 6] VMThread::loop()
  [ 7] VMThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.type.DecimalAggregationAccumulatorType.createBlockBuilder
  [ 1] io.trino.spi.type.DecimalAggregationAccumulatorType.createBlockBuilder
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] os::javaTimeNanos()
  [ 1] os::elapsed_counter()
  [ 2] CompositeElapsedCounterSource::now()
  [ 3] G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
  [ 4] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 5] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1HotCardCache::drain(CardTableEntryClosure*, unsigned int)
  [ 1] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 2] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 6] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 8] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] void G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop_work<oopDesc*>(oopDesc**)
  [ 1] JavaThread::oops_do(OopClosure*, CodeBlobClosure*)
  [ 2] Threads::possibly_parallel_threads_do(bool, ThreadClosure*)
  [ 3] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 4] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1ParTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.array.LongBigArray.get
  [ 1] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateFactory$GroupedLongDecimalWithOverflowAndLongState.getLong
  [ 2] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 3] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 5] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 6] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 7] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 8] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 9] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1Predictions::stddev_estimate(TruncatedSeq const*) const
  [ 1] G1Analytics::predict_rs_update_time_ms(unsigned long) const
  [ 2] G1Policy::predict_base_elapsed_time_ms(unsigned long, unsigned long) const
  [ 3] G1CollectionSet::finalize_young_part(double, G1SurvivorRegions*)
  [ 4] G1Policy::finalize_collection_set(double, G1SurvivorRegions*)
  [ 5] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 6] VM_G1CollectForAllocation::doit()
  [ 7] VM_Operation::evaluate()
  [ 8] VMThread::evaluate_operation(VM_Operation*)
  [ 9] VMThread::loop()
  [10] VMThread::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] __os_ch_md_redzone_cookie
  [14] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 2] G1CollectedHeap::register_humongous_regions_with_cset()
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 4] VM_G1CollectForAllocation::doit()
  [ 5] VM_Operation::evaluate()
  [ 6] VMThread::evaluate_operation(VM_Operation*)
  [ 7] VMThread::loop()
  [ 8] VMThread::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1ContiguousSpace::block_start(void const*)
  [ 1] bool HeapRegion::oops_on_card_seq_iterate_careful<true, G1ScanObjsDuringUpdateRSClosure>(MemRegion, G1ScanObjsDuringUpdateRSClosure*)
  [ 2] G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*)
  [ 3] G1RefineCardClosure::do_card_ptr(signed char*, unsigned int)
  [ 4] DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool)
  [ 5] G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int)
  [ 6] G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int)
  [ 7] G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int)
  [ 8] G1ParTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] RegisterMap::RegisterMap(JavaThread*, bool)
  [ 1] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 2] [not_walkable_Java]

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 1] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 2] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [ 3] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [ 4] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 5] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [ 1] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [ 2] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [ 3] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 4] java.lang.reflect.Method.invoke
  [ 5] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 6] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 7] java.util.concurrent.FutureTask.run
  [ 8] java.util.concurrent.Executors$RunnableAdapter.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.ThreadPoolExecutor.runWorker
  [11] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1Allocator::unsafe_max_tlab_alloc()
  [ 1] MemAllocator::mem_allocate(MemAllocator::Allocation&) const
  [ 2] MemAllocator::allocate() const
  [ 3] CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*)
  [ 4] TypeArrayKlass::allocate_common(int, bool, Thread*)
  [ 5] OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*)
  [ 6] java.util.Arrays.copyOf
  [ 7] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
  [ 8] io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  [ 9] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [10] io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  [11] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [12] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  [13] io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer.serialize
  [14] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
  [15] io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_AverageTime
  [16] jdk.internal.reflect.GeneratedMethodAccessor1.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 10000000 ns (0.03%), 1 sample
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
  [ 1] GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal(unsigned int, int*, StarTask&)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.03%), 1 sample
  [ 0] G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop(oopDesc**)
  [ 1] G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1ParTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

          ns  percent  samples  top
  ----------  -------  -------  ---
 14340000000   40.49%     1434  io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.writeLong
  3730000000   10.53%      373  io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateSerializer.serialize
  3060000000    8.64%      306  java.util.Arrays.copyOf
  2670000000    7.54%      267  io.trino.array.LongBigArray.get
  2110000000    5.96%      211  io.trino.operator.aggregation.state.BenchmarkLongDecimalWithOverflowAndLongStateSerializer$BenchmarkData.serialize
  1510000000    4.26%      151  io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.closeEntry
  1400000000    3.95%      140  io.trino.array.BigArrays.offset
  1200000000    3.39%      120  io.trino.array.BooleanBigArray.get
  1020000000    2.88%      102  io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getOverflow
   950000000    2.68%       95  io.trino.array.LongBigArray.getSegment
   760000000    2.15%       76  io.trino.array.BigArrays.segment
   450000000    1.27%       45  io.trino.operator.aggregation.state.LongDecimalWithOverflowAndLongStateFactory$GroupedLongDecimalWithOverflowAndLongState.getLong
   340000000    0.96%       34  io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.getDecimalArray
   290000000    0.82%       29  io.trino.operator.aggregation.state.AbstractGroupedAccumulatorState.getGroupId
   270000000    0.76%       27  semaphore_wait_trap
   160000000    0.45%       16  SpinPause
   160000000    0.45%       16  os::javaTimeNanos()
   110000000    0.31%       11  __psynch_cvwait
    70000000    0.20%        7  HeapRegionManager::iterate(HeapRegionClosure*) const
    60000000    0.17%        6  io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.growCapacity
    40000000    0.11%        4  _platform_bzero$VARIANT$Haswell
    40000000    0.11%        4  GenericTaskQueueSet<OverflowTaskQueue<StarTask, (MemoryType)5, 131072u>, (MemoryType)5>::steal_best_of_2(unsigned int, int*, StarTask&)
    40000000    0.11%        4  ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
    30000000    0.08%        3  semaphore_signal_trap
    30000000    0.08%        3  G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*)
    30000000    0.08%        3  G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*)
    30000000    0.08%        3  org.openjdk.jmh.infra.Blackhole.consumeFull
    20000000    0.06%        2  Monitor::TryFast()
    20000000    0.06%        2  OtherRegionsTable::occ_fine() const
    20000000    0.06%        2  RSHashTableIter::has_next(unsigned long&)
    20000000    0.06%        2  G1Allocator::unsafe_max_tlab_alloc()
    20000000    0.06%        2  [unknown]
    20000000    0.06%        2  Method::bcp_from(unsigned char*) const
    10000000    0.03%        1  TaskQueueSetSuper::randomParkAndMiller(int*)
    10000000    0.03%        1  Thread::claim_oops_do_par_case(int)
    10000000    0.03%        1  ThreadLocalAllocBuffer::make_parsable(bool, bool)
    10000000    0.03%        1  Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
    10000000    0.03%        1  TypeArrayKlass::allocate_common(int, bool, Thread*)
    10000000    0.03%        1  WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*)
    10000000    0.03%        1  RegisterMap::RegisterMap(JavaThread*, bool)
    10000000    0.03%        1  __os_ch_md_redzone_cookie
    10000000    0.03%        1  __psynch_cvsignal
    10000000    0.03%        1  RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*)
    10000000    0.03%        1  OSXSemaphore::signal(unsigned int)
    10000000    0.03%        1  constantPoolHandle::~constantPoolHandle()
    10000000    0.03%        1  frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)
    10000000    0.03%        1  frame::sender(RegisterMap*) const
    10000000    0.03%        1  Monitor::IUnlock(bool)
    10000000    0.03%        1  LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&, LogDecorators const&)
    10000000    0.03%        1  JvmtiThreadState::oops_do(OopClosure*, CodeBlobClosure*)
    10000000    0.03%        1  JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*)
    10000000    0.03%        1  HeapRegionRemSetIterator::coarse_has_next(unsigned long&)
    10000000    0.03%        1  HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*)
    10000000    0.03%        1  G1RemSetScanState::reset()
    10000000    0.03%        1  G1RemSetScanState::G1ClearCardTableTask::work(unsigned int)
    10000000    0.03%        1  G1Predictions::stddev_estimate(TruncatedSeq const*) const
    10000000    0.03%        1  G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop(oopDesc**)
    10000000    0.03%        1  G1HotCardCache::drain(CardTableEntryClosure*, unsigned int)
    10000000    0.03%        1  io.trino.operator.aggregation.state.LongDecimalWithOverflowStateFactory$GroupedLongDecimalWithOverflowState.isNotNull
    10000000    0.03%        1  io.trino.operator.aggregation.state.jmh_generated.BenchmarkLongDecimalWithOverflowAndLongStateSerializer_serialize_jmhTest.serialize_avgt_jmhStub
    10000000    0.03%        1  G1GCPhaseTimes::record_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long, unsigned int)
    10000000    0.03%        1  G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState*, G1CollectedHeap*)
    10000000    0.03%        1  io.trino.spi.block.DecimalAggregationAccumulatorBlockBuilder.updateDataSize
    10000000    0.03%        1  G1ContiguousSpace::free() const
    10000000    0.03%        1  io.trino.spi.type.DecimalAggregationAccumulatorType.createBlockBuilder
    10000000    0.03%        1  G1ContiguousSpace::block_start(void const*)
    10000000    0.03%        1  mach_task_special_port_for_id.tsp_ids
    10000000    0.03%        1  G1CollectionSet::add_young_region_common(HeapRegion*)
    10000000    0.03%        1  G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
    10000000    0.03%        1  ConstantPool::impl_name_and_type_ref_index_at(int, bool)
    10000000    0.03%        1  AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*)
    10000000    0.03%        1  void G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop_work<oopDesc*>(oopDesc**)
    10000000    0.03%        1  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, unsigned int>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
