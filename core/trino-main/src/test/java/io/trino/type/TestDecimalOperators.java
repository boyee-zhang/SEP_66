/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.type;

import io.airlift.slice.Slice;
import io.trino.operator.scalar.AbstractTestFunctions;
import io.trino.spi.ErrorCodeSupplier;
import io.trino.spi.StandardErrorCode;
import io.trino.spi.type.SqlDecimal;
import io.trino.spi.type.Type;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import static io.trino.spi.StandardErrorCode.DIVISION_BY_ZERO;
import static io.trino.spi.StandardErrorCode.NUMERIC_VALUE_OUT_OF_RANGE;
import static io.trino.spi.function.OperatorType.INDETERMINATE;
import static io.trino.spi.type.BooleanType.BOOLEAN;
import static io.trino.spi.type.DecimalType.createDecimalType;
import static io.trino.spi.type.UnscaledDecimal128Arithmetic.unscaledDecimal;
import static io.trino.type.DecimalOperators.addShortLongLong;
import static org.assertj.core.api.Assertions.assertThat;

public class TestDecimalOperators
        extends AbstractTestFunctions
{
    @DataProvider
    public static Object[][] testAddCases()
    {
        return new Object[][] {
                // short short -> short
                {"DECIMAL '137.7' + DECIMAL '17.1'", "0154.8"},
                {"DECIMAL '-1' + DECIMAL '-2'", "-03"},
                {"DECIMAL '1' + DECIMAL '2'", "03"},
                {"DECIMAL '.1234567890123456' + DECIMAL '.1234567890123456'", "0.2469135780246912"},
                {"DECIMAL '-.1234567890123456' + DECIMAL '-.1234567890123456'", "-0.2469135780246912"},
                {"DECIMAL '1234567890123456' + DECIMAL '1234567890123456'", "02469135780246912"},

                // long long -> long
                {"DECIMAL '123456789012345678' + DECIMAL '123456789012345678'", "0246913578024691356"},
                {"DECIMAL '.123456789012345678' + DECIMAL '.123456789012345678'", "0.246913578024691356"},
                {"DECIMAL '1234567890123456789' + DECIMAL '1234567890123456789'", "02469135780246913578"},
                {"DECIMAL '12345678901234567890123456789012345678' + DECIMAL '12345678901234567890123456789012345678'", "24691357802469135780246913578024691356"},
                {"DECIMAL '-99999999999999999999999999999999999999' + DECIMAL '99999999999999999999999999999999999999'", "00000000000000000000000000000000000000"},

                // negative numbers
                {"DECIMAL '12345678901234567890' + DECIMAL '-12345678901234567890'", "000000000000000000000"},
                {"DECIMAL '-12345678901234567890' + DECIMAL '12345678901234567890'", "000000000000000000000"},
                {"DECIMAL '-12345678901234567890' + DECIMAL '-12345678901234567890'", "-024691357802469135780"},
                {"DECIMAL '12345678901234567890' + DECIMAL '-12345678901234567891'", "-000000000000000000001"},
                {"DECIMAL '-12345678901234567891' + DECIMAL '12345678901234567890'", "-000000000000000000001"},
                {"DECIMAL '-12345678901234567890' + DECIMAL '12345678901234567891'", "000000000000000000001"},
                {"DECIMAL '12345678901234567891' + DECIMAL '-12345678901234567890'", "000000000000000000001"},

                // short short -> long
                {"DECIMAL '999999999999999999' + DECIMAL '999999999999999999'", "1999999999999999998"},
                {"DECIMAL '999999999999999999' + DECIMAL '.999999999999999999'", "0999999999999999999.999999999999999999"},

                // long short -> long
                {"DECIMAL '123456789012345678901234567890' + DECIMAL '.12345678'", "123456789012345678901234567890.12345678"},
                {"DECIMAL '.123456789012345678901234567890' + DECIMAL '12345678'", "12345678.123456789012345678901234567890"},

                // short long -> long
                {"DECIMAL '.12345678' + DECIMAL '123456789012345678901234567890'", "123456789012345678901234567890.12345678"},
                {"DECIMAL '12345678' + DECIMAL '.123456789012345678901234567890'", "12345678.123456789012345678901234567890"},

                // max supported value for rescaling
                // this works because rescaling allows overflowed values that exceed 10^38 but still fit in 127 bits.
                // 17014000000000000000000000000000000000 * 10 is an example of such number. Both arguments and result can be stored using DECIMAL(38,0) or DECIMAL(38,1)
                {"DECIMAL '17014000000000000000000000000000000000' + DECIMAL '-7014000000000000000000000000000000000.1'", "9999999999999999999999999999999999999.9"},
        };
    }

    @Test(dataProvider = "testAddCases")
    public void testAdd(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testAddInvalidCases()
    {
        return new Object[][] {
                {"DECIMAL '99999999999999999999999999999999999999' + DECIMAL '1'"},
                {"DECIMAL '.1' + DECIMAL '99999999999999999999999999999999999999'"},
                {"DECIMAL '1' + DECIMAL '99999999999999999999999999999999999999'"},
                {"DECIMAL '99999999999999999999999999999999999999' + DECIMAL '.1'"},
                {"DECIMAL '99999999999999999999999999999999999999' + DECIMAL '99999999999999999999999999999999999999'"},
                {"DECIMAL '-99999999999999999999999999999999999999' + DECIMAL '-99999999999999999999999999999999999999'"},

                // max supported value for rescaling
                // 17015000000000000000000000000000000000 is too large and when rescaled to DECIMAL(38,1) it does not fit in 127 bits
                {"DECIMAL '17015000000000000000000000000000000000' + DECIMAL '-7015000000000000000000000000000000000.1'"},
        };
    }

    @Test(dataProvider = "testAddInvalidCases")
    public void testAddInvalid(String projection)
    {
        assertInvalidFunction(projection, NUMERIC_VALUE_OUT_OF_RANGE);
    }

    @DataProvider
    public static Object[][] testSubtractCases()
    {
        return new Object[][] {
                // short short -> short
                {"DECIMAL '107.7' - DECIMAL '17.1'", "0090.6"},
                {"DECIMAL '-1' - DECIMAL '-2'", "01"},
                {"DECIMAL '1' - DECIMAL '2'", "-01"},
                {"DECIMAL '.1234567890123456' - DECIMAL '.1234567890123456'", "0.0000000000000000"},
                {"DECIMAL '-.1234567890123456' - DECIMAL '-.1234567890123456'", "0.0000000000000000"},
                {"DECIMAL '1234567890123456' - DECIMAL '1234567890123456'", "00000000000000000"},

                // long long -> long
                {"DECIMAL '1234567890123456789' - DECIMAL '1234567890123456789'", "00000000000000000000"},
                {"DECIMAL '.1234567890123456789' - DECIMAL '.1234567890123456789'", "0.0000000000000000000"},
                {"DECIMAL '12345678901234567890' - DECIMAL '12345678901234567890'", "000000000000000000000"},
                {"DECIMAL '12345678901234567890123456789012345678' - DECIMAL '12345678901234567890123456789012345678'", "00000000000000000000000000000000000000"},
                {"DECIMAL '-12345678901234567890' - DECIMAL '12345678901234567890'", "-024691357802469135780"},

                // negative numbers
                {"DECIMAL '12345678901234567890' - DECIMAL '12345678901234567890'", "000000000000000000000"},
                {"DECIMAL '-12345678901234567890' - DECIMAL '-12345678901234567890'", "000000000000000000000"},
                {"DECIMAL '-12345678901234567890' - DECIMAL '12345678901234567890'", "-024691357802469135780"},
                {"DECIMAL '12345678901234567890' - DECIMAL '12345678901234567891'", "-000000000000000000001"},
                {"DECIMAL '-12345678901234567891' - DECIMAL '-12345678901234567890'", "-000000000000000000001"},
                {"DECIMAL '-12345678901234567890' - DECIMAL '-12345678901234567891'", "000000000000000000001"},
                {"DECIMAL '12345678901234567891' - DECIMAL '12345678901234567890'", "000000000000000000001"},

                // short short -> long
                {"DECIMAL '999999999999999999' - DECIMAL '999999999999999999'", "0000000000000000000"},
                {"DECIMAL '999999999999999999' - DECIMAL '.999999999999999999'", "0999999999999999998.000000000000000001"},

                // long short -> long
                {"DECIMAL '123456789012345678901234567890' - DECIMAL '.00000001'", "123456789012345678901234567889.99999999"},
                {"DECIMAL '.000000000000000000000000000001' - DECIMAL '87654321'", "-87654320.999999999999999999999999999999"},

                // short long -> long
                {"DECIMAL '.00000001' - DECIMAL '123456789012345678901234567890'", "-123456789012345678901234567889.99999999"},
                {"DECIMAL '12345678' - DECIMAL '.000000000000000000000000000001'", "12345677.999999999999999999999999999999"},

                // max supported value for rescaling
                // this works because rescaling allows overflowed values that exceed 10^38 but still fit in 127 bits.
                // 17014000000000000000000000000000000000 * 10 is an example of such number. Both arguments and result can be stored using DECIMAL(38,0) or DECIMAL(38,1)
                {"DECIMAL '17014000000000000000000000000000000000' - DECIMAL '7014000000000000000000000000000000000.1'", "9999999999999999999999999999999999999.9"},
        };
    }

    @Test(dataProvider = "testSubtractCases")
    public void testSubtract(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testSubtractInvalidCases()
    {
        return new Object[][] {
                // overflow tests
                {"DECIMAL '-99999999999999999999999999999999999999' - DECIMAL '1'"},
                {"DECIMAL '.1' - DECIMAL '99999999999999999999999999999999999999'"},
                {"DECIMAL '-1' - DECIMAL '99999999999999999999999999999999999999'"},
                {"DECIMAL '99999999999999999999999999999999999999' - DECIMAL '.1'"},
                {"DECIMAL '-99999999999999999999999999999999999999' - DECIMAL '99999999999999999999999999999999999999'"},

                // 17015000000000000000000000000000000000 is too large and when rescaled to DECIMAL(38,1) it does not fit in 127 bits
                {"DECIMAL '17015000000000000000000000000000000000' - DECIMAL '7015000000000000000000000000000000000.1'"},
        };
    }

    @Test(dataProvider = "testSubtractInvalidCases")
    public void testSubtractInvalid(String projection)
    {
        assertInvalidFunction(projection, NUMERIC_VALUE_OUT_OF_RANGE);
    }

    @DataProvider
    public static Object[][] testMultiplyCases()
    {
        return new Object[][] {
                // short short -> short
                {"DECIMAL '0' * DECIMAL '1'", "00"},
                {"DECIMAL '0' * DECIMAL '-1'", "00"},
                {"DECIMAL '1' * DECIMAL '0'", "00"},
                {"DECIMAL '-1' * DECIMAL '0'", "00"},
                {"DECIMAL '12' * DECIMAL '3'", "036"},
                {"DECIMAL '12' * DECIMAL '-3'", "-036"},
                {"DECIMAL '-12' * DECIMAL '3'", "-036"},
                {"DECIMAL '1234567890123456' * DECIMAL '3'", "03703703670370368"},
                {"DECIMAL '.1234567890123456' * DECIMAL '3'", "0.3703703670370368"},
                {"DECIMAL '.1234567890123456' * DECIMAL '.3'", ".03703703670370368"},

                // short short -> long
                {"CAST(0 AS DECIMAL(18,0)) * CAST(1 AS DECIMAL(18,0))", "000000000000000000000000000000000000"},
                {"CAST(0 AS DECIMAL(18,0)) * CAST(-1 AS DECIMAL(18,0))", "000000000000000000000000000000000000"},
                {"CAST(1 AS DECIMAL(18,0)) * CAST(0 AS DECIMAL(18,0))", "000000000000000000000000000000000000"},
                {"CAST(-1 AS DECIMAL(18,0)) * CAST(0 AS DECIMAL(18,0))", "000000000000000000000000000000000000"},
                {"DECIMAL '12345678901234567' * DECIMAL '123456789012345670'", "01524157875323883455265967556774890"},
                {"DECIMAL '-12345678901234567' * DECIMAL '123456789012345670'", "-01524157875323883455265967556774890"},
                {"DECIMAL '-12345678901234567' * DECIMAL '-123456789012345670'", "01524157875323883455265967556774890"},
                {"DECIMAL '.12345678901234567' * DECIMAL '.123456789012345670'", ".01524157875323883455265967556774890"},

                // long short -> long
                {"CAST(0 AS DECIMAL(38,0)) * 1", "00000000000000000000000000000000000000"},
                {"CAST(0 AS DECIMAL(38,0)) * -1", "00000000000000000000000000000000000000"},
                {"CAST(1 AS DECIMAL(38,0)) * 0", "00000000000000000000000000000000000000"},
                {"CAST(-1 AS DECIMAL(38,0)) * 0", "00000000000000000000000000000000000000"},
                {"DECIMAL '12345678901234567890123456789012345678' * DECIMAL '3'", "37037036703703703670370370367037037034"},
                {"DECIMAL '1234567890123456789.0123456789012345678' * DECIMAL '3'", "3703703670370370367.0370370367037037034"},
                {"DECIMAL '.12345678901234567890123456789012345678' * DECIMAL '3'", ".37037036703703703670370370367037037034"},

                // short long -> long
                {"0 * CAST(1 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"0 * CAST(-1 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"1 * CAST(0 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"-1 * CAST(0 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"DECIMAL '3' * DECIMAL '12345678901234567890123456789012345678'", "37037036703703703670370370367037037034"},
                {"DECIMAL '3' * DECIMAL '1234567890123456789.0123456789012345678'", "3703703670370370367.0370370367037037034"},
                {"DECIMAL '3' * DECIMAL '.12345678901234567890123456789012345678'", ".37037036703703703670370370367037037034"},

                // long long -> long
                {"CAST(0 AS DECIMAL(38,0)) * CAST(1 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(0 AS DECIMAL(38,0)) * CAST(-1 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(1 AS DECIMAL(38,0)) * CAST(0 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(-1 AS DECIMAL(38,0)) * CAST(0 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(3 AS DECIMAL(38,0)) * CAST(2 AS DECIMAL(38,0))", "00000000000000000000000000000000000006"},
                {"CAST(3 AS DECIMAL(38,0)) * CAST(DECIMAL '0.2' AS DECIMAL(38,1))", "0000000000000000000000000000000000000.6"},
                {"DECIMAL '.1234567890123456789' * DECIMAL '.1234567890123456789'", ".01524157875323883675019051998750190521"},
        };
    }

    @Test(dataProvider = "testMultiplyCases")
    public void testMultiply(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testMultiplyScaleTooLargeCases()
    {
        return new Object[][] {
                // scale exceeds max precision
                {"DECIMAL '.1234567890123456789' * DECIMAL '.12345678901234567890'", "DECIMAL scale must be in range [0, precision (38)]: 39"},
                {"DECIMAL '.1' * DECIMAL '.12345678901234567890123456789012345678'", "DECIMAL scale must be in range [0, precision (38)]: 39"},
        };
    }

    @Test(dataProvider = "testMultiplyScaleTooLargeCases")
    public void testMultiplyScaleTooLarge(String projection, String expectedError)
    {
        assertInvalidFunction(projection, expectedError);
    }

    @DataProvider
    public static Object[][] testMultiplyOverflowCases()
    {
        return new Object[][] {
                // runtime overflow tests
                {"DECIMAL '12345678901234567890123456789012345678' * DECIMAL '9'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '.12345678901234567890123456789012345678' * DECIMAL '9'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '12345678901234567890123456789012345678' * DECIMAL '-9'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '.12345678901234567890123456789012345678' * DECIMAL '-9'", NUMERIC_VALUE_OUT_OF_RANGE},
        };
    }

    @Test(dataProvider = "testMultiplyOverflowCases")
    public void testMultiplyOverflow(String projection, ErrorCodeSupplier expectedError)
    {
        assertInvalidFunction(projection, expectedError);
    }

    @DataProvider
    public static Object[][] testDivideCases()
    {
        return new Object[][] {
                // short short -> short
                {"DECIMAL '1' / DECIMAL '3'", "0"},
                {"DECIMAL '1' / DECIMAL '3'", "0"},
                {"DECIMAL '1.0' / DECIMAL '3'", "0.3"},
                {"DECIMAL '1.0' / DECIMAL '0.1'", "10.0"},
                {"DECIMAL '1.0' / DECIMAL '9.0'", "00.1"},
                {"DECIMAL '500.00' / DECIMAL '0.1'", "5000.00"},
                {"DECIMAL '100.00' / DECIMAL '0.3'", "0333.33"},
                {"DECIMAL '100.00' / DECIMAL '0.30'", "00333.33"},
                {"DECIMAL '100.00' / DECIMAL '-0.30'", "-00333.33"},
                {"DECIMAL '-100.00' / DECIMAL '0.30'", "-00333.33"},
                {"DECIMAL '200.00' / DECIMAL '0.3'", "0666.67"},
                {"DECIMAL '200.00000' / DECIMAL '0.3'", "0666.66667"},
                {"DECIMAL '200.00000' / DECIMAL '-0.3'", "-0666.66667"},
                {"DECIMAL '-200.00000' / DECIMAL '0.3'", "-0666.66667"},
                {"DECIMAL '999999999999999999' / DECIMAL '1'", "999999999999999999"},
                {"DECIMAL '9' / DECIMAL '000000000000000003'", "3"},
                {"DECIMAL '9.0' / DECIMAL '3.0'", "03.0"},
                {"DECIMAL '999999999999999999' / DECIMAL '500000000000000000'", "000000000000000002"},
                {"DECIMAL '1' / DECIMAL '999999999999999999'", "0"},
                {"DECIMAL '-1' / DECIMAL '999999999999999999'", "0"},
                // round
                {"DECIMAL '9' / DECIMAL '5'", "2"},
                {"DECIMAL '7' / DECIMAL '5'", "1"},
                {"DECIMAL '-9' / DECIMAL '5'", "-2"},
                {"DECIMAL '-7' / DECIMAL '5'", "-1"},
                {"DECIMAL '-9' / DECIMAL '-5'", "2"},
                {"DECIMAL '-7' / DECIMAL '-5'", "1"},
                {"DECIMAL '9' / DECIMAL '-5'", "-2"},
                {"DECIMAL '7' / DECIMAL '-5'", "-1"},

                // short short -> long
                {"DECIMAL '10' / DECIMAL '.000000001'", "10000000000.000000000"},
                {"DECIMAL '-10' / DECIMAL '.000000001'", "-10000000000.000000000"},
                {"DECIMAL '10' / DECIMAL '-.000000001'", "-10000000000.000000000"},
                {"DECIMAL '-10' / DECIMAL '-.000000001'", "10000000000.000000000"},

                // long short -> long
                {"DECIMAL '200000000000000000000000000000000000' / DECIMAL '0.30'", "666666666666666666666666666666666666.67"},
                {"DECIMAL '200000000000000000000000000000000000' / DECIMAL '-0.30'", "-666666666666666666666666666666666666.67"},
                {"DECIMAL '-.20000000000000000000000000000000000000' / DECIMAL '0.30'", "-.66666666666666666666666666666666666667"},
                {"DECIMAL '-.20000000000000000000000000000000000000' / DECIMAL '-0.30'", ".66666666666666666666666666666666666667"},
                {"DECIMAL '.20000000000000000000000000000000000000' / DECIMAL '0.30'", ".66666666666666666666666666666666666667"},
                // round
                {"DECIMAL '500000000000000000000000000000000075' / DECIMAL '50'", "010000000000000000000000000000000002"},
                {"DECIMAL '500000000000000000000000000000000070' / DECIMAL '50'", "010000000000000000000000000000000001"},
                {"DECIMAL '-500000000000000000000000000000000075' / DECIMAL '50'", "-010000000000000000000000000000000002"},
                {"DECIMAL '-500000000000000000000000000000000070' / DECIMAL '50'", "-010000000000000000000000000000000001"},
                {"DECIMAL '500000000000000000000000000000000075' / DECIMAL '-50'", "-010000000000000000000000000000000002"},
                {"DECIMAL '500000000000000000000000000000000070' / DECIMAL '-50'", "-010000000000000000000000000000000001"},
                {"DECIMAL '-500000000000000000000000000000000075' / DECIMAL '-50'", "010000000000000000000000000000000002"},
                {"DECIMAL '-500000000000000000000000000000000070' / DECIMAL '-50'", "010000000000000000000000000000000001"},

                // short long -> long
                {"DECIMAL '0.1' / DECIMAL '.0000000000000000001'", "1000000000000000000.0000000000000000000"},
                {"DECIMAL '-0.1' / DECIMAL '.0000000000000000001'", "-1000000000000000000.0000000000000000000"},
                {"DECIMAL '0.1' / DECIMAL '-.0000000000000000001'", "-1000000000000000000.0000000000000000000"},
                {"DECIMAL '-0.1' / DECIMAL '-.0000000000000000001'", "1000000000000000000.0000000000000000000"},

                // short long -> short
                {"DECIMAL '9' / DECIMAL '000000000000000003.0'", "03.0"},
                {"DECIMAL '1' / DECIMAL '99999999999999999999999999999999999999'", "0"},
                {"DECIMAL '-1' / DECIMAL '99999999999999999999999999999999999999'", "0"},
                {"DECIMAL '1' / DECIMAL '-99999999999999999999999999999999999999'", "0"},
                {"DECIMAL '-1' / DECIMAL '-99999999999999999999999999999999999999'", "0"},

                // long long -> long
                {"DECIMAL '99999999999999999999999999999999999999' / DECIMAL '11111111111111111111111111111111111111'", "00000000000000000000000000000000000009"},
                {"DECIMAL '-99999999999999999999999999999999999999' / DECIMAL '11111111111111111111111111111111111111'", "-00000000000000000000000000000000000009"},
                {"DECIMAL '99999999999999999999999999999999999999' / DECIMAL '-11111111111111111111111111111111111111'", "-00000000000000000000000000000000000009"},
                {"DECIMAL '-99999999999999999999999999999999999999' / DECIMAL '-11111111111111111111111111111111111111'", "00000000000000000000000000000000000009"},
                {"DECIMAL '11111111111111111111111111111111111111' / DECIMAL '99999999999999999999999999999999999999'", "00000000000000000000000000000000000000"},
                {"DECIMAL '-11111111111111111111111111111111111111' / DECIMAL '99999999999999999999999999999999999999'", "00000000000000000000000000000000000000"},
                {"DECIMAL '11111111111111111111111111111111111111' / DECIMAL '-99999999999999999999999999999999999999'", "00000000000000000000000000000000000000"},
                {"DECIMAL '-11111111111111111111111111111111111111' / DECIMAL '-99999999999999999999999999999999999999'", "00000000000000000000000000000000000000"},
                {"DECIMAL '99999999999999999999999999999999999998' / DECIMAL '99999999999999999999999999999999999999'", "00000000000000000000000000000000000001"},
                {"DECIMAL '9999999999999999999999999999999999999.8' / DECIMAL '9999999999999999999999999999999999999.9'", "0000000000000000000000000000000000001.0"},
                {"DECIMAL '9999999999999999999999.9' / DECIMAL '1111111111111111111111.100'", "0000000000000000000000009.000"},
                {"CAST('1635619.3155' AS DECIMAL(38,4)) / CAST('47497517.7405' AS DECIMAL(38,4))", "0000000000000000000000000000000000.0344"},

                {"CAST(1000 AS DECIMAL(38,8)) / CAST(25 AS DECIMAL(38,8))", "000000000000000000000000000040.00000000"},
        };
    }

    @Test(dataProvider = "testDivideCases")
    public void testDivide(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testDivideInvalidCases()
    {
        return new Object[][] {
                // runtime overflow
                {"DECIMAL '12345678901234567890123456789012345678' / DECIMAL '.1'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '.12345678901234567890123456789012345678' / DECIMAL '.1'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '12345678901234567890123456789012345678' / DECIMAL '.12345678901234567890123456789012345678'", NUMERIC_VALUE_OUT_OF_RANGE},
                {"DECIMAL '1' / DECIMAL '.12345678901234567890123456789012345678'", NUMERIC_VALUE_OUT_OF_RANGE},

                // division by zero tests
                {"DECIMAL '1' / DECIMAL '0'", DIVISION_BY_ZERO},
                {"DECIMAL '1.000000000000000000000000000000000000' / DECIMAL '0'", DIVISION_BY_ZERO},
                {"DECIMAL '1.000000000000000000000000000000000000' / DECIMAL '0.0000000000000000000000000000000000000'", DIVISION_BY_ZERO},
                {"DECIMAL '1' / DECIMAL '0.0000000000000000000000000000000000000'", DIVISION_BY_ZERO},
        };
    }

    @Test(dataProvider = "testDivideInvalidCases")
    public void testDivideInvalid(String projection, StandardErrorCode expectedErrorCode)
    {
        assertInvalidFunction(projection, expectedErrorCode);
    }

    @DataProvider
    public static Object[][] testModulusCases()
    {
        return new Object[][] {
                // short short -> short
                {"DECIMAL '1' % DECIMAL '3'", "1"},
                {"DECIMAL '10' % DECIMAL '3'", "1"},
                {"DECIMAL '0' % DECIMAL '3'", "0"},
                {"DECIMAL '0' % DECIMAL '-3'", "0"},
                {"DECIMAL '10.0' % DECIMAL '3'", "1.0"},
                {"DECIMAL '10.0' % DECIMAL '3.000'", "1.000"},
                {"DECIMAL '7' % DECIMAL '3.0000000000000000'", "1.0000000000000000"},
                {"DECIMAL '7.00000000000000000' % DECIMAL '3.00000000000000000'", "1.00000000000000000"},
                {"DECIMAL '7.00000000000000000' % DECIMAL '3'", "1.00000000000000000"},
                {"DECIMAL '7' % CAST(3 AS DECIMAL(17,0))", "1"},
                {"DECIMAL '.1' % DECIMAL '.03'", ".01"},
                {"DECIMAL '.0001' % DECIMAL '.03'", ".0001"},
                {"DECIMAL '-10' % DECIMAL '3'", "-1"},
                {"DECIMAL '10' % DECIMAL '-3'", "1"},
                {"DECIMAL '-10' % DECIMAL '-3'", "-1"},
                {"DECIMAL '9' % DECIMAL '3'", "0"},
                {"DECIMAL '-9' % DECIMAL '3'", "0"},
                {"DECIMAL '9' % DECIMAL '-3'", "0"},
                {"DECIMAL '-9' % DECIMAL '-3'", "0"},

                // short long -> short
                {"DECIMAL '0' % CAST(3 AS DECIMAL(38,16))", "0.0000000000000000"},
                {"DECIMAL '0' % CAST(-3 AS DECIMAL(38,16))", "0.0000000000000000"},
                {"DECIMAL '7' % CAST(3 AS DECIMAL(38,0))", "1"},
                {"DECIMAL '7' % CAST(3 AS DECIMAL(38,16))", "1.0000000000000000"},
                {"DECIMAL '7.00000000000000000' % CAST(3 AS DECIMAL(38,17))", "1.00000000000000000"},
                {"DECIMAL '-7.00000000000000000' % CAST(3 AS DECIMAL(38,17))", "-1.00000000000000000"},
                {"DECIMAL '7.0000000000000000' % CAST(-3 AS DECIMAL(38,16))", "1.0000000000000000"},
                {"DECIMAL '-7.0000000000000000' % CAST(-3 AS DECIMAL(38,16))", "-1.0000000000000000"},
                {"DECIMAL '9.00000000000000000' % CAST(3 AS DECIMAL(38,17))", "0.00000000000000000"},
                {"DECIMAL '-9.00000000000000000' % CAST(3 AS DECIMAL(38,17))", "0.00000000000000000"},
                {"DECIMAL '9.0000000000000000' % CAST(-3 AS DECIMAL(38,16))", "0.0000000000000000"},
                {"DECIMAL '-9.0000000000000000' % CAST(-3 AS DECIMAL(38,16))", "0.0000000000000000"},

                // short long -> long
                {"DECIMAL '0' % DECIMAL '3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},
                {"DECIMAL '0' % DECIMAL '-3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},
                {"DECIMAL '7' % DECIMAL '3.0000000000000000000000000000000000000'", "1.0000000000000000000000000000000000000"},
                {"DECIMAL '7.00000000000000000' % DECIMAL '3.0000000000000000000000000000000000000'", "1.0000000000000000000000000000000000000"},
                {"DECIMAL '.01' % DECIMAL '3.0000000000000000000000000000000000000'", ".0100000000000000000000000000000000000"},
                {"DECIMAL '-7' % DECIMAL '3.0000000000000000000000000000000000000'", "-1.0000000000000000000000000000000000000"},
                {"DECIMAL '7' % DECIMAL '-3.0000000000000000000000000000000000000'", "1.0000000000000000000000000000000000000"},
                {"DECIMAL '-7' % DECIMAL '-3.0000000000000000000000000000000000000'", "-1.0000000000000000000000000000000000000"},
                {"DECIMAL '9' % DECIMAL '3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},
                {"DECIMAL '-9' % DECIMAL '3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},
                {"DECIMAL '9' % DECIMAL '-3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},
                {"DECIMAL '-9' % DECIMAL '-3.0000000000000000000000000000000000000'", "0.0000000000000000000000000000000000000"},

                // long short -> short
                {"DECIMAL '99999999999999999999999999999999999997' % DECIMAL '3'", "1"},
                {"DECIMAL '99999999999999999999999999999999999997' % DECIMAL '3.0000000000000000'", "1.0000000000000000"},
                {"DECIMAL '-99999999999999999999999999999999999997' % DECIMAL '3'", "-1"},
                {"DECIMAL '99999999999999999999999999999999999997' % DECIMAL '-3'", "1"},
                {"DECIMAL '-99999999999999999999999999999999999997' % DECIMAL '-3'", "-1"},
                {"DECIMAL '99999999999999999999999999999999999999' % DECIMAL '3'", "0"},
                {"DECIMAL '-99999999999999999999999999999999999999' % DECIMAL '3'", "0"},
                {"DECIMAL '99999999999999999999999999999999999999' % DECIMAL '-3'", "0"},
                {"DECIMAL '-99999999999999999999999999999999999999' % DECIMAL '-3'", "0"},

                // long short -> long
                {"DECIMAL '0.000000000000000000000000000000000000' % DECIMAL '3'", ".000000000000000000000000000000000000"},
                {"DECIMAL '0.000000000000000000000000000000000000' % DECIMAL '-3'", ".000000000000000000000000000000000000"},
                {"DECIMAL '7.000000000000000000000000000000000000' % DECIMAL '3'", "1.000000000000000000000000000000000000"},
                {"DECIMAL '-7.000000000000000000000000000000000000' % DECIMAL '3'", "-1.000000000000000000000000000000000000"},
                {"DECIMAL '7.000000000000000000000000000000000000' % DECIMAL '-3'", "1.000000000000000000000000000000000000"},
                {"DECIMAL '-7.000000000000000000000000000000000000' % DECIMAL '-3'", "-1.000000000000000000000000000000000000"},
                {"DECIMAL '9.000000000000000000000000000000000000' % DECIMAL '3'", "0.000000000000000000000000000000000000"},
                {"DECIMAL '-9.000000000000000000000000000000000000' % DECIMAL '3'", "0.000000000000000000000000000000000000"},
                {"DECIMAL '9.000000000000000000000000000000000000' % DECIMAL '-3'", "0.000000000000000000000000000000000000"},
                {"DECIMAL '-9.000000000000000000000000000000000000' % DECIMAL '-3'", "0.000000000000000000000000000000000000"},

                // long long -> long
                {"CAST(0 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(0 AS DECIMAL(38,0)) % CAST(-3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(7 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(38,0))", "00000000000000000000000000000000000001"},
                {"CAST(7 AS DECIMAL(34,0)) % CAST(3 AS DECIMAL(38,0))", "0000000000000000000000000000000001"},
                {"CAST(7 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(34,0))", "0000000000000000000000000000000001"},
                {"CAST(-7 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(38,0))", "-00000000000000000000000000000000000001"},
                {"CAST(7 AS DECIMAL(38,0)) % CAST(-3 AS DECIMAL(38,0))", "00000000000000000000000000000000000001"},
                {"CAST(-7 AS DECIMAL(38,0)) % CAST(-3 AS DECIMAL(38,0))", "-00000000000000000000000000000000000001"},
                {"CAST(9 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(-9 AS DECIMAL(38,0)) % CAST(3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(9 AS DECIMAL(38,0)) % CAST(-3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
                {"CAST(-9 AS DECIMAL(38,0)) % CAST(-3 AS DECIMAL(38,0))", "00000000000000000000000000000000000000"},
        };
    }

    @Test(dataProvider = "testModulusCases")
    public void testModulus(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testModulusInvalidCases()
    {
        return new Object[][] {
                // division by zero tests
                {"DECIMAL '1' % DECIMAL '0'"},
                {"DECIMAL '1.000000000000000000000000000000000000' % DECIMAL '0'"},
                {"DECIMAL '1.000000000000000000000000000000000000' % DECIMAL '0.0000000000000000000000000000000000000'"},
                {"DECIMAL '1' % DECIMAL '0.0000000000000000000000000000000000000'"},
                {"DECIMAL '1' % CAST(0 AS DECIMAL(38,0))"},
        };
    }

    @Test(dataProvider = "testModulusInvalidCases")
    public void testModulusInvalid(String projection)
    {
        assertInvalidFunction(projection, DIVISION_BY_ZERO);
    }

    @DataProvider
    public static Object[][] testNegationCases()
    {
        return new Object[][] {
                // short
                {"-DECIMAL '1'", "-1"},
                {"-DECIMAL '-1'", "1"},
                {"-DECIMAL '123456.00000010'", "-123456.00000010"},
                {"-DECIMAL '1234567.00500010734'", "-1234567.00500010734"},
                {"-DECIMAL '-1234567.00500010734'", "1234567.00500010734"},
                {"-DECIMAL '0'", "0"},
                {"-DECIMAL '0.00000000000000000000'", ".00000000000000000000"},

                // long
                {"-DECIMAL '12345678901234567890123456789012345678'", "-12345678901234567890123456789012345678"},
                {"-DECIMAL '-12345678901234567890123456789012345678'", "12345678901234567890123456789012345678"},
                {"-DECIMAL '123456789012345678.90123456789012345678'", "-123456789012345678.90123456789012345678"},
        };
    }

    @Test(dataProvider = "testNegationCases")
    public void testNegation(String statement, String expectedResult)
    {
        assertDecimalFunction(statement, decimal(expectedResult));
    }

    @DataProvider
    public static Object[][] testEqualCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' = DECIMAL '37'", true},
                {"DECIMAL '37' = DECIMAL '0037'", true},
                {"DECIMAL '37' = DECIMAL '37.0'", true},
                {"DECIMAL '37.0' = DECIMAL '37'", true},
                {"DECIMAL '-0.000' = DECIMAL '0.00000'", true},
                {"DECIMAL '37' = DECIMAL '38'", false},
                {"DECIMAL '37' = DECIMAL '38.0'", false},
                {"DECIMAL '37.0' = DECIMAL '38'", false},
                {"DECIMAL '-37.000' = DECIMAL '37.000'", false},
                {"DECIMAL '-123456789123456789' = DECIMAL '-123456789123456789'", true},
                {"DECIMAL '-123456789123456789' = DECIMAL '123456789123456789'", false},

                // short long
                {"DECIMAL '37' = DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '37' = DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '037.0' = DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '-0.000' = DECIMAL '0.000000000000000000000000000000000'", true},
                {"DECIMAL '37' = DECIMAL '00000000038.0000000000000000000000'", false},
                {"DECIMAL '-37' = DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000' = DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '37.0000000000000000' = DECIMAL '00000000036.0000000000000000000000'", false},

                // long short
                {"DECIMAL '37.0000000000000000000000000' = DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' = DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' = DECIMAL '037.0'", true},
                {"DECIMAL '-0.000000000000000000000000000000000' = DECIMAL '0.000'", true},
                {"DECIMAL '00000000038.0000000000000000000000' = DECIMAL '37'", false},
                {"DECIMAL '-00000000037.0000000000000000000000' = DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' = DECIMAL '37.0000000000000000'", true},
                {"DECIMAL '00000000036.0000000000000000000000' = DECIMAL '37.0000000000000000'", false},

                // long long
                {"DECIMAL '37.0000000000000000000000000' = DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' = DECIMAL '0037.0000000000000000000000'", true},
                {"DECIMAL '0.0000000000000000000000000000000' = DECIMAL '-0.000000000000000000000000000000'", true},
                {"DECIMAL '00000000038.0000000000000000000000' = DECIMAL '000000000037.00000000000000000000000'", false},
                {"DECIMAL '-00000000038.0000000000000000000000' = DECIMAL '00000000038.0000000000000000000000'", false},
        };
    }

    @Test(dataProvider = "testEqualCases")
    public void testEqual(String projection, boolean expected)
    {
        assertFunction(projection, BOOLEAN, expected);
    }

    @DataProvider
    public static Object[][] testNotEqualCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' != DECIMAL '37'", false},
                {"DECIMAL '37' != DECIMAL '0037'", false},
                {"DECIMAL '37' != DECIMAL '37.0'", false},
                {"DECIMAL '37.0' != DECIMAL '37'", false},
                {"DECIMAL '0' != DECIMAL '-0.00'", false},
                {"DECIMAL '37' != DECIMAL '-37'", true},
                {"DECIMAL '37' != DECIMAL '38'", true},
                {"DECIMAL '37' != DECIMAL '38.0'", true},
                {"DECIMAL '37.0' != DECIMAL '38'", true},
                {"DECIMAL '37' != DECIMAL '-37'", true},
                {"DECIMAL '-999999999999999999' != DECIMAL '-999999999999999999'", false},
                {"DECIMAL '-999999999999999999' != DECIMAL '999999999999999998'", true},

                // short long
                {"DECIMAL '37' != DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '37' != DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '037.0' != DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '0' != DECIMAL '-0.0000000000000000000000000000'", false},
                {"DECIMAL '37' != DECIMAL '00000000038.0000000000000000000000'", true},
                {"DECIMAL '37' != DECIMAL '-000000000037.00000000000000000'", true},
                {"DECIMAL '38.0000000000000000' != DECIMAL '00000000038.0000000000000000000001'", true},
                {"DECIMAL '-987654321987654321' != DECIMAL '-987654321987654321.00000000000000000'", false},

                // long short
                {"DECIMAL '37.0000000000000000000000000' != DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' != DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' != DECIMAL '037.0'", false},
                {"DECIMAL '0.0000000000000000000000000000' != DECIMAL '-0'", false},
                {"DECIMAL '00000000038.0000000000000000000000' != DECIMAL '37'", true},
                {"DECIMAL '00000000000037.00000000000000000000' != DECIMAL '-37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' != DECIMAL '37.0000000000000001'", true},
                {"DECIMAL '-00000000000037.00000000000000000000' != DECIMAL '-37.0000000000000001'", true},

                // long long
                {"DECIMAL '37.0000000000000000000000000' != DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '00000000037.0000000000000000000000' != DECIMAL '0037.0000000000000000000000'", false},
                {"DECIMAL '0.00000000000000000000000000000000000' != DECIMAL '-0.000000000000000000000000000000000'", false},
                {"DECIMAL '00000000038.0000000000000000000000' != DECIMAL '000000000037.00000000000000000000000'", true},
                {"DECIMAL '00000000000037.00000000000000000000' != DECIMAL '-00000000000037.00000000000000000000'", true},
        };
    }

    @Test(dataProvider = "testNotEqualCases")
    public void testNotEqual(String projection, boolean expectedResult)
    {
        assertFunction(projection, BOOLEAN, expectedResult);
    }

    @DataProvider
    public static Object[][] testLessThanCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' < DECIMAL '37'", false},
                {"DECIMAL '37' < DECIMAL '0037'", false},
                {"DECIMAL '37' < DECIMAL '37.0'", false},
                {"DECIMAL '37.0' < DECIMAL '37'", false},
                {"DECIMAL '0037.0' < DECIMAL '00036.0'", false},
                {"DECIMAL '37' < DECIMAL '38'", true},
                {"DECIMAL '37' < DECIMAL '0038.0'", true},
                {"DECIMAL '0037.0' < DECIMAL '38'", true},
                {"DECIMAL '-100' < DECIMAL '20'", true},
                // test possible overflow on rescale
                {"DECIMAL '1' < DECIMAL '10000000000000000'", true},
                {"DECIMAL '1.0000000000000000' < DECIMAL '10000000000000000'", true},
                {"DECIMAL '-123456789123456789' < DECIMAL '-123456789123456789'", false},
                {"DECIMAL '-123456789123456789' < DECIMAL '123456789123456789'", true},

                // short long
                {"DECIMAL '37' < DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '37' < DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '037.0' < DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '037.0' < DECIMAL '00000000036.0000000000000000000000'", false},
                {"DECIMAL '37' < DECIMAL '37.00000000000000000000000001'", true},
                {"DECIMAL '37' < DECIMAL '00000000038.0000000000000000000000'", true},
                {"DECIMAL '037.0' < DECIMAL '00000000038.0000000000000000000000'", true},
                {"DECIMAL '-100' < DECIMAL '20.00000000000000000000000'", true},
                {"DECIMAL '38.0000000000000000' < DECIMAL '00000000038.0000000000000000000001'", true},
                {"DECIMAL '-987654321987654321' < DECIMAL '-987654321987654321.00000000000000000'", false},

                // long short
                {"DECIMAL '37.0000000000000000000000000' < DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '037.0'", false},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '036.0'", false},
                {"DECIMAL '37.0000000000000000000000000' < DECIMAL '38'", true},
                {"DECIMAL '00000000037.0000000000000000000001' < DECIMAL '38'", true},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '038.0'", true},
                {"DECIMAL '-00000000000100.000000000000' < DECIMAL '20'", true},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '37.0000000000000001'", true},
                {"DECIMAL '-00000000000037.00000000000000000000' < DECIMAL '-37.0000000000000001'", false},

                // long long
                {"DECIMAL '37.0000000000000000000000000' < DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' < DECIMAL '00000037.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' < DECIMAL '00000036.0000000000000000000000000'", false},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '38.0000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' < DECIMAL '000000000037.00000000000000000000001'", true},
                {"DECIMAL '-00000000000100.000000000000' < DECIMAL '0000000020.0000000000000'", true},
        };
    }

    @Test(dataProvider = "testLessThanCases")
    public void testLessThan(String projection, boolean expectedResult)
    {
        assertFunction(projection, BOOLEAN, expectedResult);
    }

    @DataProvider
    public static Object[][] testGreaterThanCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' > DECIMAL '37'", false},
                {"DECIMAL '37' > DECIMAL '0037'", false},
                {"DECIMAL '37' > DECIMAL '37.0'", false},
                {"DECIMAL '37.0' > DECIMAL '37'", false},
                {"DECIMAL '0037.0' > DECIMAL '00038.0'", false},
                {"DECIMAL '37' > DECIMAL '36'", true},
                {"DECIMAL '37' > DECIMAL '0036.0'", true},
                {"DECIMAL '0037.0' > DECIMAL '36'", true},
                {"DECIMAL '100' > DECIMAL '-20'", true},
                // test possible overflow on rescale
                {"DECIMAL '10000000000000000' > DECIMAL '1'", true},
                {"DECIMAL '10000000000000000' > DECIMAL '1.0000000000000000'", true},
                {"DECIMAL '-123456789123456788' > DECIMAL '-123456789123456789'", true},
                {"DECIMAL '-123456789123456789' > DECIMAL '123456789123456789'", false},

                // short long
                {"DECIMAL '37' > DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '37' > DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '037.0' > DECIMAL '00000000037.0000000000000000000000'", false},
                {"DECIMAL '037.0' > DECIMAL '00000000038.0000000000000000000000'", false},
                {"DECIMAL '37' > DECIMAL '36.00000000000000000000000001'", true},
                {"DECIMAL '37' > DECIMAL '00000000036.0000000000000000000000'", true},
                {"DECIMAL '037.0' > DECIMAL '00000000036.0000000000000000000000'", true},
                {"DECIMAL '100' > DECIMAL '-0000000020.00000000000000000000000'", true},
                {"DECIMAL '38.0000000000000000' > DECIMAL '00000000038.0000000000000000000001'", false},
                {"DECIMAL '-987654321987654320' > DECIMAL '-987654321987654321.00000000000000000'", true},

                // long short
                {"DECIMAL '37.0000000000000000000000000' > DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '37'", false},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '037.0'", false},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '038.0'", false},
                {"DECIMAL '37.0000000000000000000000000' > DECIMAL '36'", true},
                {"DECIMAL '00000000037.0000000000000000000001' > DECIMAL '36'", true},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '036.0'", true},
                {"DECIMAL '0000000000100.000000000000' > DECIMAL '20'", true},
                {"DECIMAL '00000000037.0000000000000000000002' > DECIMAL '37.0000000000000000'", true},
                {"DECIMAL '-00000000000037.00000000000000000000' > DECIMAL '-37.0000000000000001'", true},

                // long long
                {"DECIMAL '37.0000000000000000000000000' > DECIMAL '37.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' > DECIMAL '00000037.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' > DECIMAL '00000038.0000000000000000000000000'", false},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '36.0000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' > DECIMAL '000000000036.9999999999999999999999'", true},
                {"DECIMAL '000000000000100.0000000000000000000000' > DECIMAL '-0000000020.00000000000000000000000'", true},
        };
    }

    @Test(dataProvider = "testGreaterThanCases")
    public void testGreaterThan(String projection, boolean expectedResult)
    {
        assertFunction(projection, BOOLEAN, expectedResult);
    }

    @DataProvider
    public static Object[][] testLessThanOrEqualCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' <= DECIMAL '36'", false},
                {"DECIMAL '37' <= DECIMAL '000036.99999'", false},
                {"DECIMAL '37' <= DECIMAL '37'", true},
                {"DECIMAL '37' <= DECIMAL '0037'", true},
                {"DECIMAL '37' <= DECIMAL '37.0'", true},
                {"DECIMAL '37.0' <= DECIMAL '37'", true},
                {"DECIMAL '37' <= DECIMAL '38'", true},
                {"DECIMAL '37' <= DECIMAL '0038.0'", true},
                {"DECIMAL '0037.0' <= DECIMAL '38'", true},
                {"DECIMAL '-100' <= DECIMAL '20'", true},
                {"DECIMAL '-123456789123456789' <= DECIMAL '-123456789123456789'", true},
                {"DECIMAL '-123456789123456789' <= DECIMAL '123456789123456789'", true},

                // short long
                {"DECIMAL '037.0' <= DECIMAL '00000000036.0000000000000000000000'", false},
                {"DECIMAL '037.0' <= DECIMAL '00000000036.9999999999999999999'", false},
                {"DECIMAL '37' <= DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '37' <= DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '037.0' <= DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '37' <= DECIMAL '37.00000000000000000000000001'", true},
                {"DECIMAL '37' <= DECIMAL '00000000038.0000000000000000000000'", true},
                {"DECIMAL '037.0' <= DECIMAL '00000000038.0000000000000000000000'", true},
                {"DECIMAL '-100' <= DECIMAL '20.00000000000000000000000'", true},
                {"DECIMAL '38.0000000000000000' <= DECIMAL '00000000038.0000000000000000000001'", true},
                {"DECIMAL '-987654321987654321' <= DECIMAL '-987654321987654321.00000000000000000'", true},

                // long short
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '036.0'", false},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '000036.99999999'", false},
                {"DECIMAL '37.0000000000000000000000000' <= DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '037.0'", true},
                {"DECIMAL '37.0000000000000000000000000' <= DECIMAL '38'", true},
                {"DECIMAL '00000000037.0000000000000000000001' <= DECIMAL '38'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '038.0'", true},
                {"DECIMAL '-00000000000100.000000000000' <= DECIMAL '20'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '37.0000000000000001'", true},
                {"DECIMAL '-00000000000037.00000000000000000000' <= DECIMAL '-37.0000000000000001'", false},

                // long long
                {"DECIMAL '37.0000000000000000000000000' <= DECIMAL '00000036.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' <= DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '37.0000000000000000000000000' <= DECIMAL '00000037.0000000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '38.0000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' <= DECIMAL '000000000037.00000000000000000000001'", true},
                {"DECIMAL '-00000000000100.000000000000' <= DECIMAL '0000000020.0000000000000'", true},
        };
    }

    @Test(dataProvider = "testLessThanOrEqualCases")
    public void testLessThanOrEqual(String projection, boolean expectedResult)
    {
        assertFunction(projection, BOOLEAN, expectedResult);
    }

    @DataProvider
    public static Object[][] testGreaterThanOrEqualCases()
    {
        return new Object[][] {
                // short short
                {"DECIMAL '37' >= DECIMAL '38'", false},
                {"DECIMAL '37' >= DECIMAL '000038.00001'", false},
                {"DECIMAL '37' >= DECIMAL '37'", true},
                {"DECIMAL '37' >= DECIMAL '0037'", true},
                {"DECIMAL '37' >= DECIMAL '37.0'", true},
                {"DECIMAL '37.0' >= DECIMAL '37'", true},
                {"DECIMAL '37' >= DECIMAL '36'", true},
                {"DECIMAL '37' >= DECIMAL '0036.0'", true},
                {"DECIMAL '0037.0' >= DECIMAL '36'", true},
                {"DECIMAL '100' >= DECIMAL '-20'", true},
                {"DECIMAL '-123456789123456789' >= DECIMAL '-123456789123456789'", true},
                {"DECIMAL '-123456789123456789' >= DECIMAL '123456789123456789'", false},

                // short long
                {"DECIMAL '037.0' >= DECIMAL '00000000038.0000000000000000000000'", false},
                {"DECIMAL '037.0' >= DECIMAL '00000000037.0000000000000000001'", false},
                {"DECIMAL '37' >= DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '37' >= DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '037.0' >= DECIMAL '00000000037.0000000000000000000000'", true},
                {"DECIMAL '37' >= DECIMAL '36.9999999999999999999'", true},
                {"DECIMAL '37' >= DECIMAL '00000000036.0000000000000000000000'", true},
                {"DECIMAL '037.0' >= DECIMAL '00000000036.0000000000000000000000'", true},
                {"DECIMAL '100' >= DECIMAL '-0000000020.00000000000000000000000'", true},
                {"DECIMAL '38.0000000000000000' >= DECIMAL '00000000038.0000000000000000000001'", false},
                {"DECIMAL '-987654321987654321' >= DECIMAL '-987654321987654321.00000000000000000'", true},

                // long short
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '038.0'", false},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '000037.00000001'", false},
                {"DECIMAL '37.0000000000000000000000000' >= DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '37'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '037.0'", true},
                {"DECIMAL '37.0000000000000000000000000' >= DECIMAL '36'", true},
                {"DECIMAL '00000000037.0000000000000000000001' >= DECIMAL '36'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '036.0'", true},
                {"DECIMAL '0000000000100.000000000000' >= DECIMAL '20'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '37.0000000000000001'", false},
                {"DECIMAL '-00000000000037.00000000000000000000' >= DECIMAL '-37.0000000000000001'", true},

                // long long
                {"DECIMAL '37.0000000000000000000000000' >= DECIMAL '00000038.0000000000000000000000000'", false},
                {"DECIMAL '37.0000000000000000000000000' >= DECIMAL '37.0000000000000000000000000'", true},
                {"DECIMAL '37.0000000000000000000000000' >= DECIMAL '00000037.0000000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '36.0000000000000000000000'", true},
                {"DECIMAL '00000000037.0000000000000000000000' >= DECIMAL '000000000036.9999999999999999'", true},
                {"DECIMAL '000000000000100.0000000000000000000000' >= DECIMAL '-0000000020.00000000000000000000000'", true},
        };
    }

    @Test(dataProvider = "testGreaterThanOrEqualCases")
    public void testGreaterThanOrEqual(String projection, boolean expectedResult)
    {
        assertFunction(projection, BOOLEAN, expectedResult);
    }

    @DataProvider
    public static Object[][] testBetweenCases()
    {
        return new Object[][] {
                // short short short
                {"DECIMAL '1' BETWEEN DECIMAL '-5' AND DECIMAL '5'", true},
                {"DECIMAL '-6' BETWEEN DECIMAL '-5' AND DECIMAL '5'", false},
                {"DECIMAL '6' BETWEEN DECIMAL '-5' AND DECIMAL '5'", false},
                {"DECIMAL '333333333333333333' BETWEEN DECIMAL '-111111111111111111' AND DECIMAL '999999999999999999'", true},

                // short short long
                {"DECIMAL '1' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000'", true},
                {"DECIMAL '-6' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000'", false},
                {"DECIMAL '6' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000'", false},
                {"DECIMAL '333333333333333333' BETWEEN DECIMAL '-111111111111111111' AND DECIMAL '9999999999999999999'", true},

                // short long long
                {"DECIMAL '1' BETWEEN DECIMAL '-5.00000000000000000000' AND DECIMAL '5.00000000000000000000'", true},
                {"DECIMAL '-6' BETWEEN DECIMAL '-5.00000000000000000000' AND DECIMAL '5.00000000000000000000'", false},
                {"DECIMAL '6' BETWEEN DECIMAL '-5.00000000000000000000' AND DECIMAL '5.00000000000000000000'", false},
                {"DECIMAL '333333333333333333' BETWEEN DECIMAL '-1111111111111111111' AND DECIMAL '9999999999999999999'", true},

                // long short short
                {"DECIMAL '1.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5'", true},
                {"DECIMAL '-6.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5'", false},
                {"DECIMAL '6.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5'", false},
                {"DECIMAL '333333333333333333.3' BETWEEN DECIMAL '-111111111111111111' AND DECIMAL '999999999999999999'", true},

                // long short long
                {"DECIMAL '1.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000' ", true},
                {"DECIMAL '-6.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000' ", false},
                {"DECIMAL '6.00000000000000000000' BETWEEN DECIMAL '-5' AND DECIMAL '5.00000000000000000000' ", false},
                {"DECIMAL '333333333333333333.3' BETWEEN DECIMAL '-111111111111111111' AND DECIMAL '9999999999999999999'", true},

                // long long short
                {"DECIMAL '1.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5'", true},
                {"DECIMAL '-6.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5'", false},
                {"DECIMAL '6.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5'", false},
                {"DECIMAL '333333333333333333.3' BETWEEN DECIMAL '-111111111111111111.1' AND DECIMAL '999999999999999999'", true},

                // long long long
                {"DECIMAL '1.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5.00000000000000000000'", true},
                {"DECIMAL '-6.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5.00000000000000000000'", false},
                {"DECIMAL '6.00000000000000000000' BETWEEN DECIMAL '-5.00000000000000000000'  AND DECIMAL '5.00000000000000000000'", false},
        };
    }

    @Test(dataProvider = "testBetweenCases")
    public void testBetween(String projection, boolean expected)
    {
        assertFunction(projection, BOOLEAN, expected);
    }

    @DataProvider
    public static Object[][] testAddDecimalBigintCases()
    {
        return new Object[][] {
                // decimal + bigint
                {"DECIMAL '123456789012345678' + 123456789012345678", "00246913578024691356"},
                {"DECIMAL '.123456789012345678' + 123456789012345678", "00123456789012345678.123456789012345678"},
                {"DECIMAL '-1234567890123456789' + 1234567890123456789", "00000000000000000000"},

                // bigint + decimal
                {"123456789012345678 + DECIMAL '123456789012345678'", "00246913578024691356"},
                {"123456789012345678 + DECIMAL '.123456789012345678'", "00123456789012345678.123456789012345678"},
                {"1234567890123456789 + DECIMAL '-1234567890123456789'", "00000000000000000000"},
        };
    }

    @Test(dataProvider = "testAddDecimalBigintCases")
    public void testAddDecimalBigint(String statement, String expected)
    {
        assertDecimalFunction(statement, decimal(expected));
    }

    @DataProvider
    public static Object[][] testSubtractDecimalBigintCases()
    {
        return new Object[][] {
                // decimal - bigint
                {"DECIMAL '1234567890123456789' - 1234567890123456789", "00000000000000000000"},
                {"DECIMAL '.1234567890123456789' - 1234567890123456789", "-1234567890123456788.8765432109876543211"},
                {"DECIMAL '-1234567890123456789' - 1234567890123456789", "-02469135780246913578"},

                // bigint - decimal
                {"1234567890123456789 - DECIMAL '1234567890123456789'", "00000000000000000000"},
                {"1234567890123456789 - DECIMAL '.1234567890123456789'", "1234567890123456788.8765432109876543211"},
                {"-1234567890123456789 - DECIMAL '1234567890123456789'", "-02469135780246913578"},
        };
    }

    @Test(dataProvider = "testSubtractDecimalBigintCases")
    public void testSubtractDecimalBigint(String statement, String expected)
    {
        assertDecimalFunction(statement, decimal(expected));
    }

    @DataProvider
    public static Object[][] testMultiplyDecimalBigintCases()
    {
        return new Object[][] {
                // decimal bigint
                {"DECIMAL '12345678901234567' * 12345678901234567", "000152415787532388345526596755677489"},
                {"DECIMAL '-12345678901234567' * 12345678901234567", "-000152415787532388345526596755677489"},
                {"DECIMAL '-12345678901234567' * -12345678901234567", "000152415787532388345526596755677489"},
                {"DECIMAL '.1234567890' * BIGINT '3'", "0000000000000000000.3703703670"},
                {"DECIMAL '.1234567890' * BIGINT '0'", "0000000000000000000.0000000000"},
                {"DECIMAL '-.1234567890' * BIGINT '0'", "0000000000000000000.0000000000"},

                // bigint decimal
                {"12345678901234567 * DECIMAL '12345678901234567'", "000152415787532388345526596755677489"},
                {"12345678901234567 * DECIMAL '-12345678901234567'", "-000152415787532388345526596755677489"},
                {"-12345678901234567 * DECIMAL '-12345678901234567'", "000152415787532388345526596755677489"},
                {"BIGINT '3' * DECIMAL '.1234567890'", "0000000000000000000.3703703670"},
                {"BIGINT '3' * DECIMAL '.0000000000'", "0000000000000000000.0000000000"},
                {"BIGINT '-3' * DECIMAL '.0000000000'", "0000000000000000000.0000000000"},
        };
    }

    @Test(dataProvider = "testMultiplyDecimalBigintCases")
    public void testMultiplyDecimalBigint(String statement, String expected)
    {
        assertDecimalFunction(statement, decimal(expected));
    }

    @DataProvider
    public static Object[][] testDivideDecimalBigintCases()
    {
        return new Object[][] {
                // bigint / decimal
                {"BIGINT '9' / DECIMAL '3.0'", "00000000000000000003.0"},
                {"BIGINT '-9' / DECIMAL '3.0'", "-00000000000000000003.0"},
                {"BIGINT '9' / DECIMAL '-3.0'", "-00000000000000000003.0"},
                {"BIGINT '-9' / DECIMAL '-3.0'", "00000000000000000003.0"},
                {"BIGINT '9' / DECIMAL '000000000000000003.0'", "00000000000000000003.0"},
                {"BIGINT '18' / DECIMAL '0.01'", "000000000000000001800.00"},
                {"BIGINT '9' / DECIMAL '00000000000000000.1'", "00000000000000000090.0"},
                {"BIGINT '9' / DECIMAL '300.0'", "00000000000000000000.0"},
                {"BIGINT '-9' / DECIMAL '300.0'", "00000000000000000000.0"},
                {"BIGINT '9' / DECIMAL '-300.0'", "00000000000000000000.0"},
                {"BIGINT '-9' / DECIMAL '-300.0'", "00000000000000000000.0"},

                // decimal / bigint
                {"DECIMAL '9.0' / BIGINT '3'", "3.0"},
                {"DECIMAL '-9.0' / BIGINT '3'", "-3.0"},
                {"DECIMAL '9.0' / BIGINT '-3'", "-3.0"},
                {"DECIMAL '-9.0' / BIGINT '-3'", "3.0"},
                {"DECIMAL '0.018' / BIGINT '9'", ".002"},
                {"DECIMAL '-0.018' / BIGINT '9'", "-.002"},
                {"DECIMAL '0.018' / BIGINT '-9'", "-.002"},
                {"DECIMAL '-0.018' / BIGINT '-9'", ".002"},
                {"DECIMAL '.999' / BIGINT '9'", ".111"},
                {"DECIMAL '9.0' / BIGINT '300'", "0.0"},
                {"DECIMAL '-9.0' / BIGINT '300'", "0.0"},
                {"DECIMAL '9.0' / BIGINT '-300'", "0.0"},
                {"DECIMAL '-9.0' / BIGINT '-300'", "0.0"},
        };
    }

    @Test(dataProvider = "testDivideDecimalBigintCases")
    public void testDivideDecimalBigint(String statement, String expected)
    {
        assertDecimalFunction(statement, decimal(expected));
    }

    @DataProvider
    public static Object[][] testModulusDecimalBigintCases()
    {
        return new Object[][] {
                // bigint % decimal
                {"BIGINT '13' % DECIMAL '9.0'", "4.0"},
                {"BIGINT '18' % DECIMAL '0.01'", ".00"},
                {"BIGINT '9' % DECIMAL '.1'", ".0"},
                {"BIGINT '-9' % DECIMAL '.1'", ".0"},
                {"BIGINT '9' % DECIMAL '-.1'", ".0"},
                {"BIGINT '-9' % DECIMAL '-.1'", ".0"},

                // decimal % bigint
                {"DECIMAL '13.0' % BIGINT '9'", "04.0"},
                {"DECIMAL '-13.0' % BIGINT '9'", "-04.0"},
                {"DECIMAL '13.0' % BIGINT '-9'", "04.0"},
                {"DECIMAL '-13.0' % BIGINT '-9'", "-04.0"},
                {"DECIMAL '18.00' % BIGINT '3'", "00.00"},
                {"DECIMAL '9.0' % BIGINT '3'", "0.0"},
                {"DECIMAL '-9.0' % BIGINT '3'", "0.0"},
                {"DECIMAL '9.0' % BIGINT '-3'", "0.0"},
                {"DECIMAL '-9.0' % BIGINT '-3'", "0.0"},
                {"DECIMAL '5.128' % BIGINT '2'", "1.128"},
        };
    }

    @Test(dataProvider = "testModulusDecimalBigintCases")
    public void testModulusDecimalBigint(String statement, String expected)
    {
        assertDecimalFunction(statement, decimal(expected));
    }

    @DataProvider
    public static Object[][] testIsDistinctFromCases()
    {
        return new Object[][] {
                {"CAST(NULL AS DECIMAL) IS DISTINCT FROM CAST(NULL AS DECIMAL)", false},
                {"DECIMAL '37' IS DISTINCT FROM DECIMAL '37'", false},
                {"37 IS DISTINCT FROM 38", true},
                {"NULL IS DISTINCT FROM 37", true},
                {"37 IS DISTINCT FROM NULL", true},

                // short short
                {"DECIMAL '-2' IS DISTINCT FROM DECIMAL '-3'", true},
                {"DECIMAL '-2' IS DISTINCT FROM CAST(NULL AS DECIMAL(1,0))", true},
                {"CAST(NULL AS DECIMAL(2,0)) IS DISTINCT FROM CAST(NULL AS DECIMAL(1,0))", false},
                {"DECIMAL '-2' IS DISTINCT FROM DECIMAL '-2'", false},
                {"CAST(NULL AS DECIMAL(1,0)) IS DISTINCT FROM DECIMAL '-2'", true},

                // long long
                {"DECIMAL '12345678901234567.89012345678901234567' IS DISTINCT FROM DECIMAL '12345678901234567.8902345678901234567'", true},
                {"DECIMAL '12345678901234567.89012345678901234567' IS DISTINCT FROM CAST(NULL AS DECIMAL(36,1))", true},
                {"CAST(NULL AS DECIMAL(36,1)) IS DISTINCT FROM CAST(NULL AS DECIMAL(27,3))", false},
                {"DECIMAL '-12345678901234567.89012345678901234567' IS DISTINCT FROM DECIMAL '-12345678901234567.89012345678901234567'", false},
                {"CAST(NULL AS DECIMAL(36,1)) IS DISTINCT FROM DECIMAL '12345678901234567.89012345678901234567'", true},

                // short long
                {"DECIMAL '12345678901234567.89012345678901234567' IS DISTINCT FROM DECIMAL '-3'", true},
                {"DECIMAL '12345678901234567.89012345678901234567' IS DISTINCT FROM CAST(NULL AS DECIMAL(1,0))", true},
                {"CAST(NULL AS DECIMAL(36,1)) IS DISTINCT FROM CAST(NULL AS DECIMAL(1,0))", false},
                {"DECIMAL '00000000000000007.80000000000000000000' IS DISTINCT FROM DECIMAL '7.8'", false},
                {"CAST(NULL AS DECIMAL(36,1)) IS DISTINCT FROM DECIMAL '7.8'", true},

                // with unknown
                {"NULL IS DISTINCT FROM DECIMAL '-2'", true},
                {"DECIMAL '-2' IS DISTINCT FROM NULL", true},
                {"NULL IS DISTINCT FROM DECIMAL '12345678901234567.89012345678901234567'", true},
                {"DECIMAL '12345678901234567.89012345678901234567' IS DISTINCT FROM NULL", true},

                // delegation from other operator (exercises block-position convention implementation)
                {"ARRAY [1.23, 4.56] IS DISTINCT FROM ARRAY [1.23, 4.56]", false},
                {"ARRAY [1.23, NULL] IS DISTINCT FROM ARRAY [1.23, 4.56]", true},
                {"ARRAY [1.23, NULL] IS DISTINCT FROM ARRAY [NULL, 4.56]", true},
                {"ARRAY [1234567890.123456789, 9876543210.987654321] IS DISTINCT FROM ARRAY [1234567890.123456789, 9876543210.987654321]", false},
                {"ARRAY [1234567890.123456789, NULL] IS DISTINCT FROM ARRAY [1234567890.123456789, 9876543210.987654321]", true},
                {"ARRAY [1234567890.123456789, NULL] IS DISTINCT FROM ARRAY [NULL, 9876543210.987654321]", true},
        };
    }

    @Test(dataProvider = "testIsDistinctFromCases")
    public void testIsDistinctFrom(String projection, boolean expected)
    {
        assertFunction(projection, BOOLEAN, expected);
    }

    @DataProvider
    public static Object[][] testNullIfCases()
    {
        return new Object[][] {
                // short short
                {"nullif(DECIMAL '-2', DECIMAL '-3')", createDecimalType(1, 0), decimal("-2")},
                {"nullif(DECIMAL '-2', CAST(NULL AS DECIMAL(1,0)))", createDecimalType(1, 0), decimal("-2")},
                {"nullif(DECIMAL '-2', DECIMAL '-2')", createDecimalType(1, 0), null},
                {"nullif(CAST(NULL AS DECIMAL(1,0)), DECIMAL '-2')", createDecimalType(1, 0), null},
                {"nullif(CAST(NULL AS DECIMAL(1,0)), CAST(NULL AS DECIMAL(1,0)))", createDecimalType(1, 0), null},

                // long long
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', DECIMAL '12345678901234567.8902345678901234567')", createDecimalType(37, 20), decimal("12345678901234567.89012345678901234567")},
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', CAST(NULL AS DECIMAL(36,1)))", createDecimalType(37, 20), decimal("12345678901234567.89012345678901234567")},
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', DECIMAL '12345678901234567.89012345678901234567')", createDecimalType(37, 20), null},
                {"nullif(CAST(NULL AS DECIMAL(38,0)), DECIMAL '12345678901234567.89012345678901234567')", createDecimalType(38, 0), null},
                {"nullif(CAST(NULL AS DECIMAL(38,0)), CAST(NULL AS DECIMAL(38,0)))", createDecimalType(38, 0), null},

                // short long
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', DECIMAL '-3')", createDecimalType(37, 20), decimal("12345678901234567.89012345678901234567")},
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', CAST(NULL AS DECIMAL(1,0)))", createDecimalType(37, 20), decimal("12345678901234567.89012345678901234567")},
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', DECIMAL '12345678901234567.89012345678901234567')", createDecimalType(37, 20), null},
                {"nullif(CAST(NULL AS DECIMAL(1,0)), DECIMAL '12345678901234567.89012345678901234567')", createDecimalType(1, 0), null},

                // with unknown
                {"nullif(NULL, NULL)", UnknownType.UNKNOWN, null},
                {"nullif(NULL, DECIMAL '-2')", UnknownType.UNKNOWN, null},
                {"nullif(DECIMAL '-2', NULL)", createDecimalType(1, 0), decimal("-2")},
                {"nullif(NULL, DECIMAL '12345678901234567.89012345678901234567')", UnknownType.UNKNOWN, null},
                {"nullif(DECIMAL '12345678901234567.89012345678901234567', NULL)", createDecimalType(37, 20), decimal("12345678901234567.89012345678901234567")},
        };
    }

    @Test(dataProvider = "testNullIfCases")
    public void testNullIf(String projection, Type decimalType, SqlDecimal expected)
    {
        assertFunction(projection, decimalType, expected);
    }

    @DataProvider
    public static Object[][] testCoalesceCases()
    {
        return new Object[][] {
                {"coalesce(2.1, null, cast(null as decimal(5,3)))", 5, 3, decimal("02.100")},
                {"coalesce(cast(null as decimal(17,3)), null, cast(null as decimal(12,3)))", 17, 3, null},
                {"coalesce(3, 2.1, null, cast(null as decimal(6,3)))", 13, 3, decimal("0000000003.000")},
                {"coalesce(cast(null as decimal(17,3)), null, cast(null as decimal(12,3)))", 17, 3, null},
        };
    }

    @Test(dataProvider = "testCoalesceCases")
    public void testCoalesce(String projection, int precision, int scale, SqlDecimal expected)
    {
        assertFunction(projection, createDecimalType(precision, scale), expected);
    }

    @DataProvider
    public static Object[][] testIndeterminateCases()
    {
        return new Object[][] {
                {"cast(null as DECIMAL)", true},
                {"cast(null as DECIMAL(37,3))", true},
                {"DECIMAL '.999'", false},
                {"DECIMAL '18'", false},
                {"DECIMAL '9.0'", false},
                {"DECIMAL '12345678901234567.89012345678901234567'", false},
        };
    }

    @Test(dataProvider = "testIndeterminateCases")
    public void testIndeterminate(String value, boolean expected)
    {
        assertOperator(INDETERMINATE, value, BOOLEAN, expected);
    }

    @Test
    public void testArgumentsNotModified()
    {
        Slice value = unscaledDecimal(2);

        addShortLongLong(1, value, 0, false);
        assertThat(value.getBytes())
                .isEqualTo(unscaledDecimal(2).getBytes());

        addShortLongLong(1, value, 0, false);
        assertThat(value.getBytes())
                .isEqualTo(unscaledDecimal(2).getBytes());
    }
}
