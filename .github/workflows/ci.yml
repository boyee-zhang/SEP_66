name: ci

on:
  push:
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'

env:
  # An envar that signals to tests we are executing in the CI environment
  CONTINUOUS_INTEGRATION: true
  # allow overriding Maven command
  MAVEN: ./mvnw
  # maven.wagon.rto is in millis, defaults to 30m
  MAVEN_OPTS: "-Xmx512M -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_INSTALL_OPTS: "-Xmx2G -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_FAST_INSTALL: "-B --strict-checksums -V --quiet -T C1 -DskipTests -Dmaven.source.skip=true -Dair.check.skip-all -P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event.pull_request.base.ref }}"
  MAVEN_TEST: "-B --strict-checksums -Dmaven.source.skip=true -Dair.check.skip-all --fail-at-end -P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event.pull_request.base.ref }}"
  RETRY: .github/bin/retry
  # Testcontainers kills image pulls if they don't make progress for > 30s and retries for 2m before failing. This means
  # that if an image doesn't download all it's layers within ~2m then any other concurrent pull will be killed because
  # the Docker daemon only downloads 3 layers concurrently which prevents the other pull from making any progress.
  # This value should be greater than the time taken for the longest image pull.
  TESTCONTAINERS_PULL_PAUSE_TIMEOUT: 600
  TEST_REPORT_RETENTION_DAYS: 5

# Cancel previous PR builds.
concurrency:
  # Cancel all workflow runs except latest within a concurrency group. This is achieved by defining a concurrency group for the PR.
  # Non-PR builds have singleton concurrency groups.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-pt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
          cache: 'maven'
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          # GIB needs to be explicitly disabled, because the gib profile enables it, but the trino-server module requires all of its dependencies to be built
          $RETRY $MAVEN install ${MAVEN_FAST_INSTALL} -Dgib.disable -pl '!:trino-docs,!:trino-server-rpm'
      - name: Product tests artifact
        uses: actions/upload-artifact@v2
        with:
          name: product tests and server tarball
          path: |
            core/trino-server/target/*.tar.gz
            testing/trino-product-tests-launcher/target/*-executable.jar
            testing/trino-product-tests/target/*-executable.jar
            client/trino-cli/target/*-executable.jar
          retention-days: 1

  pt:
    runs-on: ubuntu-latest
    # explicitly define the name to avoid adding the value of the `ignore exclusion if` matrix item
    name: pt (${{ matrix.config }}, ${{ matrix.suite }}, ${{ matrix.jdk }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
          # this suite is not meant to be run with different configs
          - config: default
            suite: suite-oauth2
            jdk: 11
    # PT Launcher's timeout defaults to 2h, add some margin
    timeout-minutes: 130
    needs: build-pt
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Product tests artifact
        uses: actions/download-artifact@v2
        with:
          name: product tests and server tarball
      - name: Fix artifact permissions
        run: |
          find . -type f -name \*-executable.jar -exec chmod 0777 {} \;
      - name: Product Tests
        run: |
          testing/bin/ptl suite run \
            --suite ${{ matrix.suite }} --config config-${{ matrix.config }} --bind=off --logs-dir logs/ --timeout 2h \
            --trino-jdk-version zulu_${{ matrix.jdk }}
      - name: Upload test logs and results
        uses: actions/upload-artifact@v2
        # Upload all test reports only on failure, because the artifacts are large
        if: failure()
        with:
          name: result pt (${{ matrix.config }}, ${{ matrix.suite }}, ${{ matrix.jdk }})
          path: |
            testing/trino-product-tests/target/*
            logs/*
      - name: Upload test report
        uses: actions/upload-artifact@v2
        # Always upload the test report for the annotate.yml workflow,
        # but only the single XML file to keep the artifact small
        if: always()
        with:
          # Name prefix is checked in the `Annotate checks` workflow
          name: test report pt (${{ matrix.config }}, ${{ matrix.suite }}, ${{ matrix.jdk }})
          path: testing/trino-product-tests/target/reports/**/testng-results.xml
          retention-days: ${{ env.TEST_REPORT_RETENTION_DAYS }}
