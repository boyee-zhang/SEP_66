name: ci

on:
  push:
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'docs/**'
  repository_dispatch:
    types: [test-with-secrets-command]

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

env:
  # An envar that signals to tests we are executing in the CI environment
  CONTINUOUS_INTEGRATION: true
  # allow overriding Maven command
  MAVEN: ./mvnw --offline
  # maven.wagon.rto is in millis, defaults to 30m
  MAVEN_OPTS: "-Xmx512M -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_INSTALL_OPTS: "-Xmx3G -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000"
  MAVEN_FAST_INSTALL: "-B --strict-checksums -V --quiet -T 1C -DskipTests -Dmaven.source.skip=true -Dair.check.skip-all"
  MAVEN_COMPILE_COMMITS: "-B --strict-checksums --quiet -T 1C -DskipTests -Dmaven.source.skip=true -Dair.check.skip-all=true -Dmaven.javadoc.skip=true --no-snapshot-updates --no-transfer-progress -pl '!:trino-server-rpm'"
  MAVEN_GIB: "-P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.event.repository.default_branch }}"
  MAVEN_TEST: "-B --strict-checksums -Dmaven.source.skip=true -Dair.check.skip-all --fail-at-end -P gib -Dgib.referenceBranch=refs/remotes/origin/${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.event.repository.default_branch }}"
  # Testcontainers kills image pulls if they don't make progress for > 30s and retries for 2m before failing. This means
  # that if an image doesn't download all it's layers within ~2m then any other concurrent pull will be killed because
  # the Docker daemon only downloads 3 layers concurrently which prevents the other pull from making any progress.
  # This value should be greater than the time taken for the longest image pull.
  TESTCONTAINERS_PULL_PAUSE_TIMEOUT: 600
  TESTCONTAINERS_SKIP_ARCHITECTURE_CHECK: true
  TEST_REPORT_RETENTION_DAYS: 5
  HEAP_DUMP_RETENTION_DAYS: 14
  # used by actions/cache to retry the download after this time: https://github.com/actions/cache/blob/main/workarounds.md#cache-segment-restore-timeout
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

# Cancel previous PR builds.
concurrency:
  # Cancel all workflow runs except latest within a concurrency group. This is achieved by defining a concurrency group for the PR.
  # Non-PR builds have singleton concurrency groups.
  # When triggered by the repository_dispatch, add the expected SHA to avoid cancelling the run from the PR.
  group: |
    workflow=${{ github.workflow }},
    pr_number=${{ github.event_name == 'pull_request' && github.event.number || 'NA' }},
    dispatch_sha=${{ github.event_name == 'repository_dispatch' && github.event.client_payload.slash_command.args.named.sha || 'NA' }},
    commit_sha=${{ github.event_name != 'pull_request' && github.event_name != 'repository_dispatch' && github.sha || 'NA' }}
  cancel-in-progress: true

jobs:








  build-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # checkout all commits to be able to determine merge base for GIB
          ref: |
            ${{ github.event_name == 'repository_dispatch' &&
                github.event.client_payload.pull_request.head.sha == github.event.client_payload.slash_command.args.named.sha &&
                format('refs/pull/{0}/head', github.event.client_payload.pull_request.number) || '' }}
      - uses: ./.github/actions/setup
      - name: Maven validate
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          $MAVEN validate ${MAVEN_FAST_INSTALL} ${MAVEN_GIB} -Dgib.logImpactedTo=gib-impacted.log -P disable-check-spi-dependencies -pl '!:trino-docs'
      - name: Set matrix
        id: set-matrix
        run: |
          # GIB doesn't run on master, so make sure the file always exist
          touch gib-impacted.log
          cat <<EOF > .github/test-matrix.yaml
          include:
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 19 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
            - { modules: core/trino-main, jdk: 20 }
          EOF
          ./.github/bin/build-matrix-from-impacted.py -v -i gib-impacted.log -m .github/test-matrix.yaml -o matrix.json
          echo "Matrix: $(jq '.' matrix.json)"
          echo "matrix=$(jq -c '.' matrix.json)" >> $GITHUB_OUTPUT
      - name: Clean local Maven repo
        # Avoid creating a cache entry because this job doesn't download all dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: rm -rf ~/.m2/repository

  test:
    runs-on: ubuntu-latest
    needs: build-test-matrix
    if: needs.build-test-matrix.outputs.matrix != '{}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-test-matrix.outputs.matrix) }}
    timeout-minutes: 60
    env:
      SECRETS_PRESENT: ${{ secrets.SECRETS_PRESENT }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # checkout all commits to be able to determine merge base for GIB
          ref: |
            ${{ github.event_name == 'repository_dispatch' &&
                github.event.client_payload.pull_request.head.sha == github.event.client_payload.slash_command.args.named.sha &&
                format('refs/pull/{0}/head', github.event.client_payload.pull_request.number) || '' }}
      - uses: ./.github/actions/setup
        with:
          java-version: ${{ matrix.jdk != '' && matrix.jdk || '17' }}
      - name: Cleanup node
        # This is required as a virtual environment update 20210219.1 left too little space for MemSQL to work
        if: matrix.modules == 'plugin/trino-singlestore'
        run: .github/bin/cleanup-node.sh
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          $MAVEN clean install ${MAVEN_FAST_INSTALL} ${MAVEN_GIB} -am -pl "${{ matrix.modules }}"
      - name: Maven Tests
        if: >-
          matrix.modules != 'plugin/trino-singlestore'
          && ! (contains(matrix.modules, 'trino-delta-lake') && contains(matrix.profile, 'cloud-tests'))
          && ! (contains(matrix.modules, 'trino-iceberg') && contains(matrix.profile, 'cloud-tests'))
          && ! (contains(matrix.modules, 'trino-bigquery') && contains(matrix.profile, 'cloud-tests-arrow'))
          && ! (contains(matrix.modules, 'trino-redshift') && contains(matrix.profile, 'cloud-tests'))
          && ! (contains(matrix.modules, 'trino-redshift') && contains(matrix.profile, 'fte-tests'))
        run: $MAVEN test ${MAVEN_TEST} -pl ${{ matrix.modules }} ${{ matrix.profile != '' && format('-P {0}', matrix.profile) || '' }}
      # Additional tests for selected modules
      - name: Cloud Delta Lake Tests
      # Cloud tests are separate because they are time intensive, requiring cross-cloud network communication
        env:
          ABFS_CONTAINER: ${{ secrets.AZURE_ABFS_CONTAINER }}
          ABFS_ACCOUNT: ${{ secrets.AZURE_ABFS_ACCOUNT }}
          ABFS_ACCESSKEY: ${{ secrets.AZURE_ABFS_ACCESSKEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
          AWS_REGION: us-east-2
          GCP_CREDENTIALS_KEY: ${{ secrets.GCP_CREDENTIALS_KEY }}
        # Run tests if any of the secrets is present. Do not skip tests when one secret renamed, or secret name has a typo.
        if: >-
          contains(matrix.modules, 'trino-delta-lake') && contains(matrix.profile, 'cloud-tests') &&
          (env.ABFS_ACCOUNT != '' || env.ABFS_CONTAINER != '' || env.ABFS_ACCESSKEY != '' || env.AWS_ACCESS_KEY_ID != '' || env.AWS_SECRET_ACCESS_KEY != '' || env.GCP_CREDENTIALS_KEY != '')
        run: |
          $MAVEN test ${MAVEN_TEST} ${{ format('-P {0}', matrix.profile) }} -pl :trino-delta-lake \
            -Dhive.hadoop2.azure-abfs-container="${ABFS_CONTAINER}" \
            -Dhive.hadoop2.azure-abfs-account="${ABFS_ACCOUNT}" \
            -Dhive.hadoop2.azure-abfs-access-key="${ABFS_ACCESSKEY}" \
            -Dtesting.gcp-storage-bucket="trino-ci-test" \
            -Dtesting.gcp-credentials-key="${GCP_CREDENTIALS_KEY}"
      - name: Memsql Tests
        env:
          MEMSQL_LICENSE: ${{ secrets.MEMSQL_LICENSE }}
        if: matrix.modules == 'plugin/trino-singlestore' && env.MEMSQL_LICENSE != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-singlestore -Dmemsql.license=${MEMSQL_LICENSE}
      - name: Cloud BigQuery Tests
        env:
          BIGQUERY_CREDENTIALS_KEY: ${{ secrets.BIGQUERY_CREDENTIALS_KEY }}
        if: matrix.modules == 'plugin/trino-bigquery' && !contains(matrix.profile, 'cloud-tests-arrow') && env.BIGQUERY_CREDENTIALS_KEY != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-bigquery -Pcloud-tests \
            -Dbigquery.credentials-key="${BIGQUERY_CREDENTIALS_KEY}" \
            -Dtesting.gcp-storage-bucket="trino-ci-test" \
            -Dtesting.alternate-bq-project-id=bigquery-cicd-alternate
      - name: Cloud BigQuery Arrow Serialization Tests
        env:
          BIGQUERY_CREDENTIALS_KEY: ${{ secrets.BIGQUERY_CREDENTIALS_KEY }}
        if: matrix.modules == 'plugin/trino-bigquery' && contains(matrix.profile, 'cloud-tests-arrow') && env.BIGQUERY_CREDENTIALS_KEY != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-bigquery -Pcloud-tests-arrow \
            -Dbigquery.credentials-key="${BIGQUERY_CREDENTIALS_KEY}" \
            -Dtesting.gcp-storage-bucket="trino-ci-test"
      - name: Cloud BigQuery Case Insensitive Mapping Tests
        env:
          BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY: ${{ secrets.BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY }}
        if: matrix.modules == 'plugin/trino-bigquery' && !contains(matrix.profile, 'cloud-tests-arrow') && env.BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY != ''
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-bigquery -Pcloud-tests-case-insensitive-mapping -Dbigquery.credentials-key="${BIGQUERY_CASE_INSENSITIVE_CREDENTIALS_KEY}"
      - name: Iceberg Cloud Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TRINO_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TRINO_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          S3_BUCKET: trino-ci-test
          GCP_CREDENTIALS_KEY: ${{ secrets.GCP_CREDENTIALS_KEY }}
          ABFS_CONTAINER: ${{ secrets.AZURE_ABFS_CONTAINER }}
          ABFS_ACCOUNT: ${{ secrets.AZURE_ABFS_ACCOUNT }}
          ABFS_ACCESS_KEY: ${{ secrets.AZURE_ABFS_ACCESSKEY }}
        if: >-
          contains(matrix.modules, 'trino-iceberg') && contains(matrix.profile, 'cloud-tests') &&
          (env.AWS_ACCESS_KEY_ID != '' || env.AWS_SECRET_ACCESS_KEY != '' || env.GCP_CREDENTIALS_KEY != '')
        run: |
          $MAVEN test ${MAVEN_TEST} -pl :trino-iceberg ${{ format('-P {0}', matrix.profile) }} \
            -Ds3.bucket=${S3_BUCKET} \
            -Dtesting.gcp-storage-bucket="trino-ci-test-us-east" \
            -Dtesting.gcp-credentials-key="${GCP_CREDENTIALS_KEY}" \
            -Dhive.hadoop2.azure-abfs-container="${ABFS_CONTAINER}" \
            -Dhive.hadoop2.azure-abfs-account="${ABFS_ACCOUNT}" \
            -Dhive.hadoop2.azure-abfs-access-key="${ABFS_ACCESS_KEY}"
      - name: Cloud Redshift Tests ${{ matrix.profile }}
        env:
          AWS_REGION: ${{ vars.REDSHIFT_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.REDSHIFT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.REDSHIFT_AWS_SECRET_ACCESS_KEY }}
          REDSHIFT_SUBNET_GROUP_NAME: ${{ vars.REDSHIFT_SUBNET_GROUP_NAME }}
          REDSHIFT_IAM_ROLES: ${{ vars.REDSHIFT_IAM_ROLES }}
          REDSHIFT_VPC_SECURITY_GROUP_IDS: ${{ vars.REDSHIFT_VPC_SECURITY_GROUP_IDS }}
          REDSHIFT_S3_TPCH_TABLES_ROOT: ${{ vars.REDSHIFT_S3_TPCH_TABLES_ROOT }}
        if: >-
          contains(matrix.modules, 'trino-redshift') &&
          (contains(matrix.profile, 'cloud-tests') || contains(matrix.profile, 'fte-tests')) &&
          (env.AWS_ACCESS_KEY_ID != '' || env.REDSHIFT_SUBNET_GROUP_NAME != '')
        run: |
          source .github/bin/redshift/setup-aws-redshift.sh

          $MAVEN test ${MAVEN_TEST} -pl ${{ matrix.modules }} ${{ format('-P {0}', matrix.profile) }} \
            -Dtest.redshift.jdbc.user="${REDSHIFT_USER}" \
            -Dtest.redshift.jdbc.password="${REDSHIFT_PASSWORD}" \
            -Dtest.redshift.jdbc.endpoint="${REDSHIFT_ENDPOINT}:${REDSHIFT_PORT}/" \
            -Dtest.redshift.s3.tpch.tables.root="${REDSHIFT_S3_TPCH_TABLES_ROOT}" \
            -Dtest.redshift.iam.role="${REDSHIFT_IAM_ROLES}" \
            -Dtest.redshift.aws.region="${AWS_REGION}" \
            -Dtest.redshift.aws.access-key="${AWS_ACCESS_KEY_ID}" \
            -Dtest.redshift.aws.secret-key="${AWS_SECRET_ACCESS_KEY}"
      - name: Cleanup ephemeral Redshift Cluster
        env:
          AWS_REGION: ${{ vars.REDSHIFT_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.REDSHIFT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.REDSHIFT_AWS_SECRET_ACCESS_KEY }}
        # Cancelled workflows may have left the ephemeral cluster running
        if: always()
        run: .github/bin/redshift/delete-aws-redshift.sh
      - name: Sanitize artifact name
        if: always()
        run: |
          # Generate a valid artifact name and make it available to next steps as
          # an environment variable ARTIFACT_NAME
          # ", :, <, >, |, *, ?, \, / are not allowed in artifact names, replace it with an underscore
          name=$(echo -n "${{ matrix.modules }}, ${{ matrix.profile }}, ${{ matrix.jdk }}" | sed -e 's/[":<>|\*\?\\\/]/_/g')
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
      - name: Upload test results
        uses: actions/upload-artifact@v3
        # Upload all test reports only on failure, because the artifacts are large
        if: failure()
        with:
          name: result ${{ env.ARTIFACT_NAME }}
          path: |
            **/target/surefire-reports
            **/target/checkstyle-*
      - name: Upload test report
        uses: actions/upload-artifact@v3
        # Always upload the test report for the annotate.yml workflow,
        # but only the single XML file to keep the artifact small
        if: always()
        with:
          # Name prefix is checked in the `Annotate checks` workflow
          name: test report ${{ github.job }} (${{ env.ARTIFACT_NAME }})
          path: |
            **/surefire-reports/TEST-*.xml
          retention-days: ${{ env.TEST_REPORT_RETENTION_DAYS }}
      - name: Upload heap dump
        uses: actions/upload-artifact@v3
        if: failure() && env.SECRETS_PRESENT == '' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
        with:
          name: heap dump ${{ github.job }} (${{ env.ARTIFACT_NAME }})
          if-no-files-found: 'ignore'
          path: |
            **/*.hprof
          retention-days: ${{ env.HEAP_DUMP_RETENTION_DAYS }}
      - name: Update PR check
        uses: ./.github/actions/update-check
        if: >-
          failure() &&
          github.event_name == 'repository_dispatch' &&
          github.event.client_payload.slash_command.args.named.sha != '' &&
          github.event.client_payload.pull_request.head.sha == github.event.client_payload.slash_command.args.named.sha
        with:
          pull_request_number: ${{ github.event.client_payload.pull_request.number }}
          check_name: ${{ github.job }} with secrets
          conclusion: ${{ job.status }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean local Maven repo
        # Avoid creating a cache entry because this job doesn't download all dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: rm -rf ~/.m2/repository
