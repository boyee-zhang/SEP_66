/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.connector;

import io.airlift.slice.Slice;
import io.trino.instrumentation.events.ConnectorMetadataEvent;
import io.trino.spi.expression.ConnectorExpression;
import io.trino.spi.function.AggregationFunctionMetadata;
import io.trino.spi.function.BoundSignature;
import io.trino.spi.function.FunctionDependencyDeclaration;
import io.trino.spi.function.FunctionId;
import io.trino.spi.function.FunctionMetadata;
import io.trino.spi.function.SchemaFunctionName;
import io.trino.spi.predicate.TupleDomain;
import io.trino.spi.ptf.ConnectorTableFunctionHandle;
import io.trino.spi.security.GrantInfo;
import io.trino.spi.security.Privilege;
import io.trino.spi.security.RoleGrant;
import io.trino.spi.security.TrinoPrincipal;
import io.trino.spi.statistics.ComputedStatistics;
import io.trino.spi.statistics.TableStatistics;
import io.trino.spi.statistics.TableStatisticsMetadata;
import io.trino.spi.type.Type;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalLong;
import java.util.Set;
import java.util.concurrent.CompletableFuture;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedConnectorMetadata
        implements ConnectorMetadata
{
    private final String catalogName;

    private final String delegateClassName;

    private final ConnectorMetadata delegate;

    private InstrumentedConnectorMetadata(String catalogName, ConnectorMetadata delegate)
    {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static ConnectorMetadata instrument(ConnectorMetadata delegate)
    {
        if (delegate instanceof InstrumentedConnectorMetadata instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorMetadata("unknown", delegate);
    }

    public static ConnectorMetadata instrument(String catalogName, ConnectorMetadata delegate)
    {
        if (delegate instanceof InstrumentedConnectorMetadata instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorMetadata(catalogName, delegate);
    }

    @Override
    public List<SchemaTableName> listViews(ConnectorSession session, Optional<String> schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listViews";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listViews(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorViewDefinition> getView(ConnectorSession session,
                                                     SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getView(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Set<String> listRoles(ConnectorSession session)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listRoles(session);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<JoinApplicationResult<ConnectorTableHandle>> applyJoin(ConnectorSession session,
                                                                           JoinType joinType, ConnectorTableHandle left, ConnectorTableHandle right,
                                                                           List<JoinCondition> joinConditions, Map<String, ColumnHandle> leftAssignments,
                                                                           Map<String, ColumnHandle> rightAssignments, JoinStatistics statistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyJoin";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyJoin(session, joinType, left, right, joinConditions, leftAssignments, rightAssignments, statistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<JoinApplicationResult<ConnectorTableHandle>> applyJoin(ConnectorSession session,
                                                                           JoinType joinType, ConnectorTableHandle left, ConnectorTableHandle right,
                                                                           ConnectorExpression joinCondition, Map<String, ColumnHandle> leftAssignments,
                                                                           Map<String, ColumnHandle> rightAssignments, JoinStatistics statistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyJoin";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyJoin(session, joinType, left, right, joinCondition, leftAssignments, rightAssignments, statistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<Object> getInfo(ConnectorTableHandle table)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getInfo";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getInfo(table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<SchemaTableName> listTables(ConnectorSession session, Optional<String> schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listTables(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropSchema(ConnectorSession session, String schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropSchema(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropTable(ConnectorSession session, ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropTable(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void addColumn(ConnectorSession session, ConnectorTableHandle tableHandle,
                          ColumnMetadata column)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "addColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.addColumn(session, tableHandle, column);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropColumn(ConnectorSession session, ConnectorTableHandle tableHandle,
                           ColumnHandle column)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropColumn(session, tableHandle, column);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropField(ConnectorSession session, ConnectorTableHandle tableHandle,
                          ColumnHandle column, List<String> fieldPath)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropField";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropField(session, tableHandle, column, fieldPath);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void beginQuery(ConnectorSession session)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginQuery";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.beginQuery(session);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorMergeTableHandle beginMerge(ConnectorSession session,
                                                ConnectorTableHandle tableHandle, RetryMode retryMode)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginMerge";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginMerge(session, tableHandle, retryMode);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void createView(ConnectorSession session, SchemaTableName viewName,
                           ConnectorViewDefinition definition, boolean replace)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "createView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.createView(session, viewName, definition, replace);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void renameView(ConnectorSession session, SchemaTableName source,
                           SchemaTableName target)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "renameView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.renameView(session, source, target);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropView(ConnectorSession session, SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropView(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session,
                                                                  Optional<String> schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getViews";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getViews(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public boolean roleExists(ConnectorSession session, String role)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "roleExists";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.roleExists(session, role);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void createRole(ConnectorSession session, String role,
                           Optional<TrinoPrincipal> grantor)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "createRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.createRole(session, role, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropRole(ConnectorSession session, String role)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropRole(session, role);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void grantRoles(ConnectorSession connectorSession, Set<String> roles,
                           Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "grantRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.grantRoles(connectorSession, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = connectorSession.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<LimitApplicationResult<ConnectorTableHandle>> applyLimit(
            ConnectorSession session, ConnectorTableHandle handle, long limit)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyLimit";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyLimit(session, handle, limit);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<TopNApplicationResult<ConnectorTableHandle>> applyTopN(ConnectorSession session,
                                                                           ConnectorTableHandle handle, long topNCount, List<SortItem> sortItems,
                                                                           Map<String, ColumnHandle> assignments)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyTopN";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyTopN(session, handle, topNCount, sortItems, assignments);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public List<String> listSchemaNames(ConnectorSession session)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listSchemaNames";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listSchemaNames(session);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableHandle getTableHandle(ConnectorSession session,
                                               SchemaTableName tableName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableHandle";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableHandle(session, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableHandle getTableHandle(ConnectorSession session, SchemaTableName tableName,
                                               Optional<ConnectorTableVersion> startVersion,
                                               Optional<ConnectorTableVersion> endVersion)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableHandle";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableHandle(session, tableName, startVersion, endVersion);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableSchema getTableSchema(ConnectorSession session,
                                               ConnectorTableHandle table)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableSchema(session, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableMetadata getTableMetadata(ConnectorSession session,
                                                   ConnectorTableHandle table)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableMetadata(session, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSession session,
                                                                       SchemaTablePrefix prefix)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listTableColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listTableColumns(session, prefix);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableProperties getTableProperties(ConnectorSession session,
                                                       ConnectorTableHandle table)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableProperties(session, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public List<SchemaTableName> listMaterializedViews(ConnectorSession session,
                                                       Optional<String> schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listMaterializedViews";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listMaterializedViews(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorMaterializedViewDefinition> getMaterializedView(
            ConnectorSession session, SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getMaterializedView(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Map<String, ColumnHandle> getColumnHandles(ConnectorSession session,
                                                      ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnHandles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnHandles(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public boolean schemaExists(ConnectorSession session, String schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "schemaExists";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.schemaExists(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorTableExecuteHandle> getTableHandleForExecute(ConnectorSession session,
                                                                          ConnectorTableHandle tableHandle, String procedureName,
                                                                          Map<String, Object> executeProperties, RetryMode retryMode)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableHandleForExecute";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableHandleForExecute(session, tableHandle, procedureName, executeProperties, retryMode);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorTableLayout> getLayoutForTableExecute(ConnectorSession session,
                                                                   ConnectorTableExecuteHandle tableExecuteHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getLayoutForTableExecute";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getLayoutForTableExecute(session, tableExecuteHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public BeginTableExecuteResult<ConnectorTableExecuteHandle, ConnectorTableHandle> beginTableExecute(
            ConnectorSession session, ConnectorTableExecuteHandle tableExecuteHandle,
            ConnectorTableHandle updatedSourceTableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginTableExecute";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginTableExecute(session, tableExecuteHandle, updatedSourceTableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void finishTableExecute(ConnectorSession session,
                                   ConnectorTableExecuteHandle tableExecuteHandle, Collection<Slice> fragments,
                                   List<Object> tableExecuteState)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishTableExecute";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.finishTableExecute(session, tableExecuteHandle, fragments, tableExecuteState);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void executeTableExecute(ConnectorSession session,
                                    ConnectorTableExecuteHandle tableExecuteHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "executeTableExecute";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.executeTableExecute(session, tableExecuteHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<SystemTable> getSystemTable(ConnectorSession session,
                                                SchemaTableName tableName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSystemTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSystemTable(session, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableHandle makeCompatiblePartitioning(ConnectorSession session,
                                                           ConnectorTableHandle tableHandle, ConnectorPartitioningHandle partitioningHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "makeCompatiblePartitioning";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.makeCompatiblePartitioning(session, tableHandle, partitioningHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public SchemaTableName getSchemaTableName(ConnectorSession session,
                                              ConnectorTableHandle table)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSchemaTableName";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSchemaTableName(session, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ColumnMetadata getColumnMetadata(ConnectorSession session,
                                            ConnectorTableHandle tableHandle, ColumnHandle columnHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnMetadata(session, tableHandle, columnHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Iterator<TableColumnsMetadata> streamTableColumns(ConnectorSession session,
                                                             SchemaTablePrefix prefix)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "streamTableColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.streamTableColumns(session, prefix);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public TableStatistics getTableStatistics(ConnectorSession session,
                                              ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableStatistics";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableStatistics(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void createSchema(ConnectorSession session, String schemaName,
                             Map<String, Object> properties, TrinoPrincipal owner)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "createSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.createSchema(session, schemaName, properties, owner);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void renameSchema(ConnectorSession session, String source, String target)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "renameSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.renameSchema(session, source, target);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setSchemaAuthorization(ConnectorSession session, String schemaName,
                                       TrinoPrincipal principal)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setSchemaAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setSchemaAuthorization(session, schemaName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void createTable(ConnectorSession session, ConnectorTableMetadata tableMetadata,
                            boolean ignoreExisting)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "createTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.createTable(session, tableMetadata, ignoreExisting);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void truncateTable(ConnectorSession session, ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "truncateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.truncateTable(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void renameTable(ConnectorSession session, ConnectorTableHandle tableHandle,
                            SchemaTableName newTableName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "renameTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.renameTable(session, tableHandle, newTableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setTableProperties(ConnectorSession session, ConnectorTableHandle tableHandle,
                                   Map<String, Optional<Object>> properties)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setTableProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setTableProperties(session, tableHandle, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setTableComment(ConnectorSession session, ConnectorTableHandle tableHandle,
                                Optional<String> comment)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setTableComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setTableComment(session, tableHandle, comment);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setViewComment(ConnectorSession session, SchemaTableName viewName,
                               Optional<String> comment)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setViewComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setViewComment(session, viewName, comment);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setViewColumnComment(ConnectorSession session, SchemaTableName viewName,
                                     String columnName, Optional<String> comment)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setViewColumnComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setViewColumnComment(session, viewName, columnName, comment);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setColumnComment(ConnectorSession session, ConnectorTableHandle tableHandle,
                                 ColumnHandle column, Optional<String> comment)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setColumnComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setColumnComment(session, tableHandle, column, comment);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setColumnType(ConnectorSession session, ConnectorTableHandle tableHandle,
                              ColumnHandle column, Type type)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setColumnType";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setColumnType(session, tableHandle, column, type);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setTableAuthorization(ConnectorSession session, SchemaTableName tableName,
                                      TrinoPrincipal principal)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setTableAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setTableAuthorization(session, tableName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void renameColumn(ConnectorSession session, ConnectorTableHandle tableHandle,
                             ColumnHandle source, String target)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "renameColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.renameColumn(session, tableHandle, source, target);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorTableLayout> getNewTableLayout(ConnectorSession session,
                                                            ConnectorTableMetadata tableMetadata)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getNewTableLayout";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getNewTableLayout(session, tableMetadata);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorTableLayout> getInsertLayout(ConnectorSession session,
                                                          ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getInsertLayout";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getInsertLayout(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTableHandle beginStatisticsCollection(ConnectorSession session,
                                                          ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginStatisticsCollection";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginStatisticsCollection(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void finishStatisticsCollection(ConnectorSession session,
                                           ConnectorTableHandle tableHandle, Collection<ComputedStatistics> computedStatistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishStatisticsCollection";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.finishStatisticsCollection(session, tableHandle, computedStatistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorOutputTableHandle beginCreateTable(ConnectorSession session,
                                                       ConnectorTableMetadata tableMetadata, Optional<ConnectorTableLayout> layout,
                                                       RetryMode retryMode)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginCreateTable(session, tableMetadata, layout, retryMode);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorOutputMetadata> finishCreateTable(ConnectorSession session,
                                                               ConnectorOutputTableHandle tableHandle, Collection<Slice> fragments,
                                                               Collection<ComputedStatistics> computedStatistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.finishCreateTable(session, tableHandle, fragments, computedStatistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void cleanupQuery(ConnectorSession session)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "cleanupQuery";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.cleanupQuery(session);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorInsertTableHandle beginInsert(ConnectorSession session,
                                                  ConnectorTableHandle tableHandle, List<ColumnHandle> columns, RetryMode retryMode)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginInsert";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginInsert(session, tableHandle, columns, retryMode);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorOutputMetadata> finishInsert(ConnectorSession session,
                                                          ConnectorInsertTableHandle insertHandle, Collection<Slice> fragments,
                                                          Collection<ComputedStatistics> computedStatistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishInsert";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.finishInsert(session, insertHandle, fragments, computedStatistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public CompletableFuture<?> refreshMaterializedView(ConnectorSession session,
                                                        SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "refreshMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.refreshMaterializedView(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public RowChangeParadigm getRowChangeParadigm(ConnectorSession session,
                                                  ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getRowChangeParadigm";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getRowChangeParadigm(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ColumnHandle getMergeRowIdColumnHandle(ConnectorSession session,
                                                  ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMergeRowIdColumnHandle";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getMergeRowIdColumnHandle(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorPartitioningHandle> getUpdateLayout(ConnectorSession session,
                                                                 ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getUpdateLayout";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getUpdateLayout(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void finishMerge(ConnectorSession session, ConnectorMergeTableHandle tableHandle,
                            Collection<Slice> fragments, Collection<ComputedStatistics> computedStatistics)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishMerge";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.finishMerge(session, tableHandle, fragments, computedStatistics);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setViewAuthorization(ConnectorSession session, SchemaTableName viewName,
                                     TrinoPrincipal principal)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setViewAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setViewAuthorization(session, viewName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Map<String, Object> getSchemaProperties(ConnectorSession session,
                                                   CatalogSchemaName schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSchemaProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSchemaProperties(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<TrinoPrincipal> getSchemaOwner(ConnectorSession session,
                                                   CatalogSchemaName schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSchemaOwner";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSchemaOwner(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session,
                                                      ConnectorTableHandle handle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyDelete";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyDelete(session, handle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle handle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "executeDelete";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.executeDelete(session, handle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorResolvedIndex> resolveIndex(ConnectorSession session,
                                                         ConnectorTableHandle tableHandle, Set<ColumnHandle> indexableColumns,
                                                         Set<ColumnHandle> outputColumns, TupleDomain<ColumnHandle> tupleDomain)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "resolveIndex";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.resolveIndex(session, tableHandle, indexableColumns, outputColumns, tupleDomain);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Collection<FunctionMetadata> listFunctions(ConnectorSession session, String schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listFunctions";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listFunctions(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Collection<FunctionMetadata> getFunctions(ConnectorSession session,
                                                     SchemaFunctionName name)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getFunctions";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getFunctions(session, name);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public FunctionMetadata getFunctionMetadata(ConnectorSession session, FunctionId functionId)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getFunctionMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getFunctionMetadata(session, functionId);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public FunctionDependencyDeclaration getFunctionDependencies(ConnectorSession session,
                                                                 FunctionId functionId, BoundSignature boundSignature)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getFunctionDependencies";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getFunctionDependencies(session, functionId, boundSignature);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Set<RoleGrant> listRoleGrants(ConnectorSession session, TrinoPrincipal principal)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listRoleGrants";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listRoleGrants(session, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void revokeRoles(ConnectorSession connectorSession, Set<String> roles,
                            Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "revokeRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.revokeRoles(connectorSession, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = connectorSession.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Set<RoleGrant> listApplicableRoles(ConnectorSession session, TrinoPrincipal principal)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listApplicableRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listApplicableRoles(session, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Set<String> listEnabledRoles(ConnectorSession session)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listEnabledRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listEnabledRoles(session);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void grantSchemaPrivileges(ConnectorSession session, String schemaName,
                                      Set<Privilege> privileges, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "grantSchemaPrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.grantSchemaPrivileges(session, schemaName, privileges, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void denySchemaPrivileges(ConnectorSession session, String schemaName,
                                     Set<Privilege> privileges, TrinoPrincipal grantee)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "denySchemaPrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.denySchemaPrivileges(session, schemaName, privileges, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void revokeSchemaPrivileges(ConnectorSession session, String schemaName,
                                       Set<Privilege> privileges, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "revokeSchemaPrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.revokeSchemaPrivileges(session, schemaName, privileges, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void grantTablePrivileges(ConnectorSession session, SchemaTableName tableName,
                                     Set<Privilege> privileges, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "grantTablePrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.grantTablePrivileges(session, tableName, privileges, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void denyTablePrivileges(ConnectorSession session, SchemaTableName tableName,
                                    Set<Privilege> privileges, TrinoPrincipal grantee)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "denyTablePrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.denyTablePrivileges(session, tableName, privileges, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void revokeTablePrivileges(ConnectorSession session, SchemaTableName tableName,
                                      Set<Privilege> privileges, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "revokeTablePrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.revokeTablePrivileges(session, tableName, privileges, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public List<GrantInfo> listTablePrivileges(ConnectorSession session, SchemaTablePrefix prefix)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "listTablePrivileges";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.listTablePrivileges(session, prefix);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(
            ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyFilter";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyFilter(session, handle, constraint);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(
            ConnectorSession session, ConnectorTableHandle handle,
            List<ConnectorExpression> projections, Map<String, ColumnHandle> assignments)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyProjection";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyProjection(session, handle, projections, assignments);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<SampleApplicationResult<ConnectorTableHandle>> applySample(
            ConnectorSession session, ConnectorTableHandle handle, SampleType sampleType,
            double sampleRatio)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applySample";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applySample(session, handle, sampleType, sampleRatio);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(
            ConnectorSession session, ConnectorTableHandle handle,
            List<AggregateFunction> aggregates, Map<String, ColumnHandle> assignments,
            List<List<ColumnHandle>> groupingSets)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyAggregation";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyAggregation(session, handle, aggregates, assignments, groupingSets);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<TableFunctionApplicationResult<ConnectorTableHandle>> applyTableFunction(
            ConnectorSession session, ConnectorTableFunctionHandle handle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyTableFunction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyTableFunction(session, handle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void validateScan(ConnectorSession session, ConnectorTableHandle handle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "validateScan";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.validateScan(session, handle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void createMaterializedView(ConnectorSession session, SchemaTableName viewName,
                                       ConnectorMaterializedViewDefinition definition, boolean replace,
                                       boolean ignoreExisting)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "createMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.createMaterializedView(session, viewName, definition, replace, ignoreExisting);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void dropMaterializedView(ConnectorSession session, SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "dropMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.dropMaterializedView(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Map<SchemaTableName, ConnectorMaterializedViewDefinition> getMaterializedViews(
            ConnectorSession session, Optional<String> schemaName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMaterializedViews";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getMaterializedViews(session, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void renameMaterializedView(ConnectorSession session, SchemaTableName source,
                                       SchemaTableName target)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "renameMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.renameMaterializedView(session, source, target);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<TableScanRedirectApplicationResult> applyTableScanRedirect(
            ConnectorSession session, ConnectorTableHandle tableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "applyTableScanRedirect";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.applyTableScanRedirect(session, tableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<CatalogSchemaTableName> redirectTable(ConnectorSession session,
                                                          SchemaTableName tableName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "redirectTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.redirectTable(session, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorPartitioningHandle> getCommonPartitioningHandle(
            ConnectorSession session, ConnectorPartitioningHandle left,
            ConnectorPartitioningHandle right)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getCommonPartitioningHandle";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getCommonPartitioningHandle(session, left, right);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(ConnectorSession session,
                                                                           ConnectorTableMetadata tableMetadata)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getStatisticsCollectionMetadataForWrite";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getStatisticsCollectionMetadataForWrite(session, tableMetadata);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorAnalyzeMetadata getStatisticsCollectionMetadata(ConnectorSession session,
                                                                    ConnectorTableHandle tableHandle, Map<String, Object> analyzeProperties)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getStatisticsCollectionMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getStatisticsCollectionMetadata(session, tableHandle, analyzeProperties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public boolean supportsMissingColumnsOnInsert()
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "supportsMissingColumnsOnInsert";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.supportsMissingColumnsOnInsert();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public boolean delegateMaterializedViewRefreshToConnector(ConnectorSession session,
                                                              SchemaTableName viewName)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "delegateMaterializedViewRefreshToConnector";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.delegateMaterializedViewRefreshToConnector(session, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorInsertTableHandle beginRefreshMaterializedView(ConnectorSession session,
                                                                   ConnectorTableHandle tableHandle, List<ConnectorTableHandle> sourceTableHandles,
                                                                   RetryMode retryMode)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginRefreshMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginRefreshMaterializedView(session, tableHandle, sourceTableHandles, retryMode);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ConnectorOutputMetadata> finishRefreshMaterializedView(ConnectorSession session,
                                                                           ConnectorTableHandle tableHandle, ConnectorInsertTableHandle insertHandle,
                                                                           Collection<Slice> fragments, Collection<ComputedStatistics> computedStatistics,
                                                                           List<ConnectorTableHandle> sourceTableHandles)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finishRefreshMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.finishRefreshMaterializedView(session, tableHandle, insertHandle, fragments, computedStatistics, sourceTableHandles);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public AggregationFunctionMetadata getAggregationFunctionMetadata(ConnectorSession session,
                                                                      FunctionId functionId)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getAggregationFunctionMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getAggregationFunctionMetadata(session, functionId);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession session,
                                                                  SchemaTableName name)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMaterializedViewFreshness";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getMaterializedViewFreshness(session, name);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public void setMaterializedViewProperties(ConnectorSession session, SchemaTableName viewName,
                                              Map<String, Optional<Object>> properties)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "setMaterializedViewProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.setMaterializedViewProperties(session, viewName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public boolean supportsReportingWrittenBytes(ConnectorSession session,
                                                 SchemaTableName schemaTableName, Map<String, Object> tableProperties)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "supportsReportingWrittenBytes";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.supportsReportingWrittenBytes(session, schemaTableName, tableProperties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public boolean supportsReportingWrittenBytes(ConnectorSession session,
                                                 ConnectorTableHandle connectorTableHandle)
    {
        final ConnectorMetadataEvent event = new ConnectorMetadataEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "supportsReportingWrittenBytes";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.supportsReportingWrittenBytes(session, connectorTableHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }
}
