/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.connector;

import io.trino.instrumentation.events.ConnectorRecordSetProviderEvent;

import java.util.List;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedConnectorRecordSetProvider
        implements ConnectorRecordSetProvider
{
    private final String catalogName;

    private final String delegateClassName;

    private final ConnectorRecordSetProvider delegate;

    private InstrumentedConnectorRecordSetProvider(String catalogName,
                                                   ConnectorRecordSetProvider delegate)
    {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static ConnectorRecordSetProvider instrument(ConnectorRecordSetProvider delegate)
    {
        if (delegate instanceof InstrumentedConnectorRecordSetProvider instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorRecordSetProvider("unknown", delegate);
    }

    public static ConnectorRecordSetProvider instrument(String catalogName,
                                                        ConnectorRecordSetProvider delegate)
    {
        if (delegate instanceof InstrumentedConnectorRecordSetProvider instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorRecordSetProvider(catalogName, delegate);
    }

    @Override
    public RecordSet getRecordSet(ConnectorTransactionHandle transaction, ConnectorSession session,
                                  ConnectorSplit split, ConnectorTableHandle table,
                                  List<? extends ColumnHandle> columns)
    {
        final ConnectorRecordSetProviderEvent event = new ConnectorRecordSetProviderEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getRecordSet";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedRecordSet.instrument(catalogName, delegate.getRecordSet(transaction, session, split, table, columns));
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }
}
