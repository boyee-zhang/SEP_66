/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.connector;

import io.trino.instrumentation.events.ConnectorAccessControlEvent;
import io.trino.spi.function.FunctionKind;
import io.trino.spi.security.Privilege;
import io.trino.spi.security.TrinoPrincipal;
import io.trino.spi.security.ViewExpression;
import io.trino.spi.type.Type;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedConnectorAccessControl
        implements ConnectorAccessControl
{
    private final String catalogName;

    private final String delegateClassName;

    private final ConnectorAccessControl delegate;

    private InstrumentedConnectorAccessControl(String catalogName,
                                               ConnectorAccessControl delegate)
    {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static ConnectorAccessControl instrument(ConnectorAccessControl delegate)
    {
        if (delegate instanceof InstrumentedConnectorAccessControl instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorAccessControl("unknown", delegate);
    }

    public static ConnectorAccessControl instrument(String catalogName,
                                                    ConnectorAccessControl delegate)
    {
        if (delegate instanceof InstrumentedConnectorAccessControl instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorAccessControl(catalogName, delegate);
    }

    @Override
    public List<ViewExpression> getColumnMasks(ConnectorSecurityContext context,
                                               SchemaTableName tableName, String columnName, Type type)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnMasks";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnMasks(context, tableName, columnName, type);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateSchema(ConnectorSecurityContext context, String schemaName,
                                     Map<String, Object> properties)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateSchema(context, schemaName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropSchema(ConnectorSecurityContext context, String schemaName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropSchema(context, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameSchema(ConnectorSecurityContext context, String schemaName,
                                     String newSchemaName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameSchema(context, schemaName, newSchemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowSchemas(ConnectorSecurityContext context)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowSchemas";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowSchemas(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterSchemas(ConnectorSecurityContext context, Set<String> schemaNames)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterSchemas";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterSchemas(context, schemaNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCreateSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCreateSchema(context, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCreateTable(ConnectorSecurityContext context,
                                        SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCreateTable(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateTable(ConnectorSecurityContext context, SchemaTableName tableName,
                                    Map<String, Object> properties)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateTable(context, tableName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropTable(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropTable(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameTable(ConnectorSecurityContext context, SchemaTableName tableName,
                                    SchemaTableName newTableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameTable(context, tableName, newTableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableProperties(ConnectorSecurityContext context,
                                           SchemaTableName tableName, Map<String, Optional<Object>> properties)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableProperties(context, tableName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableComment(ConnectorSecurityContext context,
                                        SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableComment(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetViewComment(ConnectorSecurityContext context, SchemaTableName viewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetViewComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetViewComment(context, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetColumnComment(ConnectorSecurityContext context,
                                         SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetColumnComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetColumnComment(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowTables(ConnectorSecurityContext context, String schemaName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowTables(context, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public Set<SchemaTableName> filterTables(ConnectorSecurityContext context,
                                             Set<SchemaTableName> tableNames)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterTables(context, tableNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowColumns(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName,
                                     Set<String> columns)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterColumns(context, tableName, columns);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanAddColumn(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanAddColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanAddColumn(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanAlterColumn(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanAlterColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanAlterColumn(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropColumn(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropColumn(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameColumn(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSelectFromColumns(ConnectorSecurityContext context,
                                          SchemaTableName tableName, Set<String> columnNames)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSelectFromColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSelectFromColumns(context, tableName, columnNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanInsertIntoTable(ConnectorSecurityContext context,
                                        SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanInsertIntoTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanInsertIntoTable(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDeleteFromTable(ConnectorSecurityContext context,
                                        SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDeleteFromTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDeleteFromTable(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanTruncateTable(ConnectorSecurityContext context, SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanTruncateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanTruncateTable(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanUpdateTableColumns(ConnectorSecurityContext context,
                                           SchemaTableName tableName, Set<String> updatedColumns)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanUpdateTableColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanUpdateTableColumns(context, tableName, updatedColumns);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateView(ConnectorSecurityContext context, SchemaTableName viewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateView(context, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameView(ConnectorSecurityContext context, SchemaTableName viewName,
                                   SchemaTableName newViewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameView(context, viewName, newViewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropView(ConnectorSecurityContext context, SchemaTableName viewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropView(context, viewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDenyTablePrivilege(ConnectorSecurityContext context, Privilege privilege,
                                           SchemaTableName tableName, TrinoPrincipal grantee)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDenyTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDenyTablePrivilege(context, privilege, tableName, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateRole(ConnectorSecurityContext context, String role,
                                   Optional<TrinoPrincipal> grantor)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateRole(context, role, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropRole(ConnectorSecurityContext context, String role)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropRole(context, role);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantRoles(ConnectorSecurityContext context, Set<String> roles,
                                   Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantRoles(context, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeRoles(ConnectorSecurityContext context, Set<String> roles,
                                    Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeRoles(context, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetRole(ConnectorSecurityContext context, String role)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetRole(context, role);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoles(ConnectorSecurityContext context)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoles(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCurrentRoles(ConnectorSecurityContext context)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCurrentRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCurrentRoles(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoleGrants(ConnectorSecurityContext context)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoleGrants";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoleGrants(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteProcedure(ConnectorSecurityContext context,
                                         SchemaRoutineName procedure)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteProcedure";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteProcedure(context, procedure);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteFunction(ConnectorSecurityContext context, FunctionKind functionKind,
                                        SchemaRoutineName function)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteFunction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteFunction(context, functionKind, function);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public List<ViewExpression> getRowFilters(ConnectorSecurityContext context,
                                              SchemaTableName tableName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getRowFilters";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getRowFilters(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public Optional<ViewExpression> getColumnMask(ConnectorSecurityContext context,
                                                  SchemaTableName tableName, String columnName, Type type)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnMask";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnMask(context, tableName, columnName, type);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetSchemaAuthorization(ConnectorSecurityContext context, String schemaName,
                                               TrinoPrincipal principal)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetSchemaAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetSchemaAuthorization(context, schemaName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableAuthorization(ConnectorSecurityContext context,
                                              SchemaTableName tableName, TrinoPrincipal principal)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableAuthorization(context, tableName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetViewAuthorization(ConnectorSecurityContext context,
                                             SchemaTableName viewName, TrinoPrincipal principal)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetViewAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetViewAuthorization(context, viewName, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateViewWithSelectFromColumns(ConnectorSecurityContext context,
                                                        SchemaTableName tableName, Set<String> columnNames)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateViewWithSelectFromColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateMaterializedView(ConnectorSecurityContext context,
                                               SchemaTableName materializedViewName, Map<String, Object> properties)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateMaterializedView(context, materializedViewName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRefreshMaterializedView(ConnectorSecurityContext context,
                                                SchemaTableName materializedViewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRefreshMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRefreshMaterializedView(context, materializedViewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetMaterializedViewProperties(ConnectorSecurityContext context,
                                                      SchemaTableName materializedViewName, Map<String, Optional<Object>> properties)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetMaterializedViewProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetMaterializedViewProperties(context, materializedViewName, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropMaterializedView(ConnectorSecurityContext context,
                                             SchemaTableName materializedViewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropMaterializedView(context, materializedViewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameMaterializedView(ConnectorSecurityContext context,
                                               SchemaTableName viewName, SchemaTableName newViewName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameMaterializedView(context, viewName, newViewName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantExecuteFunctionPrivilege(ConnectorSecurityContext context,
                                                      FunctionKind functionKind, SchemaRoutineName functionName, TrinoPrincipal grantee,
                                                      boolean grantOption)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantExecuteFunctionPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantExecuteFunctionPrivilege(context, functionKind, functionName, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetCatalogSessionProperty(ConnectorSecurityContext context,
                                                  String propertyName)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetCatalogSessionProperty";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetCatalogSessionProperty(context, propertyName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege,
                                             String schemaName, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantSchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantSchemaPrivilege(context, privilege, schemaName, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDenySchemaPrivilege(ConnectorSecurityContext context, Privilege privilege,
                                            String schemaName, TrinoPrincipal grantee)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDenySchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDenySchemaPrivilege(context, privilege, schemaName, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege,
                                              String schemaName, TrinoPrincipal revokee, boolean grantOption)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeSchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeSchemaPrivilege(context, privilege, schemaName, revokee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantTablePrivilege(ConnectorSecurityContext context, Privilege privilege,
                                            SchemaTableName tableName, TrinoPrincipal grantee, boolean grantOption)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantTablePrivilege(context, privilege, tableName, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeTablePrivilege(ConnectorSecurityContext context, Privilege privilege,
                                             SchemaTableName tableName, TrinoPrincipal revokee, boolean grantOption)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeTablePrivilege(context, privilege, tableName, revokee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoleAuthorizationDescriptors(ConnectorSecurityContext context)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoleAuthorizationDescriptors";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoleAuthorizationDescriptors(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteTableProcedure(ConnectorSecurityContext context,
                                              SchemaTableName tableName, String procedure)
    {
        final ConnectorAccessControlEvent event = new ConnectorAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteTableProcedure";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteTableProcedure(context, tableName, procedure);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = context.getQueryId().getId();
                event.commit();
            }
        }
    }
}
