/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.connector;

import io.trino.instrumentation.events.ConnectorEvent;
import io.trino.spi.eventlistener.EventListener;
import io.trino.spi.function.FunctionProvider;
import io.trino.spi.procedure.Procedure;
import io.trino.spi.ptf.ConnectorTableFunction;
import io.trino.spi.session.PropertyMetadata;
import io.trino.spi.transaction.IsolationLevel;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedConnector
        implements Connector
{
    private final String catalogName;

    private final String delegateClassName;

    private final Connector delegate;

    private InstrumentedConnector(String catalogName, Connector delegate)
    {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static Connector instrument(Connector delegate)
    {
        if (delegate instanceof InstrumentedConnector instrumented) {
            return instrumented;
        }
        return new InstrumentedConnector("unknown", delegate);
    }

    public static Connector instrument(String catalogName, Connector delegate)
    {
        if (delegate instanceof InstrumentedConnector instrumented) {
            return instrumented;
        }
        return new InstrumentedConnector(catalogName, delegate);
    }

    @Override
    public void shutdown()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "shutdown";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.shutdown();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public void commit(ConnectorTransactionHandle transactionHandle)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "commit";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.commit(transactionHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public void rollback(ConnectorTransactionHandle transactionHandle)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "rollback";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.rollback(transactionHandle);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorSplitManager getSplitManager()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSplitManager";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSplitManager();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorPageSourceProvider getPageSourceProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getPageSourceProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorPageSourceProvider.instrument(catalogName, delegate.getPageSourceProvider());
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorRecordSetProvider getRecordSetProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getRecordSetProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorRecordSetProvider.instrument(catalogName, delegate.getRecordSetProvider());
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorPageSinkProvider getPageSinkProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getPageSinkProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorPageSinkProvider.instrument(catalogName, delegate.getPageSinkProvider());
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorIndexProvider getIndexProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getIndexProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getIndexProvider();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Set<SystemTable> getSystemTables()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSystemTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSystemTables();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Optional<FunctionProvider> getFunctionProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getFunctionProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getFunctionProvider();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Set<Procedure> getProcedures()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getProcedures";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getProcedures();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Set<TableProcedureMetadata> getTableProcedures()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableProcedures";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableProcedures();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Set<ConnectorTableFunction> getTableFunctions()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableFunctions";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableFunctions();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getSessionProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSessionProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSessionProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getAnalyzeProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getAnalyzeProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getAnalyzeProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getColumnProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorAccessControl getAccessControl()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getAccessControl";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorAccessControl.instrument(catalogName, delegate.getAccessControl());
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Iterable<EventListener> getEventListeners()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getEventListeners";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getEventListeners();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public Set<ConnectorCapabilities> getCapabilities()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getCapabilities";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getCapabilities();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getTableProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getTableProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getTableProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getSchemaProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getSchemaProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getSchemaProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel,
                                                       boolean readOnly, boolean autoCommit)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginTransaction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginTransaction(isolationLevel, readOnly, autoCommit);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel,
                                                       boolean readOnly)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "beginTransaction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.beginTransaction(isolationLevel, readOnly);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorMetadata.instrument(catalogName, delegate.getMetadata(transactionHandle));
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public ConnectorMetadata getMetadata(ConnectorSession session,
                                         ConnectorTransactionHandle transactionHandle)
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMetadata";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return io.trino.spi.connector.InstrumentedConnectorMetadata.instrument(catalogName, delegate.getMetadata(session, transactionHandle));
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.queryId = session.getQueryId();
                event.commit();
            }
        }
    }

    @Override
    public ConnectorNodePartitioningProvider getNodePartitioningProvider()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getNodePartitioningProvider";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getNodePartitioningProvider();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<PropertyMetadata<?>> getMaterializedViewProperties()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getMaterializedViewProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getMaterializedViewProperties();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public boolean isSingleStatementWritesOnly()
    {
        final ConnectorEvent event = new ConnectorEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "isSingleStatementWritesOnly";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.isSingleStatementWritesOnly();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }
}
