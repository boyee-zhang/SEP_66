/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.connector;

import io.airlift.slice.Slice;
import io.trino.jfr.ConnectorMergeSinkEvent;
import io.trino.spi.Page;

import java.util.Collection;
import java.util.concurrent.CompletableFuture;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * "The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedConnectorMergeSink implements ConnectorMergeSink {
    private final String catalogName;

    private final String delegateClassName;

    private final ConnectorMergeSink delegate;

    private InstrumentedConnectorMergeSink(String catalogName, ConnectorMergeSink delegate) {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static InstrumentedConnectorMergeSink wrap(ConnectorMergeSink delegate) {
        if (delegate instanceof InstrumentedConnectorMergeSink instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorMergeSink("unknown", delegate);
    }

    public static InstrumentedConnectorMergeSink wrap(String catalogName,
                                                      ConnectorMergeSink delegate) {
        if (delegate instanceof InstrumentedConnectorMergeSink instrumented) {
            return instrumented;
        }
        return new InstrumentedConnectorMergeSink(catalogName, delegate);
    }

    @Override
    public CompletableFuture<Collection<Slice>> finish() {
        final ConnectorMergeSinkEvent event = new ConnectorMergeSinkEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "finish";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.finish();
        } finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public void abort() {
        final ConnectorMergeSinkEvent event = new ConnectorMergeSinkEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "abort";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.abort();
        } finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public void storeMergedRows(Page page) {
        final ConnectorMergeSinkEvent event = new ConnectorMergeSinkEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "storeMergedRows";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.storeMergedRows(page);
        } finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }
}
