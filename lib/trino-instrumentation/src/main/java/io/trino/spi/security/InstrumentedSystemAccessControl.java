/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.spi.security;

import io.trino.instrumentation.events.SystemAccessControlEvent;
import io.trino.spi.connector.CatalogSchemaName;
import io.trino.spi.connector.CatalogSchemaRoutineName;
import io.trino.spi.connector.CatalogSchemaTableName;
import io.trino.spi.connector.SchemaTableName;
import io.trino.spi.eventlistener.EventListener;
import io.trino.spi.function.FunctionKind;
import io.trino.spi.type.Type;

import java.security.Principal;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the InstrumentationGenerator class.
 * The generation is a one-time event and is not repeated during build.
 */
@SuppressWarnings({"DeprecatedApi", "ExperimentalSpi", "DuplicatedCode"})
public final class InstrumentedSystemAccessControl
        implements SystemAccessControl
{
    private final String catalogName;

    private final String delegateClassName;

    private final SystemAccessControl delegate;

    private InstrumentedSystemAccessControl(String catalogName, SystemAccessControl delegate)
    {
        this.catalogName = requireNonNull(catalogName, "catalogName is null");
        this.delegate = requireNonNull(delegate, "delegate is null");
        this.delegateClassName = delegate.getClass().getSimpleName();
    }

    public static SystemAccessControl instrument(SystemAccessControl delegate)
    {
        if (delegate instanceof InstrumentedSystemAccessControl instrumented) {
            return instrumented;
        }
        return new InstrumentedSystemAccessControl("unknown", delegate);
    }

    public static SystemAccessControl instrument(String catalogName, SystemAccessControl delegate)
    {
        if (delegate instanceof InstrumentedSystemAccessControl instrumented) {
            return instrumented;
        }
        return new InstrumentedSystemAccessControl(catalogName, delegate);
    }

    @Override
    public Iterable<EventListener> getEventListeners()
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getEventListeners";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getEventListeners();
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public List<ViewExpression> getColumnMasks(SystemSecurityContext context,
                                               CatalogSchemaTableName tableName, String columnName, Type type)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnMasks";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnMasks(context, tableName, columnName, type);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateSchema(SystemSecurityContext context, CatalogSchemaName schema,
                                     Map<String, Object> properties)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateSchema(context, schema, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName schema)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropSchema(context, schema);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameSchema(SystemSecurityContext context, CatalogSchemaName schema,
                                     String newSchemaName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameSchema(context, schema, newSchemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowSchemas(SystemSecurityContext context, String catalogName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowSchemas";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowSchemas(context, catalogName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterSchemas(SystemSecurityContext context, String catalogName,
                                     Set<String> schemaNames)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterSchemas";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterSchemas(context, catalogName, schemaNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCreateSchema(SystemSecurityContext context,
                                         CatalogSchemaName schemaName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCreateSchema";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCreateSchema(context, schemaName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCreateTable(SystemSecurityContext context,
                                        CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCreateTable(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateTable(SystemSecurityContext context, CatalogSchemaTableName table,
                                    Map<String, Object> properties)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateTable(context, table, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropTable(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropTable(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameTable(SystemSecurityContext context, CatalogSchemaTableName table,
                                    CatalogSchemaTableName newTable)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameTable(context, table, newTable);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableProperties(SystemSecurityContext context,
                                           CatalogSchemaTableName table, Map<String, Optional<Object>> properties)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableProperties(context, table, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableComment(SystemSecurityContext context,
                                        CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableComment(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetViewComment(SystemSecurityContext context, CatalogSchemaTableName view)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetViewComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetViewComment(context, view);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetColumnComment(SystemSecurityContext context,
                                         CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetColumnComment";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetColumnComment(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName schema)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowTables(context, schema);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName,
                                             Set<SchemaTableName> tableNames)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterTables";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterTables(context, catalogName, tableNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowColumns(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterColumns(SystemSecurityContext context, CatalogSchemaTableName table,
                                     Set<String> columns)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterColumns(context, table, columns);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanAddColumn(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanAddColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanAddColumn(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanAlterColumn(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanAlterColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanAlterColumn(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropColumn(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropColumn(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameColumn(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameColumn";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameColumn(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSelectFromColumns(SystemSecurityContext context,
                                          CatalogSchemaTableName table, Set<String> columns)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSelectFromColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSelectFromColumns(context, table, columns);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanInsertIntoTable(SystemSecurityContext context,
                                        CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanInsertIntoTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanInsertIntoTable(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDeleteFromTable(SystemSecurityContext context,
                                        CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDeleteFromTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDeleteFromTable(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanTruncateTable(SystemSecurityContext context, CatalogSchemaTableName table)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanTruncateTable";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanTruncateTable(context, table);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanUpdateTableColumns(SystemSecurityContext securityContext,
                                           CatalogSchemaTableName table, Set<String> updatedColumnNames)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanUpdateTableColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanUpdateTableColumns(securityContext, table, updatedColumnNames);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                securityContext.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateView(SystemSecurityContext context, CatalogSchemaTableName view)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateView(context, view);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameView(SystemSecurityContext context, CatalogSchemaTableName view,
                                   CatalogSchemaTableName newView)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameView(context, view, newView);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableName view)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropView(context, view);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDenyTablePrivilege(SystemSecurityContext context, Privilege privilege,
                                           CatalogSchemaTableName table, TrinoPrincipal grantee)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDenyTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDenyTablePrivilege(context, privilege, table, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateRole(SystemSecurityContext context, String role,
                                   Optional<TrinoPrincipal> grantor)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateRole(context, role, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropRole(SystemSecurityContext context, String role)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropRole";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropRole(context, role);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantRoles(SystemSecurityContext context, Set<String> roles,
                                   Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantRoles(context, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeRoles(SystemSecurityContext context, Set<String> roles,
                                    Set<TrinoPrincipal> grantees, boolean adminOption, Optional<TrinoPrincipal> grantor)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeRoles(context, roles, grantees, adminOption, grantor);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoles(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoles(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowCurrentRoles(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowCurrentRoles";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowCurrentRoles(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoleGrants(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoleGrants";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoleGrants(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext,
                                         CatalogSchemaRoutineName procedure)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteProcedure";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteProcedure(systemSecurityContext, procedure);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                systemSecurityContext.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteFunction(SystemSecurityContext systemSecurityContext,
                                        String functionName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteFunction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteFunction(systemSecurityContext, functionName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                systemSecurityContext.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteFunction(SystemSecurityContext systemSecurityContext,
                                        FunctionKind functionKind, CatalogSchemaRoutineName functionName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteFunction";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteFunction(systemSecurityContext, functionKind, functionName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                systemSecurityContext.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public List<ViewExpression> getRowFilters(SystemSecurityContext context,
                                              CatalogSchemaTableName tableName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getRowFilters";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getRowFilters(context, tableName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Optional<ViewExpression> getColumnMask(SystemSecurityContext context,
                                                  CatalogSchemaTableName tableName, String columnName, Type type)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "getColumnMask";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.getColumnMask(context, tableName, columnName, type);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanViewQueryOwnedBy(SystemSecurityContext context, String queryOwner)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanViewQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanViewQueryOwnedBy(context, queryOwner);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanViewQueryOwnedBy(SystemSecurityContext context, Identity queryOwner)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanViewQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanViewQueryOwnedBy(context, queryOwner);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Collection<Identity> filterViewQueryOwnedBy(SystemSecurityContext context,
                                                       Collection<Identity> queryOwners)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterViewQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterViewQueryOwnedBy(context, queryOwners);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterViewQueryOwnedBy(SystemSecurityContext context,
                                              Set<String> queryOwners)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterViewQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterViewQueryOwnedBy(context, queryOwners);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanKillQueryOwnedBy(SystemSecurityContext context, Identity queryOwner)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanKillQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanKillQueryOwnedBy(context, queryOwner);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanKillQueryOwnedBy(SystemSecurityContext context, String queryOwner)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanKillQueryOwnedBy";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanKillQueryOwnedBy(context, queryOwner);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanImpersonateUser(SystemSecurityContext context, String userName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanImpersonateUser";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanImpersonateUser(context, userName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetUser(Optional<Principal> principal, String userName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetUser";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetUser(principal, userName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteQuery(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteQuery";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteQuery(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanAccessCatalog(SystemSecurityContext context, String catalogName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanAccessCatalog";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanAccessCatalog(context, catalogName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateCatalog(SystemSecurityContext context, String catalog)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateCatalog";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateCatalog(context, catalog);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropCatalog(SystemSecurityContext context, String catalog)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropCatalog";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropCatalog(context, catalog);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public Set<String> filterCatalogs(SystemSecurityContext context, Set<String> catalogs)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "filterCatalogs";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            return delegate.filterCatalogs(context, catalogs);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetSchemaAuthorization(SystemSecurityContext context,
                                               CatalogSchemaName schema, TrinoPrincipal principal)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetSchemaAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetSchemaAuthorization(context, schema, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetTableAuthorization(SystemSecurityContext context,
                                              CatalogSchemaTableName table, TrinoPrincipal principal)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetTableAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetTableAuthorization(context, table, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetViewAuthorization(SystemSecurityContext context,
                                             CatalogSchemaTableName view, TrinoPrincipal principal)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetViewAuthorization";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetViewAuthorization(context, view, principal);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context,
                                                        CatalogSchemaTableName table, Set<String> columns)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateViewWithSelectFromColumns";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateViewWithSelectFromColumns(context, table, columns);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanCreateMaterializedView(SystemSecurityContext context,
                                               CatalogSchemaTableName materializedView, Map<String, Object> properties)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanCreateMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanCreateMaterializedView(context, materializedView, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRefreshMaterializedView(SystemSecurityContext context,
                                                CatalogSchemaTableName materializedView)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRefreshMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRefreshMaterializedView(context, materializedView);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetMaterializedViewProperties(SystemSecurityContext context,
                                                      CatalogSchemaTableName materializedView, Map<String, Optional<Object>> properties)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetMaterializedViewProperties";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetMaterializedViewProperties(context, materializedView, properties);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDropMaterializedView(SystemSecurityContext context,
                                             CatalogSchemaTableName materializedView)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDropMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDropMaterializedView(context, materializedView);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRenameMaterializedView(SystemSecurityContext context,
                                               CatalogSchemaTableName view, CatalogSchemaTableName newView)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRenameMaterializedView";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRenameMaterializedView(context, view, newView);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantExecuteFunctionPrivilege(SystemSecurityContext context,
                                                      String functionName, TrinoPrincipal grantee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantExecuteFunctionPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantExecuteFunctionPrivilege(context, functionName, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantExecuteFunctionPrivilege(SystemSecurityContext context,
                                                      FunctionKind functionKind, CatalogSchemaRoutineName functionName,
                                                      TrinoPrincipal grantee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantExecuteFunctionPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantExecuteFunctionPrivilege(context, functionKind, functionName, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, String catalogName,
                                                  String propertyName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetCatalogSessionProperty";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetCatalogSessionProperty(context, catalogName, propertyName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantSchemaPrivilege(SystemSecurityContext context, Privilege privilege,
                                             CatalogSchemaName schema, TrinoPrincipal grantee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantSchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantSchemaPrivilege(context, privilege, schema, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanDenySchemaPrivilege(SystemSecurityContext context, Privilege privilege,
                                            CatalogSchemaName schema, TrinoPrincipal grantee)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanDenySchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanDenySchemaPrivilege(context, privilege, schema, grantee);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeSchemaPrivilege(SystemSecurityContext context, Privilege privilege,
                                              CatalogSchemaName schema, TrinoPrincipal revokee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeSchemaPrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeSchemaPrivilege(context, privilege, schema, revokee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanGrantTablePrivilege(SystemSecurityContext context, Privilege privilege,
                                            CatalogSchemaTableName table, TrinoPrincipal grantee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanGrantTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanGrantTablePrivilege(context, privilege, table, grantee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privilege privilege,
                                             CatalogSchemaTableName table, TrinoPrincipal revokee, boolean grantOption)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanRevokeTablePrivilege";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanRevokeTablePrivilege(context, privilege, table, revokee, grantOption);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanShowRoleAuthorizationDescriptors(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanShowRoleAuthorizationDescriptors";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanShowRoleAuthorizationDescriptors(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanExecuteTableProcedure(SystemSecurityContext systemSecurityContext,
                                              CatalogSchemaTableName table, String procedure)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanExecuteTableProcedure";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanExecuteTableProcedure(systemSecurityContext, table, procedure);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                systemSecurityContext.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanReadSystemInformation(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanReadSystemInformation";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanReadSystemInformation(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanWriteSystemInformation(SystemSecurityContext context)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanWriteSystemInformation";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanWriteSystemInformation(context);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }

    @Override
    public void checkCanSetSystemSessionProperty(SystemSecurityContext context,
                                                 String propertyName)
    {
        final SystemAccessControlEvent event = new SystemAccessControlEvent();
        if (event.isEnabled()) {
            event.className = delegateClassName;
            event.method = "checkCanSetSystemSessionProperty";
            event.catalogName = catalogName;
        }
        event.begin();
        try {
            delegate.checkCanSetSystemSessionProperty(context, propertyName);
        }
        finally {
            event.end();
            if (event.shouldCommit()) {
                context.getQueryId().ifPresent(queryId -> event.queryId = queryId.getId());
                event.commit();
            }
        }
    }
}
