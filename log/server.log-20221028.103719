2022-10-28T10:37:20.468+0530	INFO	main	Bootstrap	PROPERTY                                                            DEFAULT                                                                    RUNTIME                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DESCRIPTION
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.uri                                                       ----                                                                       http://localhostiscovery service base URI
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	service-inventory.uriervice inventory base URI
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	service-inventory.update-interval                                   10.00s                                                                     10.00service inventory update interval
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.trino.pool                                                general                                                                    general
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.max-age                                                   30.00s                                                                     30.00s
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.store-cache-ttl                                           1.00s                                                                      1.00s
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.gc-interval                                           1.00h                                                                      1.00h
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.remote.max-batch-size                                 1000                                                                       1000
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.remote.queue-size                                     1000                                                                       1000
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.remote.update-interval                                5.00s                                                                      5.00s
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.remote.replication-interval                           1.00m                                                                      1.00m
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	dynamic.store.tombstone-max-age                                     1.00d                                                                      1.00d
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.https.automatic-shared-secret                 [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.use-blocking-connect                          false                                                                      false
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.connect-timeout                               5.00s                                                                      5.00s
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.http2.enabled                                 false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.469+0530	INFO	main	Bootstrap	discovery.http-client.http2.input-buffer-size                       8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.http-proxy                                    ----                                                                       ----
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.https.excluded-cipher                         [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.https.included-cipher                         []                                                                         []
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.idle-timeout                                  1.00m                                                                      1.00m
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.keep-alive-interval                           ----                                                                       ----
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.key-store-password                            [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.key-store-path                                ----                                                                       ----
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.buffer-size                               1MB                                                                        1MB
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.compression.enabled                       true                                                                       true
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.enabled                                   false                                                                      false
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.flush-interval                            10.00s                                                                     10.00s
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.max-history                               15                                                                         15
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.max-size                                  1GB                                                                        1GB
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.path                                      var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.log.queue-size                                10000                                                                      10000
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.max-connections                               200                                                                        200
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.max-connections-per-server                    20                                                                         20
2022-10-28T10:37:20.470+0530	INFO	main	Bootstrap	discovery.http-client.max-content-length                            16MB                                                                       16MB
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.max-requests-queued-per-destination           1024                                                                       1024
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.max-threads                                   200                                                                        200
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.min-threads                                   8                                                                          8
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.record-request-complete                       true                                                                       true
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.request-buffer-size                           4kB                                                                        4kB
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.request-timeout                               5.00m                                                                      5.00m
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.response-buffer-size                          16kB                                                                       16kB
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.http-proxy.secure                             false                                                                      false
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.secure-random-algorithm                       ----                                                                       ----
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.selector-count                                2                                                                          2
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.socks-proxy                                   ----                                                                       ----
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.trust-store-password                          [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.trust-store-path                              ----                                                                       ----
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	discovery.http-client.https.hostname-verification                   true                                                                       true                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Verify that server hostname matches the server certificate
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	dynamic.http-client.https.automatic-shared-secret                   [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	dynamic.http-client.use-blocking-connect                            false                                                                      false
2022-10-28T10:37:20.471+0530	INFO	main	Bootstrap	dynamic.http-client.connect-timeout                                 5.00s                                                                      5.00s
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.http2.enabled                                   false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.http2.session-receive-window-size               16MB                                                                       16MB                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Initial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.http2.input-buffer-size                         8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.http-proxy                                      ----                                                                       ----
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.https.excluded-cipher                           [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.https.included-cipher                           []                                                                         []
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.idle-timeout                                    1.00m                                                                      1.00m
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.keep-alive-interval                             ----                                                                       ----
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.key-store-password                              [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.key-store-path                                  ----                                                                       ----
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.buffer-size                                 1MB                                                                        1MB
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.compression.enabled                         true                                                                       true
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.enabled                                     false                                                                      false
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.flush-interval                              10.00s                                                                     10.00s
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.max-history                                 15                                                                         15
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.max-size                                    1GB                                                                        1GB
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.path                                        var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.log.queue-size                                  10000                                                                      10000
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.max-connections                                 200                                                                        200
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.max-connections-per-server                      20                                                                         20
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.max-content-length                              16MB                                                                       16MB
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.max-requests-queued-per-destination             1024                                                                       1024
2022-10-28T10:37:20.472+0530	INFO	main	Bootstrap	dynamic.http-client.max-threads                                     200                                                                        200
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.min-threads                                     8                                                                          8
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.record-request-complete                         true                                                                       true
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.request-buffer-size                             4kB                                                                        4kB
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.request-timeout                                 5.00m                                                                      5.00m
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.response-buffer-size                            16kB                                                                       16kB
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.http-proxy.secure                               false                                                                      false
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.secure-random-algorithm                         ----                                                                       ----
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.selector-count                                  2                                                                          2
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.socks-proxy                                     ----                                                                       ----
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.trust-store-password                            [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.trust-store-path                                ----                                                                       ----
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	dynamic.http-client.https.hostname-verification                     true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.https.automatic-shared-secret          [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.use-blocking-connect                   false                                                                      false
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.connect-timeout                        5.00s                                                                      5.00s
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.http2.enabled                          false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.http2.input-buffer-size                8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.http-proxy                             ----                                                                       ----
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.https.excluded-cipher                  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.https.included-cipher                  []                                                                         []
2022-10-28T10:37:20.473+0530	INFO	main	Bootstrap	failure-detector.http-client.idle-timeout                           1.00m                                                                      1.00m
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.keep-alive-interval                    ----                                                                       ----
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.key-store-password                     [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.key-store-path                         ----                                                                       ----
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.buffer-size                        1MB                                                                        1MB
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.compression.enabled                true                                                                       true
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.enabled                            false                                                                      false
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.flush-interval                     10.00s                                                                     10.00s
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.max-history                        15                                                                         15
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.max-size                           1GB                                                                        1GB
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.path                               var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.log.queue-size                         10000                                                                      10000
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.max-connections                        200                                                                        200
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.max-connections-per-server             20                                                                         20
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.max-content-length                     16MB                                                                       16MB
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.max-requests-queued-per-destination    1024                                                                       1024
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.max-threads                            200                                                                        200
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.min-threads                            8                                                                          8
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.record-request-complete                true                                                                       true
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.request-buffer-size                    4kB                                                                        4kB
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.request-timeout                        5.00m                                                                      5.00m
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.response-buffer-size                   16kB                                                                       16kB
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.http-proxy.secure                      false                                                                      false
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.secure-random-algorithm                ----                                                                       ----
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.selector-count                         2                                                                          2
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.socks-proxy                            ----                                                                       ----
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.trust-store-password                   [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.trust-store-path                       ----                                                                       ----
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	failure-detector.http-client.https.hostname-verification            true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	memoryManager.http-client.https.automatic-shared-secret             [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.474+0530	INFO	main	Bootstrap	memoryManager.http-client.use-blocking-connect                      false                                                                      false
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.connect-timeout                           5.00s                                                                      5.00s
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.http2.enabled                             false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.http2.input-buffer-size                   8kB                                                                        8kB                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Size of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.http-proxy                                ----                                                                       ----
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.https.excluded-cipher                     [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.https.included-cipher                     []                                                                         []
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.idle-timeout                              30.00s                                                                     30.00s
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.keep-alive-interval                       ----                                                                       ----
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.key-store-password                        [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.475+0530	INFO	main	Bootstrap	memoryManager.http-client.key-store-path                            ----                                                                       ----
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.buffer-size                           1MB                                                                        1MB
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.compression.enabled                   true                                                                       true
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.enabled                               false                                                                      false
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.flush-interval                        10.00s                                                                     10.00s
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.max-history                           15                                                                         15
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.max-size                              1GB                                                                        1GB
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.path                                  var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.log.queue-size                            10000                                                                      10000
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.max-connections                           200                                                                        200
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.max-connections-per-server                20                                                                         20
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.max-content-length                        16MB                                                                       16MB
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.max-requests-queued-per-destination       1024                                                                       1024
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.max-threads                               200                                                                        200
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.min-threads                               8                                                                          8
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.record-request-complete                   true                                                                       true
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.request-buffer-size                       4kB                                                                        4kB
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.request-timeout                           10.00s                                                                     10.00s
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.response-buffer-size                      16kB                                                                       16kB
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.http-proxy.secure                         false                                                                      false
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.secure-random-algorithm                   ----                                                                       ----
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.selector-count                            2                                                                          2
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.socks-proxy                               ----                                                                       ----
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.trust-store-password                      [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.trust-store-path                          ----                                                                       ----
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	memoryManager.http-client.https.hostname-verification               true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.https.automatic-shared-secret              [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.use-blocking-connect                       false                                                                      false
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.connect-timeout                            5.00s                                                                      5.00s
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.http2.enabled                              false                                                                      false                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Enable the HTTP/2 transport
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.476+0530	INFO	main	Bootstrap	node-manager.http-client.http2.input-buffer-size                    8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.http-proxy                                 ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.https.excluded-cipher                      [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.https.included-cipher                      []                                                                         []
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.idle-timeout                               30.00s                                                                     30.00s
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.keep-alive-interval                        ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.key-store-password                         [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.key-store-path                             ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.buffer-size                            1MB                                                                        1MB
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.compression.enabled                    true                                                                       true
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.enabled                                false                                                                      false
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.flush-interval                         10.00s                                                                     10.00s
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.max-history                            15                                                                         15
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.max-size                               1GB                                                                        1GB
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.path                                   var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.log.queue-size                             10000                                                                      10000
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.max-connections                            200                                                                        200
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.max-connections-per-server                 20                                                                         20
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.max-content-length                         16MB                                                                       16MB
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.max-requests-queued-per-destination        1024                                                                       1024
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.max-threads                                200                                                                        200
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.min-threads                                8                                                                          8
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.record-request-complete                    true                                                                       true
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.request-buffer-size                        4kB                                                                        4kB
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.request-timeout                            10.00s                                                                     10.00s
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.response-buffer-size                       16kB                                                                       16kB
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.http-proxy.secure                          false                                                                      false
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.secure-random-algorithm                    ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.selector-count                             2                                                                          2
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.socks-proxy                                ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.trust-store-password                       [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.trust-store-path                           ----                                                                       ----
2022-10-28T10:37:20.477+0530	INFO	main	Bootstrap	node-manager.http-client.https.hostname-verification                true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.https.automatic-shared-secret                  [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.use-blocking-connect                           false                                                                      false
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.connect-timeout                                5.00s                                                                      1.00m
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http2.enabled                                  false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http2.session-receive-window-size              16MB                                                                       16MB                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Initial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http2.input-buffer-size                        8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http-proxy                                     ----                                                                       ----
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.https.excluded-cipher                          [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.https.included-cipher                          []                                                                         []
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.idle-timeout                                   30.00s                                                                     1.00m
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.keep-alive-interval                            ----                                                                       ----
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.key-store-password                             [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.key-store-path                                 ----                                                                       ----
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.buffer-size                                1MB                                                                        1MB
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.compression.enabled                        true                                                                       true
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.enabled                                    false                                                                      false
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.flush-interval                             10.00s                                                                     10.00s
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.max-history                                15                                                                         15
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.max-size                                   1GB                                                                        1GB
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.path                                       var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.log.queue-size                                 10000                                                                      10000
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.max-connections                                200                                                                        1000
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.max-connections-per-server                     250                                                                        1000
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.max-content-length                             32MB                                                                       32MB
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.max-requests-queued-per-destination            1024                                                                       1024
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.max-threads                                    200                                                                        200
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.min-threads                                    8                                                                          8
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.record-request-complete                        true                                                                       true
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.request-buffer-size                            4kB                                                                        4kB
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.request-timeout                                10.00s                                                                     10.00s
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.response-buffer-size                           16kB                                                                       16kB
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.http-proxy.secure                              false                                                                      false
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.secure-random-algorithm                        ----                                                                       ----
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.selector-count                                 2                                                                          2
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.socks-proxy                                    ----                                                                       ----
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.478+0530	INFO	main	Bootstrap	exchange.http-client.trust-store-password                           [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	exchange.http-client.trust-store-path                               ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	exchange.http-client.https.hostname-verification                    true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.https.automatic-shared-secret                 [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.use-blocking-connect                          false                                                                      false
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.connect-timeout                               5.00s                                                                      1.00m
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http2.enabled                                 false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http2.input-buffer-size                       8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http-proxy                                    ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.https.excluded-cipher                         [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.https.included-cipher                         []                                                                         []
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.idle-timeout                                  30.00s                                                                     1.00m
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.keep-alive-interval                           ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.key-store-password                            [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.key-store-path                                ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.buffer-size                               1MB                                                                        1MB
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.compression.enabled                       true                                                                       true
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.enabled                                   false                                                                      false
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.flush-interval                            10.00s                                                                     10.00s
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.max-history                               15                                                                         15
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.max-size                                  1GB                                                                        1GB
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.path                                      var/log/                                                                   var/log/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            The name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.log.queue-size                                10000                                                                      10000
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.max-connections                               200                                                                        1000
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.max-connections-per-server                    250                                                                        1000
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.max-content-length                            16MB                                                                       16MB
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.max-requests-queued-per-destination           1024                                                                       1024
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.max-threads                                   200                                                                        200
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.min-threads                                   8                                                                          8
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.record-request-complete                       true                                                                       true
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.request-buffer-size                           4kB                                                                        4kB
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.request-timeout                               10.00s                                                                     10.00s
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.response-buffer-size                          16kB                                                                       16kB
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.http-proxy.secure                             false                                                                      false
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.secure-random-algorithm                       ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.selector-count                                2                                                                          2
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.socks-proxy                                   ----                                                                       ----
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.timeout-concurrencyumber of concurrent locks for timeout
2022-10-28T10:37:20.479+0530	INFO	main	Bootstrap	scheduler.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	scheduler.http-client.trust-store-password                          [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	scheduler.http-client.trust-store-path                              ----                                                                       ----
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	scheduler.http-client.https.hostname-verification                   true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.https.automatic-shared-secret                [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.use-blocking-connect                         false                                                                      false
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.connect-timeout                              5.00s                                                                      5.00s
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http2.enabled                                false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http2.input-buffer-size                      8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http-proxy                                   ----                                                                       ----
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.https.excluded-cipher                        [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anon_.*$]  [^.*_(MD5|SHA|SHA1)$, ^TLS_RSA_.*$, ^SSL_.*$, ^.*_NULL_.*$, ^.*_anonetting this config property overwrites Jetty's default excluded cipher suites
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.https.included-cipher                        []                                                                         []
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.idle-timeout                                 1.00m                                                                      1.00m
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.keep-alive-interval                          ----                                                                       ----
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.key-store-password                           [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.key-store-path                               ----                                                                       ----
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.buffer-size                              1MB                                                                        1MB
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.compression.enabled                      true                                                                       true
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.enabled                                  false                                                                      false
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.flush-interval                           10.00s                                                                     10.00s
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.max-history                              15                                                                         15
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.max-size                                 1GB                                                                        1GB
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.path                                     var/log/                                                                   var/loghe name of the log file will be prefixed with the name of the HTTP client (<client_name>-http-client.log)
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.log.queue-size                               10000                                                                      10000
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.max-connections                              200                                                                        200
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.max-connections-per-server                   20                                                                         20
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.max-content-length                           16MB                                                                       16MB
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.max-requests-queued-per-destination          1024                                                                       1024
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.max-threads                                  200                                                                        200
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.min-threads                                  8                                                                          8
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.record-request-complete                      true                                                                       true
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.request-buffer-size                          4kB                                                                        4kB
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.request-timeout                              5.00m                                                                      5.00m
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.response-buffer-size                         16kB                                                                       16kB
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.http-proxy.secure                            false                                                                      false
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.secure-random-algorithm                      ----                                                                       ----
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.selector-count                               2                                                                          2
2022-10-28T10:37:20.480+0530	INFO	main	Bootstrap	workerInfo.http-client.socks-proxy                                  ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	workerInfo.http-client.timeout-concurrency                          1                                                                          1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Number of concurrent locks for timeout
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	workerInfo.http-client.timeout-threadsotal number of timeout threads
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	workerInfo.http-client.trust-store-password                         [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	workerInfo.http-client.trust-store-path                             ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	workerInfo.http-client.https.hostname-verification                  true                                                                       trueerify that server hostname matches the server certificate
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.admin.enabled                                           false                                                                      false
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.admin.threads.max                                       200                                                                        200
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.admin.threads.min                                       2                                                                          2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.admin.port                                              0                                                                          0
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http2.session-receive-window-sizenitial size of session's flow control receive window for HTTP/2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http2.stream-receive-window-sizenitial size of stream's flow control receive window for HTTP/2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http2.input-buffer-size                                 8kB                                                                        8kize of the buffer used to read from the network for HTTP/2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http2.max-concurrent-streamsaximum concurrent streams per connection for HTTP/2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http2.stream-idle-timeout                               15.00s                                                                     15.00s
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.accept-queue-size                                       8000                                                                       8000
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http.acceptor-threads                                   ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http.enabled                                            true                                                                       true
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http.port                                               8080                                                                       8080
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.http.selector-threads                                   ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.https.acceptor-threads                                  ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.https.enabled                                           false                                                                      false
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.https.selector-threads                                  ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.compression.enabled                                 true                                                                       true
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.enabled                                             true                                                                       true
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.max-history                                         15                                                                         15
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.max-size                                            100MB                                                                      100MB
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.path                                                var/log/http-request.log                                                   var/log/http-request.log
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.log.queue-size                                          10000                                                                      10000
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.max-request-header-size                                 2MB                                                                        2MB
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.max-response-header-size                                2MB                                                                        2MB
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.threads.max                                             200                                                                        200
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.threads.min                                             2                                                                          2
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.net.max-idle-time                                       200.00s                                                                    200.00s
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.process-forwarded                                       false                                                                      falserocess Forwarded and X-Forwarded headers (for proxied environments)
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.show-stack-trace                                        true                                                                       truehow the stack trace when generating an error response
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.threads.max-idle-time                                   1.00m                                                                      1.00m
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	http-server.auth.users-file                                         ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	jmx.rmiregistry.port                                                ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	jmx.rmiserver.port                                                  ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.binary-spec                                                    ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.config-spec                                                    ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.environment                                                    ----                                                                       test
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.internal-address-source                                        IP                                                                         IP
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.location                                                       ----                                                                       ----
2022-10-28T10:37:20.481+0530	INFO	main	Bootstrap	node.bind-ip                                                        ----                                                                       ----
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	node.external-address                                               ----                                                                       ----
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	node.id                                                             ----                                                                       ffffffff-ffff-ffff-ffff-ffffffffffff
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	node.internal-address                                               ----                                                                       localhost
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	node.pool                                                           general                                                                    general
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	aggregation-operator-unspill-memory-limit                           4MB                                                                        4MB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	legacy.allow-set-view-authorization                                 false                                                                      falseor security reasons ALTER VIEW SET AUTHORIZATION is disabled for SECURITY DEFINER; setting this option to true will re-enable this functionality
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	exchange.compression-enabled                                        false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	exchange.data-integrity-verification                                ABORT                                                                      ABORT
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	filter-and-project-min-output-page-row-count                        256                                                                        256
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	filter-and-project-min-output-page-size                             500kB                                                                      500kB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	force-spilling-join-operator                                        false                                                                      falseorce spilling join operator in favour of the non-spilling one even when there is no spill
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	hide-inaccessible-columns                                           false                                                                      falsehen enabled non-accessible columns are silently filtered from results from SELECT * statements
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	incremental-hash-array-load-factor.enabled                          true                                                                       truese smaller load factor for small hash arrays in order to improve performance
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	experimental.late-materialization.enabled                           false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	deprecated.legacy-catalog-roles                                     false                                                                      falsenable legacy role management syntax that assumed all roles are catalog scoped
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	deprecated.legacy-row-to-json-cast                                  false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	analyzer.max-grouping-sets                                          2048                                                                       2048
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	max-recursion-depthaximum recursion depth for recursive common table expression
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	memory-revoking-targethen revoking memory, try to revoke so much that pool is filled below target at the end
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	memory-revoking-thresholdevoke memory when memory pool is filled over threshold
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	deprecated.omit-datetime-type-precision                             false                                                                      falsenable compatibility mode for legacy clients when rendering datetime type names with default precision
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	pages-index.eager-compaction-enabled                                false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	parse-decimal-literals-as-double                                    false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	re2j.dfa-retries                                                    5                                                                          5
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	re2j.dfa-states-limit                                               2147483647                                                                 2147483647
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	redistribute-writes                                                 true                                                                       true
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	regex-library                                                       JONI                                                                       JONI
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	scale-writers                                                       true                                                                       true
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	spill-enabled                                                       false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	spiller-max-used-space-threshold                                    0.9                                                                        0.9
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	spiller-spill-path                                                  []                                                                         []
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	spiller-threads                                                     4                                                                          4
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	writer-min-sizearget minimum size of writer output when scaling writers
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	catalog.management                                                  STATIC                                                                     STATIC
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	catalog.config-dir                                                  etc/catalog                                                                etc/catalog
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	catalog.disabled-catalogs                                           ----                                                                       ----
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	event.max-output-stage-size                                         16MB                                                                       16MB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	event-listener.config-files                                         []                                                                         []
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	enable-coordinator-dynamic-filters-distribution                     true                                                                       truenable distribution of dynamic filters from coordinator to all workers
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	enable-dynamic-filtering                                            true                                                                       true
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	enable-large-dynamic-filters                                        false                                                                      false
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-broadcast.max-distinct-values-per-driver    5000                                                                       5000
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-broadcast.max-size-per-driver               500kB                                                                      500kB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-broadcast.max-size-per-operator             5MB                                                                        5MB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-broadcast.range-row-limit-per-driver        10000                                                                      10000
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large.max-size-per-filter                         5MB                                                                        5MB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-partitioned.max-distinct-values-per-driver  500                                                                        500
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-partitioned.max-size-per-driver             50kB                                                                       50kB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-partitioned.max-size-per-operator           500kB                                                                      500kB
2022-10-28T10:37:20.482+0530	INFO	main	Bootstrap	dynamic-filtering.large-partitioned.range-row-limit-per-driver      1000                                                                       1000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-broadcast.max-distinct-values-per-driver    200                                                                        200
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-broadcast.max-size-per-driver               20kB                                                                       20kB
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-broadcast.max-size-per-operator             200kB                                                                      200kB
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-broadcast.range-row-limit-per-driver        400                                                                        400
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small.max-size-per-filter                         1MB                                                                        1MB
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-partitioned.max-distinct-values-per-driver  20                                                                         20
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-partitioned.max-size-per-driver             10kB                                                                       10kB
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-partitioned.max-size-per-operator           100kB                                                                      100kB
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	dynamic-filtering.small-partitioned.range-row-limit-per-driver      100                                                                        100
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	failure-injection.expiration-period                                 10.00m                                                                     10.00meriod after which an injected failure is considered expired and will no longer be triggering a failure
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	failure-injection.request-timeout                                   2.00m                                                                      2.00meriod after which requests blocked to emulate a timeout are released
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.client.timeout                                                5.00m                                                                      5.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-max-task-split-count                       256                                                                        256                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Maximal number of splits for a single fault tolerant task (count based)
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-min-task-split-countinimal number of splits for a single fault tolerant task (count based)
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-partition-countumber of partitions for distributed joins and aggregations executed with fault tolerant execution enabled
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-target-task-input-sizearget size in bytes of all task inputs for a single fault tolerant task
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-target-task-split-countarget number of splits for a single fault tolerant task (split weight aware)
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-task-descriptor-storage-max-memoryaximum amount of memory to be used to store task descriptors for fault tolerant queries on coordinator
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	fault-tolerant-execution-preserve-input-partitions-in-write-stage   true                                                                       truensure single task reads single hash partitioned input partition for stages which write table data
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.hash-partition-countumber of partitions for distributed joins and aggregations
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-concurrent-queries                                        1000                                                                       1000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-history                                                   100                                                                        100
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-length                                                    1000000                                                                    1000000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-queued-queries                                            5000                                                                       5000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-stage-count                                               150                                                                        150
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	max-tasks-waiting-for-node-per-stageaximum possible number of tasks waiting for node allocation per stage before scheduling of new tasks for stage is paused
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.min-expire-age                                                15.00m                                                                     30.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.min-schedule-split-batch-size                                 100                                                                        100
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.execution-policy                                              phased                                                                     phased
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.manager-executor-pool-size                                    5                                                                          5
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-cpu-time                                                  1000000000.00d                                                             1000000000.00d
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-execution-time                                            100.00d                                                                    100.00d
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-planning-time                                             10.00m                                                                     10.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-run-time                                                  100.00d                                                                    100.00d
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.max-scan-physical-bytes                                       ----                                                                       ----
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query-retry-attempts                                                4                                                                          4
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.remote-task.max-callback-threads                              1000                                                                       1000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.remote-task.max-error-duration                                5.00m                                                                      5.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.remote-task.min-error-duration                                5.00m                                                                      5.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query-manager.required-workersinimum number of active workers that must be available before a query will start
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query-manager.required-workers-max-wait                             5.00m                                                                      5.00maximum time to wait for minimum number of workers before the query is failed
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	retry-delay-scale-factoractor by which retry delay is scaled on subsequent failures
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	retry-initial-delay                                                 10.00s                                                                     10.00snitial delay before initiating a retry attempt. Delay increases exponentially for each subsequent attempt up to 'retry_max_delay'
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	retry-max-delay                                                     1.00m                                                                      1.00maximum delay before initiating a retry attempt. Delay increases exponentially for each subsequent attempt starting from 'retry_initial_delay'
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	retry-policy                                                        NONE                                                                       NONE
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.schedule-split-batch-size                                     1000                                                                       1000
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	query.stage-count-warning-thresholdmit a warning when stage count exceeds this threshold
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task-retry-attempts-overall                                         2147483647                                                                 2147483647
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task-retry-attempts-per-task                                        4                                                                          4
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task.client.timeout                                                 2.00m                                                                      2.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task.http-response-threads                                          100                                                                        100
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task.http-timeout-threads                                           3                                                                          3
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task.info.max-age                                                   15.00m                                                                     15.00m
2022-10-28T10:37:20.483+0530	INFO	main	Bootstrap	task.info-update-interval                                           3.00s                                                                      3.00snterval between updating task data
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.initial-splits-per-node                                        20                                                                         20
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.interrupt-stuck-split-tasks-detection-interval                 2.00m                                                                      2.00mnterval between detecting stuck split
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.interrupt-stuck-split-tasks-enabled                            true                                                                       true
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.interrupt-stuck-split-tasks-timeout                            15.00m                                                                     15.00mnterrupt task processing thread after this timeout if the thread is stuck in certain external libraries used by Trino functions
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.interrupt-stuck-split-tasks-warning-threshold                  10.00m                                                                     10.00mrint out call stacks and generate JMX metrics for splits running longer than the threshold
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.level-time-multiplieractor that determines the target scheduled time for a level relative to the next
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-drivers-per-taskaximum number of drivers a task can run
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-index-memory                                               64MB                                                                       64MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-local-exchange-buffer-size                                 32MB                                                                       32MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	driver.max-page-partitioning-buffer-size                            32MB                                                                       32MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-partial-aggregation-memory                                 16MB                                                                       16MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-partial-top-n-memory                                       16MB                                                                       16MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.max-worker-threads                                             20                                                                         20
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.min-drivers                                                    40                                                                         40
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.min-drivers-per-taskinimum number of drivers guaranteed to run per task given there is sufficient work to do
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.per-operator-cpu-timer-enabled                                 true                                                                       true
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.scale-writers.enabled                                          true                                                                       truecale the number of concurrent table writers per task based on throughput
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.scale-writers.max-writer-countaximum number of writers per task up to which scaling will happen if task.scale-writers.enabled is set
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.share-index-loading                                            false                                                                      false
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	sink.max-broadcast-buffer-size                                      200MB                                                                      200MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	sink.max-buffer-size                                                32MB                                                                       32MB
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.split-concurrency-adjustment-interval                          100.00ms                                                                   100.00ms
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.statistics-cpu-timer-enabled                                   true                                                                       true
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.status-refresh-max-wait                                        1.00s                                                                      1.00s
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.concurrencyefault number of local parallel jobs per worker
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.cpu-timer-enabled                                              true                                                                       true
2022-10-28T10:37:20.484+0530	INFO	main	Bootstrap	task.task-notification-threadsumber of threads used for internal task event notifications
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	task.task-yield-threadsumber of threads used for setting yield signals
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	task.writer-countumber of writers per task
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.allowed-no-matching-node-period                      2.00m                                                                      2.00mow long scheduler should wait before failing a query for which hard task requirements (e.g. node exposing specific catalog) cannot be satisfied
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.include-coordinator                                  true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.max-pending-splits-per-task                          10                                                                         10
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.max-splits-per-node                                  100                                                                        100
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.max-unacknowledged-splits-per-taskaximum number of leaf splits not yet delivered to a given task
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.min-candidates                                       10                                                                         10
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.allocator-type                                       BIN_PACKING                                                                BIN_PACKING
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.policy                                               UNIFORM                                                                    UNIFORM
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.optimized-local-scheduling                           true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	node-scheduler.splits-balancing-policytrategy for balancing new splits on worker nodes
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	warning-collector.max-warnings                                      2147483647                                                                 2147483647
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	failure-detector.enabled                                            true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	failure-detector.expiration-grace-interval                          10.00m                                                                     10.00mow long to wait before 'forgetting' a service after it disappears from discovery
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	failure-detector.threshold                                          0.1                                                                        0.1
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	failure-detector.heartbeat-interval                                 500.00ms                                                                   500.00ms
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	failure-detector.warmup-interval                                    5.00s                                                                      5.00sow long to wait after transitioning to success before considering a service alive
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	fault-tolerant-execution-coordinator-task-memorystimated amount of memory a single coordinator task will use when task level retries are used; value is used when allocating nodes for tasks execution
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	fault-tolerant-execution-task-memorystimated amount of memory a single task will use when task level retries are used; value is used when allocating nodes for tasks execution
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	fault-tolerant-execution-task-memory-estimation-quantilehat quantile of memory usage of completed tasks to look at when estimating memory usage for upcoming tasks
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	fault-tolerant-execution-task-memory-growth-factoractor by which estimated task memory is increased if task execution runs out of memory; value is used allocating nodes for tasks execution
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	fault-tolerant-execution-task-runtime-memory-estimation-overheadxtra memory to account for when estimating actual task runtime memory consumption
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.low-memory-killer.delay                                       5.00m                                                                      5.00melay between cluster running low on memory and invoking killer
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.low-memory-killer.policy                                      TOTAL_RESERVATION_ON_BLOCKED_NODES                                         TOTAL_RESERVATION_ON_BLOCKED_NODES
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	task.low-memory-killer.policy                                       TOTAL_RESERVATION_ON_BLOCKED_NODES                                         TOTAL_RESERVATION_ON_BLOCKED_NODES
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.max-memory                                                    20GB                                                                       20GB
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.max-total-memory                                              40GB                                                                       40GB
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	memory.heap-headroom-per-nodehe amount of heap memory to set aside as headroom/buffer (e.g., for untracked allocations)
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.max-memory-per-node                                           5153960755B                                                                5153960755B
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.acknowledge-pages                                          true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.client-threads                                             25                                                                         25
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.concurrent-request-multiplier                              3                                                                          3
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.deduplication-buffer-size                                  32MB                                                                       32MB
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.max-buffer-size                                            32MB                                                                       32MB
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.max-error-duration                                         5.00m                                                                      5.00m
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.max-response-size                                          16MB                                                                       16MB
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.min-error-duration                                         5.00m                                                                      5.00m
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	exchange.page-buffer-client.max-callback-threads                    25                                                                         25
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	access-control.config-files                                         []                                                                         []
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	maven.repo.local                                                    /Users/pramanathan/.m2/repository                                          /Users/pramanathan/.m2/repository
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	maven.repo.remote                                                   [https://repo1.maven.org/maven2/]                                          [https://repo1.maven.org/maven2/]
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	plugin.bundles                                                      []                                                                         [../../plugin/trino-resource-group-managers/pom.xml, ../../plugin/trino-password-authenticators/pom.xml, ../../plugin/trino-iceberg/pom.xml, ../../plugin/trino-delta-lake/pom.xml, ../../plugin/trino-blackhole/pom.xml, ../../plugin/trino-cassandra/pom.xml, ../../plugin/trino-memory/pom.xml, ../../plugin/trino-jmx/pom.xml, ../../plugin/trino-raptor-legacy/pom.xml, ../../plugin/trino-hive-hadoop2/pom.xml, ../../plugin/trino-example-http/pom.xml, ../../plugin/trino-kafka/pom.xml, ../../plugin/trino-tpch/pom.xml, ../../plugin/trino-local-file/pom.xml, ../../plugin/trino-mysql/pom.xml, ../../plugin/trino-mariadb/pom.xml, ../../plugin/trino-singlestore/pom.xml, ../../plugin/trino-sqlserver/pom.xml, ../../plugin/trino-prometheus/pom.xml, ../../plugin/trino-postgresql/pom.xml, ../../plugin/trino-thrift/pom.xml, ../../plugin/trino-tpcds/pom.xml, ../../plugin/trino-google-sheets/pom.xml, ../../plugin/trino-druid/pom.xml, ../../plugin/trino-geospatial/pom.xml, ../../plugin/trino-http-event-listener/pom.xml, ../../plugin/trino-exchange-filesystem/pom.xml]
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	discovery-server.enabled                                            true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.http2.enabled                                false                                                                      falsenable the HTTP/2 transport
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.https.required                               false                                                                      false
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.https.keystore.key                           [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.https.keystore.path                          ----                                                                       ----
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.shared-secret                                [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.https.truststore.key                         [REDACTED]                                                                 [REDACTED]
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	internal-communication.https.truststore.path                        ----                                                                       ----
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	jmx.base-name                                                       trino                                                                      trino
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	protocol.v1.alternate-header-namelternate header name for V1 protocol
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	protocol.v1.prepared-statement-compression.min-gainrepared statement compression is not applied if the size gain is less than the configured value
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	protocol.v1.prepared-statement-compression.length-threshold         2048                                                                       2048                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Compression is applied to prepared statements longer than the configured value
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	experimental.concurrent-startup                                     false                                                                      truearallelize work during server startup
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	coordinator                                                         true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	shutdown.grace-period                                               2.00m                                                                      2.00m
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	http.include-exception-in-response                                  true                                                                       true
2022-10-28T10:37:20.485+0530	INFO	main	Bootstrap	query.info-url-template                                             ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	query-results.compression-enabled                                   true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	plugin.dir                                                          plugin                                                                     plugin
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	http-server.authentication.insecure.user-mapping.file               ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	http-server.authentication.insecure.user-mapping.pattern            ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	http-server.authentication.type                                     [insecure]                                                                 [insecurerdered list of authentication types
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	management.userptional fixed user for all requests to management endpoints
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	management.user.https-enabled                                       false                                                                      falsese fixed management user for secure HTTPS requests
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	http-server.authentication.allow-insecure-over-http                 true                                                                       truensecure authentication over HTTP (non-secure) enabled
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	web-ui.session-timeout                                              1.00d                                                                      1.00d
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	web-ui.shared-secret                                                ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	web-ui.authentication.type                                          ----                                                                       ----                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Authentication type for the web ui
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	web-ui.enabled                                                      true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	max-spill-per-node                                                  100GB                                                                      100GB
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	query-max-spill-per-node                                            100GB                                                                      100GB
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	spill-compression-enabled                                           false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	spill-encryption-enabled                                            false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	sql.default-catalog                                                 ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	sql.default-schema                                                  ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	sql.forced-session-time-zoneser session time zone overriding value sent by client
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	sql.path                                                            ----                                                                       ----
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	compiler.expression-cache-size                                      10000                                                                      10000
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	adaptive-partial-aggregation.enabled                                true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	adaptive-partial-aggregation.min-rowsinimum number of processed rows before partial aggregation might be adaptively turned off
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	adaptive-partial-aggregation.unique-rows-ratio-thresholdatio between aggregation output and input rows above which partial aggregation might be adaptively turned off
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	collect-plan-statistics-for-all-queries                             false                                                                      falseollect plan statistics for non-EXPLAIN queries
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	colocated-joins-enabled                                             false                                                                      falsexperimental: Use a colocated join when possible
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.complex-expression-pushdown.enabled                       true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	cpu-cost-weight                                                     75.0                                                                       75.0
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.default-filter-factor-enabled                             false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.dictionary-aggregation                                    false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	distributed-index-joins-enabled                                     false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	distributed-sort                                                    true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	enable-forced-exchange-below-group-id                               true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.enable-intermediate-aggregations                          false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	enable-stats-calculator                                             true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.filter-conjunction-independence-factorcales the strength of independence assumption for selectivity estimates of the conjunction of multiple filters
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.force-single-node-output                                  false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.ignore-downstream-preferences                             false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.ignore-stats-calculator-failures                          true                                                                       true                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ignore statistics calculator failures
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	iterative-optimizer-timeout                                         3.00m                                                                      3.00m
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	join-distribution-type                                              AUTOMATIC                                                                  AUTOMATIC
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	join-max-broadcast-table-sizeaximum estimated size of a table that can be broadcast when using automatic join type selection
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.join-multi-clause-independence-factorcales the strength of independence assumption for selectivity estimates of multi-clause joins
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.join-partitioned-build-min-row-countinimum number of join build side rows required to use partitioned join lookup
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.join-reordering-strategyhe strategy to use for reordering joins
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.max-reordered-joinshe maximum number of tables to reorder in cost-based join reordering
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	memory-cost-weight                                                  10.0                                                                       10.0
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.merge-project-with-values                                 true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	network-cost-weight                                                 15.0                                                                       15.0
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.non-estimatable-predicate-approximation.enabled           true                                                                       truepproximate the cost of filters which cannot be accurately estimated even with complete statistics
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.optimize-duplicate-insensitive-joins                      true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.optimize-hash-generation                                  true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.optimize-metadata-queries                                 false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.optimize-mixed-distinct-aggregations                      false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.optimize-top-n-ranking                                    true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.pre-aggregate-case-aggregations.enabled                   true                                                                       truere-aggregate rows before GROUP BY with multiple CASE aggregations on same column
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.predicate-pushdown-use-table-properties                   true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.prefer-partial-aggregation                                true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	preferred-write-partitioning-min-number-of-partitionsse preferred write partitioning when the number of written partitions exceeds the configured threshold
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.push-aggregation-through-outer-join                       true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.push-partial-aggregation-through-join                     false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.push-table-write-through-union                            true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.rewrite-filtering-semi-join-to-inner-join                 true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.skip-redundant-sort                                       true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	spatial-joins-enabled                                               true                                                                       truese spatial index for spatial joins when possible
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	statistics-precalculation-for-pushdown.enabled                      true                                                                       true
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.table-scan-node-partitioning-min-bucket-to-task-ratioin table scan bucket to task ratio for which plan will be adopted to node pre-partitioned tables
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.use-exact-partitioning                                    false                                                                      falsehen enabled this forces data repartitioning unless the partitioning of upstream stage matches exactly what downstream stage expects
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.use-legacy-window-filter-pushdown                         false                                                                      false
2022-10-28T10:37:20.486+0530	INFO	main	Bootstrap	optimizer.use-mark-distinct                                         true                                                                       true
2022-10-28T10:37:20.487+0530	INFO	main	Bootstrap	use-preferred-write-partitioning                                    true                                                                       true
2022-10-28T10:37:20.487+0530	INFO	main	Bootstrap	optimizer.use-table-scan-node-partitioning                          true                                                                       truedapt plan to node pre-partitioned tables
2022-10-28T10:37:20.487+0530	INFO	main	Bootstrap	transaction.idle-check-interval                                     1.00m                                                                      1.00mime interval between idle transactions checks
2022-10-28T10:37:20.487+0530	INFO	main	Bootstrap	transaction.idle-timeout                                            5.00m                                                                      5.00mmount of time before an inactive transaction is considered expired
2022-10-28T10:37:20.487+0530	INFO	main	Bootstrap	transaction.max-finishing-concurrency                               1                                                                          1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Maximum parallelism for committing or aborting a transaction
2022-10-28T10:37:21.076+0530	INFO	main	org.eclipse.jetty.util.log	Logging initialized @1931ms to org.eclipse.jetty.util.log.Slf4jLog
2022-10-28T10:37:21.226+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/Trino_dev____20221028_050721_2
2022-10-28T10:37:22.633+0530	INFO	main	org.eclipse.jetty.server.Server	jetty-9.4.44.v20210927; built: 2021-09-27T23:02:44.612Z; git: 8da83308eeca865e495e53ef315a249d63ba9332; jvm 17.0.4.1+0
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.NodeResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.NodeResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.airlift.jmx.MBeanResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.airlift.jmx.MBeanResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.airlift.discovery.server.ServiceResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.airlift.discovery.server.ServiceResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.LoginResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.LoginResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.UiQueryResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.UiQueryResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ResourceGroupStateInfoResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ResourceGroupStateInfoResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.airlift.discovery.store.StoreResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.airlift.discovery.store.StoreResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.TaskResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.TaskResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.airlift.discovery.server.DynamicAnnouncementResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.airlift.discovery.server.DynamicAnnouncementResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.dispatcher.QueuedStatementResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.dispatcher.QueuedStatementResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.TaskExecutorResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.TaskExecutorResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ServerInfoResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ServerInfoResource will be ignored. 
2022-10-28T10:37:22.808+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.ClusterStatsResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.ClusterStatsResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ThreadResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ThreadResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.QueryStateInfoResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.QueryStateInfoResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.StatusResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.StatusResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.WebUiStaticResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.WebUiStaticResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.memory.MemoryResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.memory.MemoryResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.WorkerResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.WorkerResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.protocol.ExecutingStatementResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.protocol.ExecutingStatementResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.ui.ClusterResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.ui.ClusterResource will be ignored. 
2022-10-28T10:37:22.809+0530	WARN	main	org.glassfish.jersey.internal.inject.Providers	A provider io.trino.server.QueryResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider io.trino.server.QueryResource will be ignored. 
2022-10-28T10:37:22.931+0530	WARN	main	org.glassfish.jersey.internal.Errors	The following warnings have been detected: WARNING: The (sub)resource method getRoot in io.trino.server.ui.WebUiStaticResource contains empty path annotation.
WARNING: Parameter 2 of type io.trino.execution.resourcegroups.ResourceGroupManager<?> from public io.trino.server.QueryStateInfoResource(io.trino.dispatcher.DispatchManager,io.trino.execution.resourcegroups.ResourceGroupManager<?>,io.trino.security.AccessControl,io.trino.server.HttpRequestSessionContextFactory,io.trino.server.ProtocolConfig) is not resolvable to a concrete type.
WARNING: Parameter 2 of type io.trino.execution.resourcegroups.ResourceGroupManager<?> from public io.trino.server.QueryStateInfoResource(io.trino.dispatcher.DispatchManager,io.trino.execution.resourcegroups.ResourceGroupManager<?>,io.trino.security.AccessControl,io.trino.server.HttpRequestSessionContextFactory,io.trino.server.ProtocolConfig) is not resolvable to a concrete type.
WARNING: Parameter 1 of type io.trino.execution.resourcegroups.ResourceGroupManager<?> from public io.trino.server.ResourceGroupStateInfoResource(io.trino.execution.resourcegroups.ResourceGroupManager<?>) is not resolvable to a concrete type.

2022-10-28T10:37:22.933+0530	INFO	main	org.eclipse.jetty.server.handler.ContextHandler	Started o.e.j.s.ServletContextHandler@cb318ac{/,null,AVAILABLE,@http}
2022-10-28T10:37:22.937+0530	INFO	main	org.eclipse.jetty.server.AbstractConnector	Started http@aedc426{HTTP/1.1, (http/1.1, h2c)}{0.0.0.0:8080}
2022-10-28T10:37:22.937+0530	INFO	main	org.eclipse.jetty.server.Server	Started @3792ms
2022-10-28T10:37:23.170+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/BooleanDistinctStateSerializer_20221028_050723_3
2022-10-28T10:37:23.175+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/BooleanDistinctStateSerializer_20221028_050723_4
2022-10-28T10:37:23.180+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_5
2022-10-28T10:37:23.191+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/VarianceStateSerializer_20221028_050723_6
2022-10-28T10:37:23.193+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/VarianceStateSerializer_20221028_050723_7
2022-10-28T10:37:23.199+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CentralMomentsStateSerializer_20221028_050723_8
2022-10-28T10:37:23.201+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CentralMomentsStateSerializer_20221028_050723_9
2022-10-28T10:37:23.222+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_10
2022-10-28T10:37:23.229+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongDoubleStateSerializer_20221028_050723_11
2022-10-28T10:37:23.233+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongLongStateSerializer_20221028_050723_12
2022-10-28T10:37:23.242+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_13
2022-10-28T10:37:23.244+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_14
2022-10-28T10:37:23.250+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_15
2022-10-28T10:37:23.251+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/DoubleStateSerializer_20221028_050723_16
2022-10-28T10:37:23.251+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_17
2022-10-28T10:37:23.252+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/DoubleStateSerializer_20221028_050723_18
2022-10-28T10:37:23.253+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_19
2022-10-28T10:37:23.254+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/DoubleStateSerializer_20221028_050723_20
2022-10-28T10:37:23.254+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_21
2022-10-28T10:37:23.255+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/DoubleStateSerializer_20221028_050723_22
2022-10-28T10:37:23.256+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_23
2022-10-28T10:37:23.256+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/DoubleStateSerializer_20221028_050723_24
2022-10-28T10:37:23.258+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_25
2022-10-28T10:37:23.261+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_26
2022-10-28T10:37:23.263+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_27
2022-10-28T10:37:23.264+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_28
2022-10-28T10:37:23.266+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongAndDoubleStateSerializer_20221028_050723_29
2022-10-28T10:37:23.290+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CovarianceStateSerializer_20221028_050723_30
2022-10-28T10:37:23.293+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CovarianceStateSerializer_20221028_050723_31
2022-10-28T10:37:23.296+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/RegressionStateSerializer_20221028_050723_32
2022-10-28T10:37:23.299+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/RegressionStateSerializer_20221028_050723_33
2022-10-28T10:37:23.301+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CorrelationStateSerializer_20221028_050723_34
2022-10-28T10:37:23.304+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CorrelationStateSerializer_20221028_050723_35
2022-10-28T10:37:23.576+0530	DEBUG	main	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/LongStateSerializer_20221028_050723_36
2022-10-28T10:37:24.033+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle starting...
2022-10-28T10:37:24.034+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle started
2022-10-28T10:37:24.034+0530	INFO	main	io.trino.server.Server	Trino version: dev
2022-10-28T10:37:24.034+0530	INFO	main	io.trino.server.Server	Working directory: /Users/pramanathan/repos/trino/testing/trino-server-dev
2022-10-28T10:37:24.034+0530	INFO	main	io.trino.server.Server	Etc directory: /Users/pramanathan/repos/trino/testing/trino-server-dev/etc
2022-10-28T10:37:24.037+0530	INFO	startup-2	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-iceberg/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-1	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-password-authenticators/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-3	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-delta-lake/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-0	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-resource-group-managers/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-5	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-cassandra/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-4	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-blackhole/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-6	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-memory/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-7	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-jmx/pom.xml --
2022-10-28T10:37:24.037+0530	INFO	startup-8	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-raptor-legacy/pom.xml --
2022-10-28T10:37:24.038+0530	INFO	startup-9	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-hive-hadoop2/pom.xml --
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/at/favre/lib/bcrypt/0.9.0/bcrypt-0.9.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/at/favre/lib/bytes/1.3.0/bytes-1.3.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:35.817+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-password-authenticators/target/classes/
2022-10-28T10:37:35.818+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-password-authenticators/target/plugin-discovery/
2022-10-28T10:37:35.821+0530	INFO	startup-1	io.trino.server.PluginManager	Installing io.trino.plugin.password.PasswordAuthenticatorPlugin
2022-10-28T10:37:35.825+0530	INFO	startup-1	io.trino.server.PluginManager	Registering group provider file
2022-10-28T10:37:35.826+0530	INFO	startup-1	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-password-authenticators/pom.xml --
2022-10-28T10:37:35.826+0530	INFO	startup-1	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-example-http/pom.xml --
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:42.023+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-example-http/target/classes/
2022-10-28T10:37:42.024+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-example-http/target/plugin-discovery/
2022-10-28T10:37:42.026+0530	INFO	startup-1	io.trino.server.PluginManager	Installing io.trino.plugin.example.ExamplePlugin
2022-10-28T10:37:42.029+0530	INFO	startup-1	io.trino.server.PluginManager	Registering connector example-http
2022-10-28T10:37:42.030+0530	INFO	startup-1	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-example-http/pom.xml --
2022-10-28T10:37:42.030+0530	INFO	startup-1	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-kafka/pom.xml --
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:42.273+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/ojdbc8/19.3.0.0/ojdbc8-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/ons/19.3.0.0/ons-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/oraclepki/19.3.0.0/oraclepki-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/osdt_cert/19.3.0.0/osdt_cert-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/osdt_core/19.3.0.0/osdt_core-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/simplefan/19.3.0.0/simplefan-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/oracle/ojdbc/ucp/19.3.0.0/ucp-19.3.0.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/leangen/geantyref/geantyref/1.3.13/geantyref-1.3.13.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/mysql/mysql-connector-java/8.0.22/mysql-connector-java-8.0.22.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/flywaydb/flyway-core/7.15.0/flyway-core-7.15.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-core/3.32.0/jdbi3-core-3.32.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-sqlobject/3.32.0/jdbi3-sqlobject-3.32.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-resource-group-managers/target/classes/
2022-10-28T10:37:42.276+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-resource-group-managers/target/plugin-discovery/
2022-10-28T10:37:42.280+0530	INFO	startup-0	io.trino.server.PluginManager	Installing io.trino.plugin.resourcegroups.ResourceGroupManagerPlugin
2022-10-28T10:37:42.284+0530	INFO	startup-0	io.trino.server.PluginManager	Registering resource group configuration manager file
2022-10-28T10:37:42.284+0530	INFO	startup-0	io.trino.server.PluginManager	Registering resource group configuration manager db
2022-10-28T10:37:42.285+0530	INFO	startup-0	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-resource-group-managers/pom.xml --
2022-10-28T10:37:42.285+0530	INFO	startup-0	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-tpch/pom.xml --
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-memory/target/classes/
2022-10-28T10:37:43.878+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-memory/target/plugin-discovery/
2022-10-28T10:37:43.881+0530	INFO	startup-6	io.trino.server.PluginManager	Installing io.trino.plugin.memory.MemoryPlugin
2022-10-28T10:37:43.885+0530	INFO	startup-6	io.trino.server.PluginManager	Registering connector memory
2022-10-28T10:37:43.886+0530	INFO	startup-6	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-memory/pom.xml --
2022-10-28T10:37:43.886+0530	INFO	startup-6	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-local-file/pom.xml --
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:44.187+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/tpch/tpch/1.1/tpch-1.1.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-tpch/target/classes/
2022-10-28T10:37:44.188+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-tpch/target/plugin-discovery/
2022-10-28T10:37:44.191+0530	INFO	startup-0	io.trino.server.PluginManager	Installing io.trino.plugin.tpch.TpchPlugin
2022-10-28T10:37:44.195+0530	INFO	startup-0	io.trino.server.PluginManager	Registering connector tpch
2022-10-28T10:37:44.195+0530	INFO	startup-0	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-tpch/pom.xml --
2022-10-28T10:37:44.195+0530	INFO	startup-0	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-mysql/pom.xml --
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:44.378+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-jmx/target/classes/
2022-10-28T10:37:44.379+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-jmx/target/plugin-discovery/
2022-10-28T10:37:44.381+0530	INFO	startup-7	io.trino.server.PluginManager	Installing io.trino.plugin.jmx.JmxPlugin
2022-10-28T10:37:44.385+0530	INFO	startup-7	io.trino.server.PluginManager	Registering connector jmx
2022-10-28T10:37:44.385+0530	INFO	startup-7	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-jmx/pom.xml --
2022-10-28T10:37:44.385+0530	INFO	startup-7	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-mariadb/pom.xml --
2022-10-28T10:37:44.475+0530	DEBUG	startup-4	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-blackhole/target/classes/
2022-10-28T10:37:44.476+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-blackhole/target/plugin-discovery/
2022-10-28T10:37:44.478+0530	INFO	startup-4	io.trino.server.PluginManager	Installing io.trino.plugin.blackhole.BlackHolePlugin
2022-10-28T10:37:44.481+0530	INFO	startup-4	io.trino.server.PluginManager	Registering connector blackhole
2022-10-28T10:37:44.481+0530	INFO	startup-4	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-blackhole/pom.xml --
2022-10-28T10:37:44.481+0530	INFO	startup-4	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-singlestore/pom.xml --
2022-10-28T10:37:44.575+0530	DEBUG	startup-9	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-core/1.12.172/aws-java-sdk-core-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-glue/1.12.172/aws-java-sdk-glue-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-kms/1.12.172/aws-java-sdk-kms-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-s3/1.12.172/aws-java-sdk-s3-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-sts/1.12.172/aws-java-sdk-sts-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/jmespath-java/1.12.172/jmespath-java-1.12.172.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.13.4/jackson-dataformat-cbor-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/luben/zstd-jni/1.5.0-1/zstd-jni-1.5.0-1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/stephenc/findbugs/findbugs-annotations/1.3.9-1/findbugs-annotations-1.3.9-1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/vertical-blank/sql-formatter/2.0.2/sql-formatter-2.0.2.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-jackson2/1.30.1/google-api-client-jackson2-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-java6/1.30.1/google-api-client-java6-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client/1.30.1/google-api-client-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/apis/google-api-services-storage/v1-rev20190624-1.30.1/google-api-services-storage-v1-rev20190624-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auto/value/auto-value-annotations/1.6.5/auto-value-annotations-1.6.5.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcs-connector/hadoop2-2.0.0/gcs-connector-hadoop2-2.0.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcsio/2.0.0/gcsio-2.0.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util-hadoop/hadoop2-2.0.0/util-hadoop-hadoop2-2.0.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util/2.0.0/util-2.0.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/gson/gson/2.9.0/gson-2.9.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-log4j-backend/0.4/flogger-log4j-backend-0.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-system-backend/0.4/flogger-system-backend-0.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger/0.4/flogger-0.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/google-extensions/0.4/google-extensions-0.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-jackson2/1.30.1/google-http-client-jackson2-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client/1.30.1/google-http-client-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client-java6/1.30.1/google-oauth-client-java6-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client/1.30.1/google-oauth-client-1.30.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/calcite/calcite-core/1.21.0.152/calcite-core-1.21.0.152-shaded.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-common/2.0.77/coral-common-2.0.77.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-hive/2.0.77/coral-hive-2.0.77.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino-parser/2.0.77/coral-trino-parser-2.0.77.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino/2.0.77/coral-trino-2.0.77.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/qubole/rubix/rubix-presto-shaded/0.3.18/rubix-presto-shaded-0.3.18.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/aircompressor/0.21/aircompressor-0.21.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/event/218/event-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/grpc/grpc-context/1.19.0/grpc-context-1.19.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-api/0.21.0/opencensus-api-0.21.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.21.0/opencensus-contrib-http-util-0.21.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hadoop/hadoop-apache/3.2.0-16/hadoop-apache-3.2.0-16.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hive/hive-apache/3.1.2-20/hive-apache-3.1.2-20.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/orc/orc-protobuf/13/orc-protobuf-13.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/it/unimi/dsi/fastutil/8.3.0/fastutil-8.3.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/alluxio/alluxio-shaded-client/2.8.1/alluxio-shaded-client-2.8.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/ST4/4.0.4/ST4-4.0.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-api/0.14.1/iceberg-api-0.14.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-bundled-guava/0.14.1/iceberg-bundled-guava-0.14.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/thrift/libthrift/0.9.3-1/libthrift-0.9.3-1.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/ion/ion-java/1.0.2/ion-java-1.0.2.jar
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-array/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-filesystem/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hadoop-toolkit/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hdfs/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-memory-context/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-orc/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-parquet/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-rcfile/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-hive/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-hive-hadoop2/target/classes/
2022-10-28T10:37:44.576+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-hive-hadoop2/target/plugin-discovery/
2022-10-28T10:37:44.581+0530	INFO	startup-9	io.trino.server.PluginManager	Installing io.trino.plugin.hive.HivePlugin
2022-10-28T10:37:44.586+0530	INFO	startup-9	io.trino.server.PluginManager	Registering connector hive
2022-10-28T10:37:44.586+0530	INFO	startup-9	io.trino.server.PluginManager	Registering connector hive-hadoop2
2022-10-28T10:37:44.587+0530	INFO	startup-9	io.trino.server.PluginManager	Registering functions from HivePlugin
2022-10-28T10:37:44.589+0530	INFO	startup-9	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-hive-hadoop2/pom.xml --
2022-10-28T10:37:44.589+0530	INFO	startup-9	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-sqlserver/pom.xml --
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/datastax/oss/java-driver-core/4.14.0/java-driver-core-4.14.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/datastax/oss/java-driver-query-builder/4.14.0/java-driver-query-builder-4.14.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/datastax/oss/java-driver-shaded-guava/25.1-jre-graal-sub-1/java-driver-shaded-guava-25.1-jre-graal-sub-1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/datastax/oss/native-protocol/1.5.1/native-protocol-1.5.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jffi/1.3.1/jffi-1.3.1-native.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jffi/1.3.1/jffi-1.3.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jnr-a64asm/1.0.0/jnr-a64asm-1.0.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jnr-constants/0.10.1/jnr-constants-0.10.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jnr-ffi/2.2.2/jnr-ffi-2.2.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jnr-posix/3.1.5/jnr-posix-3.1.5.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/jnr/jnr-x86asm/1.0.2/jnr-x86asm-1.0.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/spotbugs/spotbugs-annotations/4.7.2/spotbugs-annotations-4.7.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/stephenc/jcip/jcip-annotations/1.0-1/jcip-annotations-1.0-1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/typesafe/config/1.4.1/config-1.4.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/dropwizard/metrics/metrics-core/4.1.18/metrics-core-4.1.18.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-buffer/4.1.60.Final/netty-buffer-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec/4.1.60.Final/netty-codec-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-common/4.1.60.Final/netty-common-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-handler/4.1.60.Final/netty-handler-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver/4.1.60.Final/netty-resolver-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport/4.1.60.Final/netty-transport-4.1.60.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-analysis/9.2/asm-analysis-9.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-commons/9.1/asm-commons-9.1.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-tree/9.2/asm-tree-9.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-util/9.2/asm-util-9.2.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/reactivestreams/reactive-streams/1.0.3/reactive-streams-1.0.3.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-cassandra/target/classes/
2022-10-28T10:37:44.825+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-cassandra/target/plugin-discovery/
2022-10-28T10:37:44.828+0530	INFO	startup-5	io.trino.server.PluginManager	Installing io.trino.plugin.cassandra.CassandraPlugin
2022-10-28T10:37:44.831+0530	INFO	startup-5	io.trino.server.PluginManager	Registering connector cassandra
2022-10-28T10:37:44.832+0530	INFO	startup-5	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-cassandra/pom.xml --
2022-10-28T10:37:44.832+0530	INFO	startup-5	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-prometheus/pom.xml --
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-local-file/target/classes/
2022-10-28T10:37:45.790+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-local-file/target/plugin-discovery/
2022-10-28T10:37:45.792+0530	INFO	startup-6	io.trino.server.PluginManager	Installing io.trino.plugin.localfile.LocalFilePlugin
2022-10-28T10:37:45.796+0530	INFO	startup-6	io.trino.server.PluginManager	Registering connector localfile
2022-10-28T10:37:45.796+0530	INFO	startup-6	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-local-file/pom.xml --
2022-10-28T10:37:45.796+0530	INFO	startup-6	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-postgresql/pom.xml --
2022-10-28T10:37:46.666+0530	DEBUG	startup-5	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/squareup/okhttp3/okhttp/3.14.9/okhttp-3.14.9.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/squareup/okio/okio/1.17.2/okio-1.17.2.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-prometheus/target/classes/
2022-10-28T10:37:46.667+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-prometheus/target/plugin-discovery/
2022-10-28T10:37:46.669+0530	INFO	startup-5	io.trino.server.PluginManager	Installing io.trino.plugin.prometheus.PrometheusPlugin
2022-10-28T10:37:46.673+0530	INFO	startup-5	io.trino.server.PluginManager	Registering connector prometheus
2022-10-28T10:37:46.673+0530	INFO	startup-5	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-prometheus/pom.xml --
2022-10-28T10:37:46.673+0530	INFO	startup-5	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-thrift/pom.xml --
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/luben/zstd-jni/1.5.0-1/zstd-jni-1.5.0-1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/h2database/h2/1.4.200/h2-1.4.200.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/aircompressor/0.21/aircompressor-0.21.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/leangen/geantyref/geantyref/1.3.13/geantyref-1.3.13.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hadoop/hadoop-apache/3.2.0-16/hadoop-apache-3.2.0-16.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hive/hive-apache/3.1.2-20/hive-apache-3.1.2-20.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/orc/orc-protobuf/13/orc-protobuf-13.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/it/unimi/dsi/fastutil/8.3.0/fastutil-8.3.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/mysql/mysql-connector-java/8.0.22/mysql-connector-java-8.0.22.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/thrift/libthrift/0.9.3-1/libthrift-0.9.3-1.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-core/3.32.0/jdbi3-core-3.32.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-sqlobject/3.32.0/jdbi3-sqlobject-3.32.0.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-array/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hadoop-toolkit/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-memory-context/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-orc/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-raptor-legacy/target/classes/
2022-10-28T10:37:47.337+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-raptor-legacy/target/plugin-discovery/
2022-10-28T10:37:47.347+0530	INFO	startup-8	io.trino.server.PluginManager	Installing io.trino.plugin.raptor.legacy.RaptorPlugin
2022-10-28T10:37:47.352+0530	INFO	startup-8	io.trino.server.PluginManager	Registering connector raptor-legacy
2022-10-28T10:37:47.352+0530	INFO	startup-8	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-raptor-legacy/pom.xml --
2022-10-28T10:37:47.352+0530	INFO	startup-8	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-tpcds/pom.xml --
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/singlestore/singlestore-jdbc-client/1.0.1/singlestore-jdbc-client-1.0.1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-singlestore/target/classes/
2022-10-28T10:37:47.843+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-singlestore/target/plugin-discovery/
2022-10-28T10:37:47.847+0530	INFO	startup-4	io.trino.server.PluginManager	Installing io.trino.plugin.singlestore.SingleStorePlugin
2022-10-28T10:37:47.854+0530	INFO	startup-4	io.trino.server.PluginManager	Registering connector singlestore
2022-10-28T10:37:47.854+0530	INFO	startup-4	io.trino.server.PluginManager	Registering connector memsql
2022-10-28T10:37:47.854+0530	INFO	startup-4	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-singlestore/pom.xml --
2022-10-28T10:37:47.854+0530	INFO	startup-4	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-google-sheets/pom.xml --
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/luben/zstd-jni/1.4.3-1/zstd-jni-1.4.3-1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/confluent/common-config/5.5.2/common-config-5.5.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/confluent/common-utils/5.5.2/common-utils-5.5.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/confluent/kafka-schema-registry-client/5.5.2/kafka-schema-registry-client-5.5.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-buffer/4.1.48.Final/netty-buffer-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec/4.1.48.Final/netty-codec-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-common/4.1.48.Final/netty-common-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-handler/4.1.48.Final/netty-handler-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver/4.1.48.Final/netty-resolver-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-native-epoll/4.1.48.Final/netty-transport-native-epoll-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.48.Final/netty-transport-native-unix-common-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport/4.1.48.Final/netty-transport-4.1.48.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/swagger/swagger-annotations/1.6.2/swagger-annotations-1.6.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.1.1/javax.ws.rs-api-2.1.1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/sf/opencsv/opencsv/2.3/opencsv-2.3.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/avro/avro/1.9.2/avro-1.9.2.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/kafka/kafka-clients/2.4.1/kafka-clients-2.4.1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/yetus/audience-annotations/0.5.0/audience-annotations-0.5.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.5.8/zookeeper-jute-3.5.8.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/zookeeper/zookeeper/3.5.8/zookeeper-3.5.8.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/glassfish/jersey/core/jersey-common/2.30/jersey-common-2.30.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/lz4/lz4-java/1.6.0/lz4-java-1.6.0.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-record-decoder/target/classes/
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-kafka/target/classes/
2022-10-28T10:37:47.897+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-kafka/target/plugin-discovery/
2022-10-28T10:37:47.900+0530	INFO	startup-1	io.trino.server.PluginManager	Installing io.trino.plugin.kafka.KafkaPlugin
2022-10-28T10:37:47.903+0530	INFO	startup-1	io.trino.server.PluginManager	Registering connector kafka
2022-10-28T10:37:47.904+0530	INFO	startup-1	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-kafka/pom.xml --
2022-10-28T10:37:47.904+0530	INFO	startup-1	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-druid/pom.xml --
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-core/1.12.172/aws-java-sdk-core-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-glue/1.12.172/aws-java-sdk-glue-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-kms/1.12.172/aws-java-sdk-kms-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-s3/1.12.172/aws-java-sdk-s3-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-sts/1.12.172/aws-java-sdk-sts-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/jmespath-java/1.12.172/jmespath-java-1.12.172.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.13.4/jackson-dataformat-cbor-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/luben/zstd-jni/1.5.0-1/zstd-jni-1.5.0-1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/stephenc/findbugs/findbugs-annotations/1.3.9-1/findbugs-annotations-1.3.9-1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/vertical-blank/sql-formatter/2.0.2/sql-formatter-2.0.2.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-jackson2/1.30.1/google-api-client-jackson2-1.30.1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-java6/1.30.1/google-api-client-java6-1.30.1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client/1.30.1/google-api-client-1.30.1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/apis/google-api-services-storage/v1-rev20190624-1.30.1/google-api-services-storage-v1-rev20190624-1.30.1.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auto/value/auto-value-annotations/1.6.5/auto-value-annotations-1.6.5.jar
2022-10-28T10:37:48.584+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcs-connector/hadoop2-2.0.0/gcs-connector-hadoop2-2.0.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcsio/2.0.0/gcsio-2.0.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util-hadoop/hadoop2-2.0.0/util-hadoop-hadoop2-2.0.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util/2.0.0/util-2.0.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/gson/gson/2.9.0/gson-2.9.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-log4j-backend/0.4/flogger-log4j-backend-0.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-system-backend/0.4/flogger-system-backend-0.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger/0.4/flogger-0.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/google-extensions/0.4/google-extensions-0.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-jackson2/1.30.1/google-http-client-jackson2-1.30.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client/1.30.1/google-http-client-1.30.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client-java6/1.30.1/google-oauth-client-java6-1.30.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client/1.30.1/google-oauth-client-1.30.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/calcite/calcite-core/1.21.0.152/calcite-core-1.21.0.152-shaded.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-common/2.0.77/coral-common-2.0.77.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-hive/2.0.77/coral-hive-2.0.77.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino-parser/2.0.77/coral-trino-parser-2.0.77.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino/2.0.77/coral-trino-2.0.77.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/qubole/rubix/rubix-presto-shaded/0.3.18/rubix-presto-shaded-0.3.18.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/aircompressor/0.21/aircompressor-0.21.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/event/218/event-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/grpc/grpc-context/1.19.0/grpc-context-1.19.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-api/0.21.0/opencensus-api-0.21.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.21.0/opencensus-contrib-http-util-0.21.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hadoop/hadoop-apache/3.2.0-16/hadoop-apache-3.2.0-16.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hive/hive-apache/3.1.2-20/hive-apache-3.1.2-20.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/orc/orc-protobuf/13/orc-protobuf-13.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/it/unimi/dsi/fastutil/8.3.0/fastutil-8.3.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/alluxio/alluxio-shaded-client/2.8.1/alluxio-shaded-client-2.8.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/ST4/4.0.4/ST4-4.0.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/client5/httpclient5/5.1/httpclient5-5.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/core5/httpcore5-h2/5.1.1/httpcore5-h2-5.1.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/core5/httpcore5/5.1.1/httpcore5-5.1.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-api/0.14.1/iceberg-api-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-bundled-guava/0.14.1/iceberg-bundled-guava-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-common/0.14.1/iceberg-common-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-core/0.14.1/iceberg-core-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-hive-metastore/0.14.1/iceberg-hive-metastore-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-orc/0.14.1/iceberg-orc-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-parquet/0.14.1/iceberg-parquet-0.14.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/orc/orc-core/1.7.5/orc-core-1.7.5-nohive.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/orc/orc-shims/1.7.5/orc-shims-1.7.5.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/thrift/libthrift/0.9.3-1/libthrift-0.9.3-1.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jetbrains/annotations/19.0.0/annotations-19.0.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/roaringbitmap/RoaringBitmap/0.9.30/RoaringBitmap-0.9.30.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/roaringbitmap/shims/0.9.30/shims-0.9.30.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/threeten/threeten-extra/1.5.0/threeten-extra-1.5.0.jar
2022-10-28T10:37:48.585+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/ion/ion-java/1.0.2/ion-java-1.0.2.jar
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-array/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-filesystem/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hadoop-toolkit/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hdfs/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-memory-context/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-orc/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-parquet/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-rcfile/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-hive/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-iceberg/target/classes/
2022-10-28T10:37:48.586+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-iceberg/target/plugin-discovery/
2022-10-28T10:37:48.591+0530	INFO	startup-2	io.trino.server.PluginManager	Installing io.trino.plugin.iceberg.IcebergPlugin
2022-10-28T10:37:48.596+0530	INFO	startup-2	io.trino.server.PluginManager	Registering connector iceberg
2022-10-28T10:37:48.596+0530	INFO	startup-2	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-iceberg/pom.xml --
2022-10-28T10:37:48.596+0530	INFO	startup-2	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-geospatial/pom.xml --
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/mariadb/jdbc/mariadb-java-client/3.0.5/mariadb-java-client-3.0.5.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-mariadb/target/classes/
2022-10-28T10:37:48.853+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-mariadb/target/plugin-discovery/
2022-10-28T10:37:48.857+0530	INFO	startup-7	io.trino.server.PluginManager	Installing io.trino.plugin.mariadb.MariaDbPlugin
2022-10-28T10:37:48.862+0530	INFO	startup-7	io.trino.server.PluginManager	Registering connector mariadb
2022-10-28T10:37:48.862+0530	INFO	startup-7	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-mariadb/pom.xml --
2022-10-28T10:37:48.862+0530	INFO	startup-7	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-http-event-listener/pom.xml --
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/leangen/geantyref/geantyref/1.3.13/geantyref-1.3.13.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.051+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-core/3.32.0/jdbi3-core-3.32.0.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-postgresql/target/classes/
2022-10-28T10:37:49.052+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-postgresql/target/plugin-discovery/
2022-10-28T10:37:49.058+0530	INFO	startup-6	io.trino.server.PluginManager	Installing io.trino.plugin.postgresql.PostgreSqlPlugin
2022-10-28T10:37:49.061+0530	INFO	startup-6	io.trino.server.PluginManager	Registering connector postgresql
2022-10-28T10:37:49.062+0530	INFO	startup-6	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-postgresql/pom.xml --
2022-10-28T10:37:49.062+0530	INFO	startup-6	io.trino.server.PluginManager	-- Loading plugin ../../plugin/trino-exchange-filesystem/pom.xml --
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/tpcds/tpcds/1.4/tpcds-1.4.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-tpcds/target/classes/
2022-10-28T10:37:49.384+0530	DEBUG	startup-8	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-tpcds/target/plugin-discovery/
2022-10-28T10:37:49.387+0530	INFO	startup-8	io.trino.server.PluginManager	Installing io.trino.plugin.tpcds.TpcdsPlugin
2022-10-28T10:37:49.391+0530	INFO	startup-8	io.trino.server.PluginManager	Registering connector tpcds
2022-10-28T10:37:49.391+0530	INFO	startup-8	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-tpcds/pom.xml --
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client/1.23.0/google-api-client-1.23.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/apis/google-api-services-sheets/v4-rev516-1.23.0/google-api-services-sheets-v4-rev516-1.23.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-jackson2/1.23.0/google-http-client-jackson2-1.23.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client/1.35.0/google-http-client-1.35.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client/1.31.0/google-oauth-client-1.31.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/grpc/grpc-context/1.22.1/grpc-context-1.22.1.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-api/0.24.0/opencensus-api-0.24.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.24.0/opencensus-contrib-http-util-0.24.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.12/httpclient-4.5.12.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-google-sheets/target/classes/
2022-10-28T10:37:49.895+0530	DEBUG	startup-4	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-google-sheets/target/plugin-discovery/
2022-10-28T10:37:49.898+0530	INFO	startup-4	io.trino.server.PluginManager	Installing io.trino.plugin.google.sheets.SheetsPlugin
2022-10-28T10:37:49.901+0530	INFO	startup-4	io.trino.server.PluginManager	Registering connector gsheets
2022-10-28T10:37:49.901+0530	INFO	startup-4	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-google-sheets/pom.xml --
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/protobuf/protobuf-java/3.6.1/protobuf-java-3.6.1.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:49.942+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/calcite/avatica/avatica-core/1.17.0/avatica-core-1.17.0.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/calcite/avatica/avatica-metrics/1.17.0/avatica-metrics-1.17.0.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.9/httpclient-4.5.9.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.11/httpcore-4.4.11.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-druid/target/classes/
2022-10-28T10:37:49.943+0530	DEBUG	startup-1	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-druid/target/plugin-discovery/
2022-10-28T10:37:49.946+0530	INFO	startup-1	io.trino.server.PluginManager	Installing io.trino.plugin.druid.DruidJdbcPlugin
2022-10-28T10:37:49.950+0530	INFO	startup-1	io.trino.server.PluginManager	Registering connector druid
2022-10-28T10:37:49.950+0530	INFO	startup-1	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-druid/pom.xml --
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/leangen/geantyref/geantyref/1.3.13/geantyref-1.3.13.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/mysql/mysql-connector-java/8.0.22/mysql-connector-java-8.0.22.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-core/3.32.0/jdbi3-core-3.32.0.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-mysql/target/classes/
2022-10-28T10:37:50.031+0530	DEBUG	startup-0	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-mysql/target/plugin-discovery/
2022-10-28T10:37:50.035+0530	INFO	startup-0	io.trino.server.PluginManager	Installing io.trino.plugin.mysql.MySqlPlugin
2022-10-28T10:37:50.039+0530	INFO	startup-0	io.trino.server.PluginManager	Registering connector mysql
2022-10-28T10:37:50.039+0530	INFO	startup-0	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-mysql/pom.xml --
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/esri/geometry/esri-geometry-api/2.2.4/esri-geometry-api-2.2.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/it/unimi/dsi/fastutil/8.3.0/fastutil-8.3.0.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/locationtech/jts/io/jts-io-common/1.16.1/jts-io-common-1.16.1.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/locationtech/jts/jts-core/1.16.1/jts-core-1.16.1.jar
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-array/target/classes/
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-geospatial-toolkit/target/classes/
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-geospatial/target/classes/
2022-10-28T10:37:50.550+0530	DEBUG	startup-2	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-geospatial/target/plugin-discovery/
2022-10-28T10:37:50.552+0530	INFO	startup-2	io.trino.server.PluginManager	Installing io.trino.plugin.geospatial.GeoPlugin
2022-10-28T10:37:50.556+0530	INFO	startup-2	io.trino.server.PluginManager	Registering type Geometry
2022-10-28T10:37:50.556+0530	INFO	startup-2	io.trino.server.PluginManager	Registering type BingTile
2022-10-28T10:37:50.556+0530	INFO	startup-2	io.trino.server.PluginManager	Registering type KdbTree
2022-10-28T10:37:50.556+0530	INFO	startup-2	io.trino.server.PluginManager	Registering type SphericalGeography
2022-10-28T10:37:50.560+0530	INFO	startup-2	io.trino.server.PluginManager	Registering functions from GeoPlugin
2022-10-28T10:37:50.591+0530	INFO	startup-2	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-geospatial/pom.xml --
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/slice/0.42/slice-0.42.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/openjdk/jol/jol-core/0.2/jol-core-0.2.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-http-event-listener/target/classes/
2022-10-28T10:37:50.738+0530	DEBUG	startup-7	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-http-event-listener/target/plugin-discovery/
2022-10-28T10:37:50.740+0530	INFO	startup-7	io.trino.server.PluginManager	Installing io.trino.plugin.httpquery.HttpEventListenerPlugin
2022-10-28T10:37:50.740+0530	INFO	startup-7	io.trino.server.PluginManager	Registering event listener http
2022-10-28T10:37:50.740+0530	INFO	startup-7	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-http-event-listener/pom.xml --
2022-10-28T10:37:51.180+0530	DEBUG	startup-3	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:51.180+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar
2022-10-28T10:37:51.180+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-core/1.12.172/aws-java-sdk-core-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-glue/1.12.172/aws-java-sdk-glue-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-kms/1.12.172/aws-java-sdk-kms-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-s3/1.12.172/aws-java-sdk-s3-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/aws-java-sdk-sts/1.12.172/aws-java-sdk-sts-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/amazonaws/jmespath-java/1.12.172/jmespath-java-1.12.172.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.13.4/jackson-dataformat-cbor-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/luben/zstd-jni/1.5.0-1/zstd-jni-1.5.0-1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/stephenc/findbugs/findbugs-annotations/1.3.9-1/findbugs-annotations-1.3.9-1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/vertical-blank/sql-formatter/2.0.2/sql-formatter-2.0.2.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-jackson2/1.30.1/google-api-client-jackson2-1.30.1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client-java6/1.30.1/google-api-client-java6-1.30.1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client/1.30.1/google-api-client-1.30.1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/apis/google-api-services-storage/v1-rev20190624-1.30.1/google-api-services-storage-v1-rev20190624-1.30.1.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auto/value/auto-value-annotations/1.6.5/auto-value-annotations-1.6.5.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcs-connector/hadoop2-2.0.0/gcs-connector-hadoop2-2.0.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/gcsio/2.0.0/gcsio-2.0.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util-hadoop/hadoop2-2.0.0/util-hadoop-hadoop2-2.0.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/bigdataoss/util/2.0.0/util-2.0.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/gson/gson/2.9.0/gson-2.9.0.jar
2022-10-28T10:37:51.181+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-log4j-backend/0.4/flogger-log4j-backend-0.4.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger-system-backend/0.4/flogger-system-backend-0.4.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/flogger/0.4/flogger-0.4.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/flogger/google-extensions/0.4/google-extensions-0.4.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-jackson2/1.30.1/google-http-client-jackson2-1.30.1.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client/1.30.1/google-http-client-1.30.1.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client-java6/1.30.1/google-oauth-client-java6-1.30.1.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/oauth-client/google-oauth-client/1.30.1/google-oauth-client-1.30.1.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/calcite/calcite-core/1.21.0.152/calcite-core-1.21.0.152-shaded.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-common/2.0.77/coral-common-2.0.77.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-hive/2.0.77/coral-hive-2.0.77.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino-parser/2.0.77/coral-trino-parser-2.0.77.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/linkedin/coral/coral-trino/2.0.77/coral-trino-2.0.77.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/qubole/rubix/rubix-presto-shaded/0.3.18/rubix-presto-shaded-0.3.18.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/aircompressor/0.21/aircompressor-0.21.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/event/218/event-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:51.182+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/grpc/grpc-context/1.19.0/grpc-context-1.19.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-api/0.21.0/opencensus-api-0.21.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.21.0/opencensus-contrib-http-util-0.21.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hadoop/hadoop-apache/3.2.0-16/hadoop-apache-3.2.0-16.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/hive/hive-apache/3.1.2-20/hive-apache-3.1.2-20.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/trino/orc/orc-protobuf/13/orc-protobuf-13.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/it/unimi/dsi/fastutil/8.3.0/fastutil-8.3.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/alluxio/alluxio-shaded-client/2.8.1/alluxio-shaded-client-2.8.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/ST4/4.0.4/ST4-4.0.4.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-api/0.14.1/iceberg-api-0.14.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/iceberg/iceberg-bundled-guava/0.14.1/iceberg-bundled-guava-0.14.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/thrift/libthrift/0.9.3-1/libthrift-0.9.3-1.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/roaringbitmap/RoaringBitmap/0.9.30/RoaringBitmap-0.9.30.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/roaringbitmap/shims/0.9.30/shims-0.9.30.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/ion/ion-java/1.0.2/ion-java-1.0.2.jar
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-array/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-filesystem/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hadoop-toolkit/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-hdfs/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-memory-context/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-orc/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-parquet/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-rcfile/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-hive/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-delta-lake/target/classes/
2022-10-28T10:37:51.183+0530	DEBUG	startup-3	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-delta-lake/target/plugin-discovery/
2022-10-28T10:37:51.187+0530	INFO	startup-3	io.trino.server.PluginManager	Installing io.trino.plugin.deltalake.DeltaLakePlugin
2022-10-28T10:37:51.191+0530	INFO	startup-3	io.trino.server.PluginManager	Registering connector delta-lake
2022-10-28T10:37:51.191+0530	INFO	startup-3	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-delta-lake/pom.xml --
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-core-http-netty/1.11.7/azure-core-http-netty-1.11.7.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-core/1.25.0/azure-core-1.25.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-identity/1.4.4/azure-identity-1.4.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-storage-blob-batch/12.11.4/azure-storage-blob-batch-12.11.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-storage-blob/12.14.4/azure-storage-blob-12.14.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-storage-common/12.14.3/azure-storage-common-12.14.3.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/azure/azure-storage-internal-avro/12.1.4/azure-storage-internal-avro-12.1.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.13.1/jackson-dataformat-xml-2.13.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/woodstox/woodstox-core/6.2.7/woodstox-core-6.2.7.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api-client/google-api-client/1.33.2/google-api-client-1.33.2.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api/api-common/2.1.5/api-common-2.1.5.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api/gax-httpjson/0.97.2/gax-httpjson-0.97.2.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api/gax/2.17.0/gax-2.17.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api/grpc/proto-google-common-protos/2.8.3/proto-google-common-protos-2.8.3.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/api/grpc/proto-google-iam-v1/1.2.6/proto-google-iam-v1-1.2.6.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/apis/google-api-services-storage/v1-rev20220210-1.32.1/google-api-services-storage-v1-rev20220210-1.32.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auth/google-auth-library-credentials/1.6.0/google-auth-library-credentials-1.6.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auth/google-auth-library-oauth2-http/1.6.0/google-auth-library-oauth2-http-1.6.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/auto/value/auto-value-annotations/1.9/auto-value-annotations-1.9.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/google-cloud-core-http/2.5.6/google-cloud-core-http-2.5.6.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/google-cloud-core/2.5.6/google-cloud-core-2.5.6.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/cloud/google-cloud-storage/2.5.1/google-cloud-storage-2.5.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/gson/gson/2.9.0/gson-2.9.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-apache-v2/1.41.4/google-http-client-apache-v2-1.41.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-appengine/1.41.4/google-http-client-appengine-1.41.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-gson/1.41.4/google-http-client-gson-1.41.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client-jackson2/1.41.4/google-http-client-jackson2-1.41.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/http-client/google-http-client/1.41.4/google-http-client-1.41.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/protobuf/protobuf-java-util/3.19.4/protobuf-java-util-3.19.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/microsoft/azure/msal4j-persistence-extension/1.1.0/msal4j-persistence-extension-1.1.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/microsoft/azure/msal4j/1.11.0/msal4j-1.11.0.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/nimbusds/content-type/2.1/content-type-2.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/nimbusds/lang-tag/1.5/lang-tag-1.5.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/nimbusds/nimbus-jose-jwt/9.14/nimbus-jose-jwt-9.14.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/nimbusds/oauth2-oidc-sdk/9.18/oauth2-oidc-sdk-9.18.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/typesafe/netty/netty-reactive-streams-http/2.0.5/netty-reactive-streams-http-2.0.5.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/typesafe/netty/netty-reactive-streams/2.0.5/netty-reactive-streams-2.0.5.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/grpc/grpc-context/1.44.1/grpc-context-1.44.1.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-buffer/4.1.72.Final/netty-buffer-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec-dns/4.1.72.Final/netty-codec-dns-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec-http/4.1.72.Final/netty-codec-http-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec-http2/4.1.72.Final/netty-codec-http2-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec-socks/4.1.72.Final/netty-codec-socks-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-codec/4.1.72.Final/netty-codec-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-common/4.1.72.Final/netty-common-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-handler-proxy/4.1.72.Final/netty-handler-proxy-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-handler/4.1.72.Final/netty-handler-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.72.Final/netty-resolver-dns-classes-macos-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.72.Final/netty-resolver-dns-native-macos-4.1.72.Final-osx-x86_64.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver-dns/4.1.72.Final/netty-resolver-dns-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-resolver/4.1.72.Final/netty-resolver-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-tcnative-boringssl-static/2.0.46.Final/netty-tcnative-boringssl-static-2.0.46.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-tcnative-classes/2.0.46.Final/netty-tcnative-classes-2.0.46.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.72.Final/netty-transport-classes-epoll-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-classes-kqueue/4.1.72.Final/netty-transport-classes-kqueue-4.1.72.Final.jar
2022-10-28T10:37:52.256+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-native-epoll/4.1.72.Final/netty-transport-native-epoll-4.1.72.Final-linux-x86_64.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-native-kqueue/4.1.72.Final/netty-transport-native-kqueue-4.1.72.Final-osx-x86_64.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.72.Final/netty-transport-native-unix-common-4.1.72.Final.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-transport/4.1.72.Final/netty-transport-4.1.72.Final.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-api/0.31.0/opencensus-api-0.31.0.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.31.0/opencensus-contrib-http-util-0.31.0.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.0.14/reactor-netty-core-1.0.14.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.0.14/reactor-netty-http-1.0.14.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/projectreactor/reactor-core/3.4.13/reactor-core-3.4.13.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/codehaus/woodstox/stax2-api/4.2.1/stax2-api-4.2.1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/reactivestreams/reactive-streams/1.0.3/reactive-streams-1.0.3.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/threeten/threetenbp/1.5.2/threetenbp-1.5.2.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/annotations/2.17.151/annotations-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/apache-client/2.17.151/apache-client-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/arns/2.17.151/arns-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/auth/2.17.151/auth-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/aws-core/2.17.151/aws-core-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/aws-query-protocol/2.17.151/aws-query-protocol-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/aws-xml-protocol/2.17.151/aws-xml-protocol-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/http-client-spi/2.17.151/http-client-spi-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/json-utils/2.17.151/json-utils-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/metrics-spi/2.17.151/metrics-spi-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/netty-nio-client/2.17.151/netty-nio-client-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/profiles/2.17.151/profiles-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/protocol-core/2.17.151/protocol-core-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/regions/2.17.151/regions-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/s3/2.17.151/s3-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/sdk-core/2.17.151/sdk-core-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/sts/2.17.151/sts-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/third-party-jackson-core/2.17.151/third-party-jackson-core-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/awssdk/utils/2.17.151/utils-2.17.151.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/software/amazon/eventstream/eventstream/1.0.1/eventstream-1.0.1.jar
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-exchange-filesystem/target/classes/
2022-10-28T10:37:52.257+0530	DEBUG	startup-6	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-exchange-filesystem/target/plugin-discovery/
2022-10-28T10:37:52.262+0530	INFO	startup-6	io.trino.server.PluginManager	Installing io.trino.plugin.exchange.filesystem.FileSystemExchangePlugin
2022-10-28T10:37:52.266+0530	INFO	startup-6	io.trino.server.PluginManager	Registering exchange manager filesystem
2022-10-28T10:37:52.266+0530	INFO	startup-6	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-exchange-filesystem/pom.xml --
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:52.669+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bytecode/1.4/bytecode-1.4.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-api/1.14/drift-api-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-client/1.14/drift-client-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-codec/1.14/drift-codec-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-protocol/1.14/drift-protocol-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-transport-netty/1.14/drift-transport-netty-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/drift/drift-transport-spi/1.14/drift-transport-spi-1.14.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/netty/netty-all/4.1.29.Final/netty-all-4.1.29.Final.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-analysis/9.2/asm-analysis-9.2.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-tree/9.2/asm-tree-9.2.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm-util/9.2/asm-util-9.2.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-thrift-api/target/classes/
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-thrift/target/classes/
2022-10-28T10:37:52.670+0530	DEBUG	startup-5	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-thrift/target/plugin-discovery/
2022-10-28T10:37:52.673+0530	INFO	startup-5	io.trino.server.PluginManager	Installing io.trino.plugin.thrift.ThriftPlugin
2022-10-28T10:37:52.675+0530	INFO	startup-5	io.trino.server.PluginManager	Registering connector trino-thrift
2022-10-28T10:37:52.676+0530	INFO	startup-5	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-thrift/pom.xml --
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	Classpath for plugin:
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4/jackson-databind-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.13.4/jackson-datatype-guava-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.13.4/jackson-datatype-joda-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.5/caffeine-3.0.5.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/errorprone/error_prone_annotations/2.15.0/error_prone_annotations-2.15.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/inject/guice/5.1.0/guice-5.1.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/com/microsoft/sqlserver/mssql-jdbc/10.2.0.jre11/mssql-jdbc-10.2.0.jre11.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/bootstrap/218/bootstrap-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/concurrent/218/concurrent-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/configuration/218/configuration-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/discovery/218/discovery-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/http-client/218/http-client-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/jmx/218/jmx-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/json/218/json-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log-manager/218/log-manager-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/log/218/log-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/node/218/node-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/parameternames/1.4/parameternames-1.4.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/security/218/security-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/stats/218/stats-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/trace-token/218/trace-token-218.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/airlift/units/1.6/units-1.6.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/io/leangen/geantyref/geantyref/1.3.13/geantyref-1.3.13.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/joda-time/joda-time/2.10.13/joda-time-2.10.13.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/bytebuddy/byte-buddy/1.12.13/byte-buddy-1.12.13.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/net/jodah/failsafe/2.4.0/failsafe-2.4.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/antlr/antlr4-runtime/4.11.1/antlr4-runtime-4.11.1.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/bval/bval-jsr/2.0.5/bval-jsr-2.0.5.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.1/log4j-to-slf4j-2.17.1.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/checkerframework/checker-qual/3.20.0/checker-qual-3.20.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-client/9.4.44.v20210927/http2-client-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-common/9.4.44.v20210927/http2-common-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-hpack/9.4.44.v20210927/http2-hpack-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/http2/http2-http-client-transport/9.4.44.v20210927/http2-http-client-transport-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-client/9.4.44.v20210927/jetty-alpn-client-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-alpn-java-client/9.4.44.v20210927/jetty-alpn-java-client-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-client/9.4.44.v20210927/jetty-client-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-http/9.4.44.v20210927/jetty-http-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-io/9.4.44.v20210927/jetty-io-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/eclipse/jetty/jetty-util/9.4.44.v20210927/jetty-util-9.4.44.v20210927.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/gaul/modernizer-maven-annotations/2.4.0/modernizer-maven-annotations-2.4.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/jdbi/jdbi3-core/3.32.0/jdbi3-core-3.32.0.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.36/log4j-over-slf4j-1.7.36.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/slf4j/slf4j-jdk14/1.7.36/slf4j-jdk14-1.7.36.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/.m2/repository/org/weakref/jmxutils/1.21/jmxutils-1.21.jar
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-collect/target/classes/
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-matching/target/classes/
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/lib/trino-plugin-toolkit/target/classes/
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-base-jdbc/target/classes/
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-sqlserver/target/classes/
2022-10-28T10:37:56.291+0530	DEBUG	startup-9	io.trino.server.PluginManager	    /Users/pramanathan/repos/trino/plugin/trino-sqlserver/target/plugin-discovery/
2022-10-28T10:37:56.296+0530	INFO	startup-9	io.trino.server.PluginManager	Installing io.trino.plugin.sqlserver.SqlServerPlugin
2022-10-28T10:37:56.299+0530	INFO	startup-9	io.trino.server.PluginManager	Registering connector sqlserver
2022-10-28T10:37:56.300+0530	INFO	startup-9	io.trino.server.PluginManager	-- Finished loading plugin ../../plugin/trino-sqlserver/pom.xml --
2022-10-28T10:37:56.300+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Loading catalog tpch --
2022-10-28T10:37:56.308+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Added catalog tpch using connector tpch --
2022-10-28T10:37:56.308+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Loading catalog tpcds --
2022-10-28T10:37:56.312+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Added catalog tpcds using connector tpcds --
2022-10-28T10:37:56.312+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Loading catalog iceberg --
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	PROPERTY                                                     DEFAULT                                           RUNTIME                                           DESCRIPTION
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.connect.max-retries                                 5                                                 5
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.connect.timeout                                     500.00ms                                          500.00ms
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.key-provider.cache-ttl                              30.00m                                            30.00m
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.replication                                         ----                                              ----                                              Hadoop FileSystem replication factor
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs-timeout                                             60.00s                                            60.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.domain-socket-path                                  ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.fs.cache.max-size                                       1000                                              1000                                              Hadoop FileSystem cache size
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.ipc-ping-interval                                   10.00s                                            10.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.fs.new-directory-permissions                            0777                                              0777                                              File system permissions for new directories
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.fs.new-file-inherit-ownership                           false                                             false                                             File system permissions for new directories
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.config.resources                                        []                                                []
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.hdfs.socks-proxy                                        ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.dfs.verify-checksum                                     true                                              true
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.hdfs.wire-encryption.enabled                            false                                             false                                             Should be turned on when HDFS wire encryption is enabled
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.hdfs.authentication.type                                NONE                                              NONE                                              HDFS authentication type
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.hdfs.impersonation.enabled                              false                                             false                                             Should Trino user be impersonated when communicating with HDFS
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	jmx.base-name                                                ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-recording-duration                            10.00m                                            10.00m
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-recording-path                                ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.replay-metastore-recording                              false                                             false
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.abfs-access-key                                   [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.endpoint                               [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.client-id                              [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.secret                                 [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.abfs-storage-account                              [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.adl-client-id                                     [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.adl-credential                                    [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.adl-proxy-host                                    ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.adl-refresh-url                                   [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.wasb-access-key                                   [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.azure.wasb-storage-account                              [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.gcs.json-key-file-path                                  ----                                              ----                                              JSON key file used to access Google Cloud Storage
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.gcs.use-access-token                                    false                                             false                                             Use client-provided OAuth token to access Google Cloud Storage
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-refresh-max-threads                           10                                                10
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-cache-maximum-size                            10000                                             10000
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-cache-ttl                                     0.00s                                             0.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-refresh-interval                              ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-cache.cache-partitions                        true                                              true
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.user-metastore-cache-maximum-size                       1000                                              1000
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.user-metastore-cache-ttl                                0.00s                                             0.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.uri                                           ----                                              [thrift://localhost:9083]                         Hive metastore URIs (comma separated)
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.username                                      ----                                              ----                                              Optional username for accessing the Hive metastore
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.authentication.type                           NONE                                              NONE                                              Thrift metastore authentication type
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.assume-canonical-partition-keys        false                                             false
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.backoff-scale-factor            2.0                                               2.0                                               Scale factor for metastore request retry delay
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.delegation-token.cache-maximum-size    1000                                              1000                                              Delegation token cache maximum size
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.delegation-token.cache-ttl             1.00h                                             1.00h                                             Time to live delegation token cache for metastore
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.delete-files-on-drop                   false                                             false                                             Delete files on drop in case the metastore doesn't do it
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.impersonation.enabled                  false                                             false                                             Should end user be impersonated when communicating with metastore
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.ssl.key-password                ----                                              ----                                              Password for the key store
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.ssl.key                         ----                                              ----                                              Path to the key store
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.max-backoff-delay               1.00s                                             1.00s                                             Maximum delay between metastore request retries
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.max-retries                     9                                                 9                                                 Maximum number of retry attempts for metastore requests
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.max-retry-time                  30.00s                                            30.00s                                            Total time limit for a metastore request to be retried
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.txn-lock-max-wait                      10.00m                                            10.00m                                            Maximum time to wait to acquire hive transaction lock
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore-timeout                                       10.00s                                            10.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.min-backoff-delay               1.00s                                             1.00s                                             Minimum delay between metastore request retries
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.socks-proxy                     ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.ssl.enabled                     false                                             false                                             Whether TLS security is enabled
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.ssl.trust-certificate-password  ----                                              ----                                              Password for the trust store
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.metastore.thrift.client.ssl.trust-certificate           ----                                              ----                                              Path to the trust store
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.bloom-filters.enabled                               false                                             false
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.lazy-read-small-ranges                              true                                              true                                              ORC read small disk ranges lazily
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.max-read-block-size                                 16MB                                              16MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.max-buffer-size                                     8MB                                               8MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.max-merge-distance                                  1MB                                               1MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.nested-lazy                                         true                                              true                                              ORC lazily read nested data
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.stream-buffer-size                                  8MB                                               8MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.tiny-stripe-threshold                               8MB                                               8MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.use-column-names                                    false                                             false                                             Access ORC columns using names from the file
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.default-bloom-filter-fpp                            0.05                                              0.05                                              ORC Bloom filter false positive probability
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.dictionary-max-memory                        16MB                                              16MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.max-compression-buffer-size                  256kB                                             256kB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.row-group-max-rows                           10000                                             10000
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.string-statistics-limit                      64B                                               64B
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-rows                              10000000                                          10000000
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-size                              64MB                                              64MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-min-size                              32MB                                              32MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.validation-mode                              BOTH                                              BOTH                                              Level of detail in ORC validation. Lower levels require more memory.
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.validation-percentage                        0.0                                               0.0                                               Percentage of ORC files to validate after write by re-reading the whole file
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.orc.writer.writer-identification                        TRINO                                             TRINO
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.ignore-statistics                                    false                                             false                                             Ignore statistics from Parquet to allow querying files with corrupted or incorrect statistics
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.max-buffer-size                                      8MB                                               8MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.max-merge-distance                                   1MB                                               1MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.max-read-block-size                                  16MB                                              16MB
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.use-column-index                                     true                                              true                                              Enable using Parquet column indexes
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.writer.batch-size                                    10000                                             10000                                             Maximum number of rows passed to the writer in each batch
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.writer.block-size                                    134217728B                                        134217728B
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.writer.page-size                                     1048576B                                          1048576B
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.optimized-writer.enabled                             false                                             false                                             Enable optimized Parquet writer
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	parquet.optimized-writer.validation-percentage               5.0                                               5.0                                               Percentage of parquet files to validate after write by re-reading the whole file
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.bookkeeper-port                                   8899                                              8899
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.location                                          ----                                              /Users/pramanathan/rubix-cache
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.ttl                                               7.00d                                             7.00d                                             Time files will be kept in cache prior to eviction
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.data-transfer-port                                8898                                              8898
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.disk-usage-percentage                             80                                                80                                                Percentage of disk space used for cached data
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.read-mode                                         ASYNC                                             ASYNC
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.start-server-on-coordinator                       false                                             true
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.cache.enabled                                           false                                             true                                              Experimental: Cache HDFS file segments to distributed local storage
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.pin-client-to-current-region                         false                                             false                                             Should the S3 client be pinned to the current EC2 region
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.requester-pays.enabled                               false                                             false
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.upload-acl-type                                      PRIVATE                                           PRIVATE                                           Canned ACL type for S3 uploads
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.aws-access-key                                       ----                                              ----
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.aws-secret-key                                       [REDACTED]                                        [REDACTED]
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.connect-timeout                                      5.00s                                             5.00s
2022-10-28T10:37:56.684+0530	INFO	main	Bootstrap	hive.s3.encryption-materials-provider                        ----                                              ----                                              Use a custom encryption materials provider for S3 data encryption
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.endpoint                                             ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.external-id                                          ----                                              ----                                              External ID for the IAM role trust policy when connecting to S3
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.iam-role                                             ----                                              ----                                              ARN of an IAM role to assume when connecting to S3
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.kms-key-id                                           ----                                              ----                                              Use an AWS KMS key for S3 data encryption
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.max-backoff-time                                     10.00m                                            10.00m
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.max-client-retries                                   5                                                 5
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.max-connections                                      500                                               500
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.max-error-retries                                    10                                                10
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.max-retry-time                                       10.00m                                            10.00m
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.multipart.min-file-size                              16MB                                              16MB                                              Minimum file size for an S3 multipart upload
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.multipart.min-part-size                              5MB                                               5MB                                               Minimum part size for an S3 multipart upload
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.non-proxy-hosts                                []                                                []
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.path-style-access                                    false                                             false                                             Use path-style access for all request to S3
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.preemptive-basic-auth                          false                                             false
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.host                                           ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.password                                       ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.port                                           -1                                                -1
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.protocol                                       HTTPS                                             HTTPS
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.proxy.username                                       ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.signer-class                                         ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.signer-type                                          ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.socket-timeout                                       5.00s                                             5.00s
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.sse.enabled                                          false                                             false                                             Enable S3 server side encryption
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.sse.kms-key-id                                       ----                                              ----                                              KMS Key ID to use for S3 server-side encryption with KMS-managed key
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.sse.type                                             S3                                                S3                                                Key management type for S3 server-side encryption (S3 or KMS)
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.ssl.enabled                                          true                                              true
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.staging-directory                                    /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  Temporary directory for staging files before uploading to S3
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.storage-class                                        STANDARD                                          STANDARD                                          AWS S3 storage class to use when writing the data
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.streaming.part-size                                  16MB                                              16MB                                              Part size for S3 streaming upload
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.streaming.enabled                                    true                                              true
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.sts.endpoint                                         ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.sts.region                                           ----                                              ----
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.user-agent-prefix                                                                                                                                        The user agent prefix to use for S3 calls
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.skip-glacier-objects                                 false                                             false
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3-file-system-type                                     TRINO                                             TRINO
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.colon-replacement                   ----                                              ----                                              Value used in place of colon for IAM role name in extra credentials
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.config-file                         ----                                              ----                                              JSON configuration file containing security mappings
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.json-pointer                                                                                                                            JSON pointer (RFC 6901) to mappings inside JSON config
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.kms-key-id-credential-name          ----                                              ----                                              Name of the extra credential used to provide KMS Key ID
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.refresh-period                      ----                                              ----                                              How often to refresh the security mapping configuration
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	hive.s3.security-mapping.iam-role-credential-name            ----                                              ----                                              Name of the extra credential used to provide IAM role
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.catalog.type                                         HIVE_METASTORE                                    HIVE_METASTORE
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.compression-codec                                    ZSTD                                              ZSTD
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.delete-schema-locations-fallback                     false                                             false                                             Whether schema locations should be deleted when Trino can't determine whether they contain external files.
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.dynamic-filtering.wait-timeout                       0.00s                                             0.00s                                             Duration to wait for completion of dynamic filters during split generation
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.expire_snapshots.min-retention                       7.00d                                             7.00d                                             Minimal retention period for expire_snapshot procedure
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.experimental.extended-statistics.enabled             false                                             false                                             Allow ANALYZE and use of extended statistics collected by it. Currently, the statistics are collected in Trino-specific format
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.file-format                                          ORC                                               ORC
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.format-version                                       2                                                 2                                                 Default Iceberg table format version
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.hive-catalog-name                                    ----                                              ----                                              Catalog to redirect to when a Hive table is referenced
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.materialized-views.storage-schema                    ----                                              ----                                              Schema for creating materialized views storage tables
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.max-partitions-per-writer                            100                                               100                                               Maximum number of partitions per writer
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.minimum-assigned-split-weight                        0.05                                              0.05                                              Minimum weight that a split can be assigned
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.projection-pushdown-enabled                          true                                              true                                              Read only required fields from a struct
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.remove_orphan_files.min-retention                    7.00d                                             7.00d                                             Minimal retention period for remove_orphan_files procedure
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.table-statistics-enabled                             true                                              true                                              Enable use of table statistics
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.target-max-file-size                                 1GB                                               1GB                                               Target maximum size of written files; the actual size may be larger
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.unique-table-location                                true                                              true                                              Use randomized, unique table locations
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.use-file-size-from-metadata                          true                                              true
2022-10-28T10:37:56.685+0530	INFO	main	Bootstrap	iceberg.security                                             ALLOW_ALL                                         ALLOW_ALL
2022-10-28T10:38:00.635+0530	INFO	main	com.qubole.rubix.bookkeeper.BookKeeper	total free space 792513MB, maximum size of cache 602309MB
2022-10-28T10:38:00.648+0530	INFO	main	com.qubole.rubix.bookkeeper.BookKeeperServer	Starting BookKeeperServer on port 8899
2022-10-28T10:38:00.663+0530	INFO	main	io.trino.plugin.hive.rubix.RubixInitializer	Rubix initialized successfully
2022-10-28T10:38:00.663+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle starting...
2022-10-28T10:38:00.663+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle started
2022-10-28T10:38:00.667+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Added catalog iceberg using connector iceberg --
2022-10-28T10:38:00.667+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Loading catalog lakehouse --
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	PROPERTY                                             DEFAULT                                           RUNTIME                                           DESCRIPTION
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.connect.max-retries                         5                                                 5
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.connect.timeout                             500.00ms                                          500.00ms
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.key-provider.cache-ttl                      30.00m                                            30.00m
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.replication                                 ----                                              ----                                              Hadoop FileSystem replication factor
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs-timeout                                     60.00s                                            60.00s
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.domain-socket-path                          ----                                              ----
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.fs.cache.max-size                               1000                                              1000                                              Hadoop FileSystem cache size
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.ipc-ping-interval                           10.00s                                            10.00s
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.fs.new-directory-permissions                    0777                                              0777                                              File system permissions for new directories
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.fs.new-file-inherit-ownership                   false                                             false                                             File system permissions for new directories
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.config.resources                                []                                                []
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.hdfs.socks-proxy                                ----                                              ----
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.dfs.verify-checksum                             true                                              true
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.hdfs.wire-encryption.enabled                    false                                             false                                             Should be turned on when HDFS wire encryption is enabled
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.hdfs.authentication.type                        NONE                                              NONE                                              HDFS authentication type
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.hdfs.impersonation.enabled                      false                                             false                                             Should Trino user be impersonated when communicating with HDFS
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	jmx.base-name                                        ----                                              ----
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.abfs-access-key                           [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.endpoint                       [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.client-id                      [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.secret                         [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.abfs-storage-account                      [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.adl-client-id                             [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.adl-credential                            [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.adl-proxy-host                            ----                                              ----
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.adl-refresh-url                           [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.wasb-access-key                           [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.azure.wasb-storage-account                      [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.gcs.json-key-file-path                          ----                                              ----                                              JSON key file used to access Google Cloud Storage
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.gcs.use-access-token                            false                                             false                                             Use client-provided OAuth token to access Google Cloud Storage
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.assume-canonical-partition-keys  false                                             false                                             Allow conversion of non-char types (eg BIGINT, timestamp) to canonical string formats
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-access-key                   ----                                              ----                                              Hive Glue metastore AWS access key
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-credentials-provider         ----                                              ----                                              Fully qualified name of the Java class to use for obtaining AWS credentials
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-secret-key                   [REDACTED]                                        [REDACTED]                                        Hive Glue metastore AWS secret key
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.catalogid                        ----                                              ----                                              Hive Glue metastore catalog id
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.default-warehouse-dir            ----                                              ----                                              Hive Glue metastore default warehouse directory
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.external-id                      ----                                              ----                                              External ID for the IAM role trust policy when connecting to Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.get-partition-threads            20                                                20                                                Number of threads for parallel partition fetches from Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.endpoint-url                     ----                                              ----                                              Glue API endpoint URL
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.region                           ----                                              us-west-2                                         AWS Region for Glue Data Catalog
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.iam-role                         ----                                              ----                                              ARN of an IAM role to assume when connecting to Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.max-connections                  30                                                30                                                Max number of concurrent connections to Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.max-error-retries                10                                                10                                                Maximum number of error retries for the Glue client
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.partitions-segments              5                                                 5                                                 Number of segments for partitioned Glue tables
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.pin-client-to-current-region     false                                             false                                             Should the Glue client be pinned to the current EC2 region
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.read-statistics-threads          5                                                 5                                                 Number of threads for parallel statistics reads from Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.metastore.glue.write-statistics-threads         5                                                 5                                                 Number of threads for parallel statistics writes to Glue
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.bloom-filters.enabled                       false                                             false
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.lazy-read-small-ranges                      true                                              true                                              ORC read small disk ranges lazily
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.max-read-block-size                         16MB                                              16MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.max-buffer-size                             8MB                                               8MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.max-merge-distance                          1MB                                               1MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.nested-lazy                                 true                                              true                                              ORC lazily read nested data
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.stream-buffer-size                          8MB                                               8MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.tiny-stripe-threshold                       8MB                                               8MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.use-column-names                            false                                             false                                             Access ORC columns using names from the file
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.default-bloom-filter-fpp                    0.05                                              0.05                                              ORC Bloom filter false positive probability
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.dictionary-max-memory                16MB                                              16MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.max-compression-buffer-size          256kB                                             256kB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.row-group-max-rows                   10000                                             10000
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.string-statistics-limit              64B                                               64B
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-rows                      10000000                                          10000000
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-size                      64MB                                              64MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-min-size                      32MB                                              32MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.validation-mode                      BOTH                                              BOTH                                              Level of detail in ORC validation. Lower levels require more memory.
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.validation-percentage                0.0                                               0.0                                               Percentage of ORC files to validate after write by re-reading the whole file
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.orc.writer.writer-identification                TRINO                                             TRINO
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.ignore-statistics                            false                                             false                                             Ignore statistics from Parquet to allow querying files with corrupted or incorrect statistics
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.max-buffer-size                              8MB                                               8MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.max-merge-distance                           1MB                                               1MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.max-read-block-size                          16MB                                              16MB
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.use-column-index                             true                                              true                                              Enable using Parquet column indexes
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.writer.batch-size                            10000                                             10000                                             Maximum number of rows passed to the writer in each batch
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.writer.block-size                            134217728B                                        134217728B
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.writer.page-size                             1048576B                                          1048576B
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.optimized-writer.enabled                     false                                             false                                             Enable optimized Parquet writer
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	parquet.optimized-writer.validation-percentage       5.0                                               5.0                                               Percentage of parquet files to validate after write by re-reading the whole file
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.cache.enabled                                   false                                             false                                             Experimental: Cache HDFS file segments to distributed local storage
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.pin-client-to-current-region                 false                                             false                                             Should the S3 client be pinned to the current EC2 region
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.requester-pays.enabled                       false                                             false
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.upload-acl-type                              PRIVATE                                           PRIVATE                                           Canned ACL type for S3 uploads
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.aws-access-key                               ----                                              ----
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.aws-secret-key                               [REDACTED]                                        [REDACTED]
2022-10-28T10:38:00.991+0530	INFO	main	Bootstrap	hive.s3.connect-timeout                              5.00s                                             5.00s
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.encryption-materials-provider                ----                                              ----                                              Use a custom encryption materials provider for S3 data encryption
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.endpoint                                     ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.external-id                                  ----                                              ----                                              External ID for the IAM role trust policy when connecting to S3
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.iam-role                                     ----                                              ----                                              ARN of an IAM role to assume when connecting to S3
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.kms-key-id                                   ----                                              ----                                              Use an AWS KMS key for S3 data encryption
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.max-backoff-time                             10.00m                                            10.00m
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.max-client-retries                           5                                                 5
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.max-connections                              500                                               500
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.max-error-retries                            10                                                10
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.max-retry-time                               10.00m                                            10.00m
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.multipart.min-file-size                      16MB                                              16MB                                              Minimum file size for an S3 multipart upload
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.multipart.min-part-size                      5MB                                               5MB                                               Minimum part size for an S3 multipart upload
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.non-proxy-hosts                        []                                                []
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.path-style-access                            false                                             false                                             Use path-style access for all request to S3
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.preemptive-basic-auth                  false                                             false
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.host                                   ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.password                               ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.port                                   -1                                                -1
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.protocol                               HTTPS                                             HTTPS
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.proxy.username                               ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.signer-class                                 ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.signer-type                                  ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.socket-timeout                               5.00s                                             5.00s
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.sse.enabled                                  false                                             false                                             Enable S3 server side encryption
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.sse.kms-key-id                               ----                                              ----                                              KMS Key ID to use for S3 server-side encryption with KMS-managed key
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.sse.type                                     S3                                                S3                                                Key management type for S3 server-side encryption (S3 or KMS)
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.ssl.enabled                                  true                                              true
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.staging-directory                            /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  Temporary directory for staging files before uploading to S3
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.storage-class                                STANDARD                                          STANDARD                                          AWS S3 storage class to use when writing the data
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.streaming.part-size                          16MB                                              16MB                                              Part size for S3 streaming upload
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.streaming.enabled                            true                                              true
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.sts.endpoint                                 ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.sts.region                                   ----                                              ----
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.user-agent-prefix                                                                                                                                The user agent prefix to use for S3 calls
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.skip-glacier-objects                         false                                             false
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3-file-system-type                             TRINO                                             TRINO
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.colon-replacement           ----                                              ----                                              Value used in place of colon for IAM role name in extra credentials
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.config-file                 ----                                              ----                                              JSON configuration file containing security mappings
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.json-pointer                                                                                                                    JSON pointer (RFC 6901) to mappings inside JSON config
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.kms-key-id-credential-name  ----                                              ----                                              Name of the extra credential used to provide KMS Key ID
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.refresh-period              ----                                              ----                                              How often to refresh the security mapping configuration
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	hive.s3.security-mapping.iam-role-credential-name    ----                                              ----                                              Name of the extra credential used to provide IAM role
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.catalog.type                                 HIVE_METASTORE                                    GLUE
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.compression-codec                            ZSTD                                              ZSTD
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.delete-schema-locations-fallback             false                                             false                                             Whether schema locations should be deleted when Trino can't determine whether they contain external files.
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.dynamic-filtering.wait-timeout               0.00s                                             0.00s                                             Duration to wait for completion of dynamic filters during split generation
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.expire_snapshots.min-retention               7.00d                                             7.00d                                             Minimal retention period for expire_snapshot procedure
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.experimental.extended-statistics.enabled     false                                             false                                             Allow ANALYZE and use of extended statistics collected by it. Currently, the statistics are collected in Trino-specific format
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.file-format                                  ORC                                               ORC
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.format-version                               2                                                 2                                                 Default Iceberg table format version
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.hive-catalog-name                            ----                                              ----                                              Catalog to redirect to when a Hive table is referenced
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.materialized-views.storage-schema            ----                                              ----                                              Schema for creating materialized views storage tables
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.max-partitions-per-writer                    100                                               100                                               Maximum number of partitions per writer
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.minimum-assigned-split-weight                0.05                                              0.05                                              Minimum weight that a split can be assigned
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.projection-pushdown-enabled                  true                                              true                                              Read only required fields from a struct
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.remove_orphan_files.min-retention            7.00d                                             7.00d                                             Minimal retention period for remove_orphan_files procedure
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.table-statistics-enabled                     true                                              true                                              Enable use of table statistics
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.target-max-file-size                         1GB                                               1GB                                               Target maximum size of written files; the actual size may be larger
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.unique-table-location                        true                                              true                                              Use randomized, unique table locations
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.use-file-size-from-metadata                  true                                              true
2022-10-28T10:38:00.992+0530	INFO	main	Bootstrap	iceberg.security                                     ALLOW_ALL                                         ALLOW_ALL
2022-10-28T10:38:02.100+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle starting...
2022-10-28T10:38:02.100+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle started
2022-10-28T10:38:02.105+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Added catalog lakehouse using connector iceberg --
2022-10-28T10:38:02.105+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Loading catalog lakehouseview --
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	PROPERTY                                                         DEFAULT                                           RUNTIME                                           DESCRIPTION
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.connect.max-retries                                     5                                                 5
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.connect.timeout                                         500.00ms                                          500.00ms
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.key-provider.cache-ttl                                  30.00m                                            30.00m
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.replication                                             ----                                              ----                                              Hadoop FileSystem replication factor
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs-timeout                                                 60.00s                                            60.00s
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.domain-socket-path                                      ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.fs.cache.max-size                                           1000                                              1000                                              Hadoop FileSystem cache size
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.ipc-ping-interval                                       10.00s                                            10.00s
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.fs.new-directory-permissions                                0777                                              0777                                              File system permissions for new directories
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.fs.new-file-inherit-ownership                               false                                             false                                             File system permissions for new directories
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.config.resources                                            []                                                []
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hdfs.socks-proxy                                            ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dfs.verify-checksum                                         true                                              true
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hdfs.wire-encryption.enabled                                false                                             false                                             Should be turned on when HDFS wire encryption is enabled
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hdfs.authentication.type                                    NONE                                              NONE                                              HDFS authentication type
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hdfs.impersonation.enabled                                  false                                             false                                             Should Trino user be impersonated when communicating with HDFS
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	jmx.base-name                                                    ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.allow-register-partition-procedure                          false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.auto-purge                                                  false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.bucket-execution                                            true                                              true                                              Enable bucket-aware execution: only use a single worker per bucket
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.collect-column-statistics-on-write                          true                                              true                                              Enables automatic column level statistics collection on write
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.create-empty-bucket-files                                   false                                             false                                             Create empty files for buckets that have no data
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.non-managed-table-creates-enabled                           true                                              true                                              Enable non-managed (external) table creates
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.delegate-transactional-managed-table-location-to-metastore  false                                             false                                             When transactional, managed table is created via Trino the location will not be set in request sent to HMS and location will be determined by metastore; if this value is set to true, CREATE TABLE AS queries are not supported.
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.delete-schema-locations-fallback                            false                                             false                                             Whether schema locations should be deleted when Trino can't determine whether they contain external files.
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.delta-lake-catalog-name                                     ----                                              ----                                              Catalog to redirect to when a Delta Lake table is referenced
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.domain-compaction-threshold                                 100                                               100                                               Maximum ranges to allow in a tuple domain without compacting it
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.dynamic-filtering.wait-timeout                              0.00m                                             0.00m                                             Duration to wait for completion of dynamic filters during split generation
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.file-status-cache-expire-time                               1.00m                                             1.00m
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.file-status-cache-size                                      1000000                                           1000000
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.file-status-cache-tables                                    []                                                []
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.force-local-scheduling                                      false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.compression-codec                                           GZIP                                              GZIP
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.storage-format                                              ORC                                               ORC
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.transaction-heartbeat-interval                              ----                                              ----                                              Interval after which heartbeat is sent for open Hive transaction
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.transaction-heartbeat-threads                               5                                                 5                                                 Number of threads to run in the Hive transaction heartbeat service
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hive-views.run-as-invoker                                   false                                             false                                             Execute Hive views with permissions of invoker
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.iceberg-catalog-name                                        ----                                              ----                                              The catalog to redirect iceberg tables to
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.ignore-absent-partitions                                    false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.ignore-corrupted-statistics                                 false                                             false                                             Ignore corrupted statistics rather than failing
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.immutable-partitions                                        false                                             false                                             Can new data be inserted into existing partitions or existing unpartitioned tables
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.insert-existing-partitions-behavior                         APPEND                                            APPEND                                            Default value for insert existing partitions behavior
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hive-views.legacy-translation                               false                                             false                                             Use legacy Hive view translation mechanism
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-concurrent-file-renames                                 20                                                20
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-concurrent-metastore-drops                              20                                                20
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-concurrent-metastore-updates                            20                                                20
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-initial-split-size                                      32MB                                              32MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-initial-splits                                          200                                               200
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-open-sort-files                                         50                                                50                                                Maximum number of writer temporary files to read in one pass
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-outstanding-splits                                      1000                                              1000                                              Target number of buffered splits for each table scan in a query, before the scheduler tries to pause itself
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-outstanding-splits-size                                 256MB                                             256MB                                             Maximum amount of memory allowed for split buffering for each table scan in a query, before the query is failed
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.partition-batch-size.max                          100                                               100
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-partitions-per-scan                                     100000                                            100000                                            Maximum allowed partitions for a single table scan
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-partitions-per-writers                                  100                                               100                                               Maximum number of partitions per writer
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-split-iterator-threads                                  1000                                              1000
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-split-size                                              64MB                                              64MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.max-splits-per-second                                       ----                                              ----                                              Throttles the maximum number of splits that can be assigned to tasks per second
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.partition-batch-size.min                          10                                                10
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.minimum-assigned-split-weight                               0.05                                              0.05                                              Minimum weight that a split can be assigned when size based split weights are enabled
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.optimize-mismatched-bucket-count                            false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.optimize-symlink-listing                                    true                                              true                                              Optimize listing for SymlinkTextFormat tables with files in a single directory
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.time-zone                                               Asia/Kolkata                                      Asia/Kolkata                                      Time zone for legacy ORC files that do not contain a time zone
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.parallel-partitioned-bucketed-writes                        true                                              true                                              Improve parallelism of partitioned and bucketed table writes
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.parquet.time-zone                                           Asia/Kolkata                                      Asia/Kolkata                                      Time zone for Parquet read and write
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.partition-projection-enabled                                false                                             false                                             Enables AWS Athena partition projection
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.partition-statistics-sample-size                            100                                               100                                               Maximum sample size of the partitions column statistics
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.per-transaction-file-status-cache-maximum-size              1000000                                           1000000                                           Maximum number of file statuses cached by transactional file status cache
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.per-transaction-metastore-cache-maximum-size                1000                                              1000
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.projection-pushdown-enabled                                 true                                              true                                              Projection pushdown into hive is enabled through applyProjection
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.propagate-table-scan-sorting-properties                     false                                             false                                             Use sorted table layout to generate more efficient execution plans. May lead to incorrect results if files are not sorted as per table definition.
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.query-partition-filter-required                             false                                             false                                             Require filter on at least one partition column
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.query-partition-filter-required-schemas                     []                                                []                                                List of schemas for which filter on partition column is enforced
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.rcfile.time-zone                                            Asia/Kolkata                                      Asia/Kolkata                                      Time zone for RCFile binary read and write
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.rcfile.writer.validate                                      false                                             false                                             Validate RCFile after write by re-reading the whole file
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.recursive-directories                                       false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.respect-table-format                                        true                                              true                                              Should new partitions be written using the existing table format or the default Trino format
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.s3select-pushdown.enabled                                   false                                             false                                             Enable query pushdown to AWS S3 Select service
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.s3select-pushdown.max-connections                           500                                               500
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.single-statement-writes                                     false                                             false                                             Require transaction to be in auto-commit mode for writes
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.size-based-split-weights-enabled                            true                                              true
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.skip-deletion-for-alter                                     false                                             false                                             Skip deletion of old partition data when a partition is deleted and then inserted in the same transaction
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.skip-target-cleanup-on-rollback                             false                                             false                                             Skip deletion of target directories when a metastore operation fails
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.sorted-writing                                              true                                              true                                              Enable writing to bucketed sorted tables
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.split-loader-concurrency                                    64                                                64
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.table-statistics-enabled                                    true                                              true                                              Enable use of table statistics
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.target-max-file-size                                        1GB                                               1GB                                               Target maximum size of written files; the actual size may be larger
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.temporary-staging-directory-enabled                         true                                              true                                              Should use (if possible) temporary staging directory for write operations
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.temporary-staging-directory-path                            /tmp/presto-${USER}                               /tmp/presto-${USER}                               Location of temporary staging directory for write operations. Use ${USER} placeholder to use different location for each user.
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.text.max-line-length                                        100MB                                             100MB                                             Maximum line length for text files
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.timestamp-precision                                         MILLISECONDS                                      MILLISECONDS                                      Precision used to represent timestamps
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hive-views.enabled                                          false                                             false                                             Experimental: Allow translation of Hive views into Trino views
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.parquet.use-column-names                                    true                                              true                                              Access Parquet columns using names from the file
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.validate-bucketing                                          true                                              true                                              Verify that data is bucketed correctly when reading
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.write-validation-threads                                    16                                                16                                                Number of threads used for verifying data after a write
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.writer-sort-buffer-size                                     64MB                                              64MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.non-managed-table-writes-enabled                            false                                             false                                             Enable writes to non-managed (external) tables
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-recording-duration                                10.00m                                            10.00m
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-recording-path                                    ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.replay-metastore-recording                                  false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.abfs-access-key                                       [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.endpoint                                   [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.client-id                                  [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.abfs.oauth.secret                                     [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.abfs-storage-account                                  [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.adl-client-id                                         [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.adl-credential                                        [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.adl-proxy-host                                        ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.adl-refresh-url                                       [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.wasb-access-key                                       [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.azure.wasb-storage-account                                  [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.gcs.json-key-file-path                                      ----                                              ----                                              JSON key file used to access Google Cloud Storage
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.gcs.use-access-token                                        false                                             false                                             Use client-provided OAuth token to access Google Cloud Storage
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.hide-delta-lake-tables                                      false                                             false                                             Hide Delta Lake tables in table listings
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore                                                   thrift                                            glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-refresh-max-threads                               10                                                10
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-cache-maximum-size                                10000                                             10000
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-cache-ttl                                         0.00s                                             0.00s
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-refresh-interval                                  ----                                              ----
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore-cache.cache-partitions                            true                                              true
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.user-metastore-cache-maximum-size                           1000                                              1000
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.user-metastore-cache-ttl                                    0.00s                                             0.00s
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.assume-canonical-partition-keys              false                                             false                                             Allow conversion of non-char types (eg BIGINT, timestamp) to canonical string formats
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-access-key                               ----                                              ----                                              Hive Glue metastore AWS access key
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-credentials-provider                     ----                                              ----                                              Fully qualified name of the Java class to use for obtaining AWS credentials
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.aws-secret-key                               [REDACTED]                                        [REDACTED]                                        Hive Glue metastore AWS secret key
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.catalogid                                    ----                                              ----                                              Hive Glue metastore catalog id
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.default-warehouse-dir                        ----                                              ----                                              Hive Glue metastore default warehouse directory
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.external-id                                  ----                                              ----                                              External ID for the IAM role trust policy when connecting to Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.get-partition-threads                        20                                                20                                                Number of threads for parallel partition fetches from Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.endpoint-url                                 ----                                              ----                                              Glue API endpoint URL
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.region                                       ----                                              us-west-2                                         AWS Region for Glue Data Catalog
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.iam-role                                     ----                                              ----                                              ARN of an IAM role to assume when connecting to Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.max-connections                              30                                                30                                                Max number of concurrent connections to Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.max-error-retries                            10                                                10                                                Maximum number of error retries for the Glue client
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.partitions-segments                          5                                                 5                                                 Number of segments for partitioned Glue tables
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.pin-client-to-current-region                 false                                             false                                             Should the Glue client be pinned to the current EC2 region
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.read-statistics-threads                      5                                                 5                                                 Number of threads for parallel statistics reads from Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.metastore.glue.write-statistics-threads                     5                                                 5                                                 Number of threads for parallel statistics writes to Glue
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.bloom-filters.enabled                                   false                                             false
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.lazy-read-small-ranges                                  true                                              true                                              ORC read small disk ranges lazily
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.max-read-block-size                                     16MB                                              16MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.max-buffer-size                                         8MB                                               8MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.max-merge-distance                                      1MB                                               1MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.nested-lazy                                             true                                              true                                              ORC lazily read nested data
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.stream-buffer-size                                      8MB                                               8MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.tiny-stripe-threshold                                   8MB                                               8MB
2022-10-28T10:38:02.498+0530	INFO	main	Bootstrap	hive.orc.use-column-names                                        false                                             false                                             Access ORC columns using names from the file
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.default-bloom-filter-fpp                                0.05                                              0.05                                              ORC Bloom filter false positive probability
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.dictionary-max-memory                            16MB                                              16MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.max-compression-buffer-size                      256kB                                             256kB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.row-group-max-rows                               10000                                             10000
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.string-statistics-limit                          64B                                               64B
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-rows                                  10000000                                          10000000
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-max-size                                  64MB                                              64MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.stripe-min-size                                  32MB                                              32MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.validation-mode                                  BOTH                                              BOTH                                              Level of detail in ORC validation. Lower levels require more memory.
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.validation-percentage                            0.0                                               0.0                                               Percentage of ORC files to validate after write by re-reading the whole file
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.orc.writer.writer-identification                            TRINO                                             TRINO
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.ignore-statistics                                        false                                             false                                             Ignore statistics from Parquet to allow querying files with corrupted or incorrect statistics
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.max-buffer-size                                          8MB                                               8MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.max-merge-distance                                       1MB                                               1MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.max-read-block-size                                      16MB                                              16MB
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.use-column-index                                         true                                              true                                              Enable using Parquet column indexes
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.writer.batch-size                                        10000                                             10000                                             Maximum number of rows passed to the writer in each batch
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.writer.block-size                                        134217728B                                        134217728B
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.writer.page-size                                         1048576B                                          1048576B
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.optimized-writer.enabled                                 false                                             false                                             Enable optimized Parquet writer
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	parquet.optimized-writer.validation-percentage                   5.0                                               5.0                                               Percentage of parquet files to validate after write by re-reading the whole file
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.cache.enabled                                               false                                             false                                             Experimental: Cache HDFS file segments to distributed local storage
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.pin-client-to-current-region                             false                                             false                                             Should the S3 client be pinned to the current EC2 region
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.requester-pays.enabled                                   false                                             false
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.upload-acl-type                                          PRIVATE                                           PRIVATE                                           Canned ACL type for S3 uploads
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.aws-access-key                                           ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.aws-secret-key                                           [REDACTED]                                        [REDACTED]
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.connect-timeout                                          5.00s                                             5.00s
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.encryption-materials-provider                            ----                                              ----                                              Use a custom encryption materials provider for S3 data encryption
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.endpoint                                                 ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.external-id                                              ----                                              ----                                              External ID for the IAM role trust policy when connecting to S3
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.iam-role                                                 ----                                              ----                                              ARN of an IAM role to assume when connecting to S3
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.kms-key-id                                               ----                                              ----                                              Use an AWS KMS key for S3 data encryption
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.max-backoff-time                                         10.00m                                            10.00m
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.max-client-retries                                       5                                                 5
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.max-connections                                          500                                               500
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.max-error-retries                                        10                                                10
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.max-retry-time                                           10.00m                                            10.00m
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.multipart.min-file-size                                  16MB                                              16MB                                              Minimum file size for an S3 multipart upload
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.multipart.min-part-size                                  5MB                                               5MB                                               Minimum part size for an S3 multipart upload
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.non-proxy-hosts                                    []                                                []
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.path-style-access                                        false                                             false                                             Use path-style access for all request to S3
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.preemptive-basic-auth                              false                                             false
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.host                                               ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.password                                           ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.port                                               -1                                                -1
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.protocol                                           HTTPS                                             HTTPS
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.proxy.username                                           ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.signer-class                                             ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.signer-type                                              ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.socket-timeout                                           5.00s                                             5.00s
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.sse.enabled                                              false                                             false                                             Enable S3 server side encryption
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.sse.kms-key-id                                           ----                                              ----                                              KMS Key ID to use for S3 server-side encryption with KMS-managed key
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.sse.type                                                 S3                                                S3                                                Key management type for S3 server-side encryption (S3 or KMS)
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.ssl.enabled                                              true                                              true
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.staging-directory                                        /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  /var/folders/j4/9j5wn0vd14qfdpbs5mh6pfw40000gp/T  Temporary directory for staging files before uploading to S3
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.storage-class                                            STANDARD                                          STANDARD                                          AWS S3 storage class to use when writing the data
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.streaming.part-size                                      16MB                                              16MB                                              Part size for S3 streaming upload
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.streaming.enabled                                        true                                              true
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.sts.endpoint                                             ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.sts.region                                               ----                                              ----
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.user-agent-prefix                                                                                                                                            The user agent prefix to use for S3 calls
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.skip-glacier-objects                                     false                                             false
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3-file-system-type                                         TRINO                                             TRINO
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.colon-replacement                       ----                                              ----                                              Value used in place of colon for IAM role name in extra credentials
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.config-file                             ----                                              ----                                              JSON configuration file containing security mappings
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.json-pointer                                                                                                                                JSON pointer (RFC 6901) to mappings inside JSON config
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.kms-key-id-credential-name              ----                                              ----                                              Name of the extra credential used to provide KMS Key ID
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.refresh-period                          ----                                              ----                                              How often to refresh the security mapping configuration
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.s3.security-mapping.iam-role-credential-name                ----                                              ----                                              Name of the extra credential used to provide IAM role
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-add-column                                            false                                             false                                             Allow Hive connector to add column
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-comment-column                                        false                                             false                                             Allow Hive connector to set comment for a column
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-comment-table                                         false                                             false                                             Allow Hive connector to set comment for a table
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-drop-column                                           false                                             false                                             Allow Hive connector to drop column
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-drop-table                                            false                                             false                                             Allow Hive connector to drop table
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-rename-column                                         false                                             false                                             Allow Hive connector to rename column
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.allow-rename-table                                          false                                             false                                             Allow Hive connector to rename table
2022-10-28T10:38:02.499+0530	INFO	main	Bootstrap	hive.security                                                    legacy                                            legacy
2022-10-28T10:38:03.412+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle starting...
2022-10-28T10:38:03.412+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle started
2022-10-28T10:38:03.418+0530	INFO	main	io.trino.connector.StaticCatalogManager	-- Added catalog lakehouseview using connector hive --
2022-10-28T10:38:03.420+0530	INFO	main	io.trino.security.AccessControlManager	-- Loading system access control etc/access-control.properties --
2022-10-28T10:38:03.421+0530	INFO	main	io.trino.security.AccessControlManager	-- Loaded system access control default --
2022-10-28T10:38:03.421+0530	INFO	main	io.trino.exchange.ExchangeManagerRegistry	-- Loading exchange manager filesystem --
2022-10-28T10:38:03.577+0530	INFO	main	Bootstrap	PROPERTY                                 DEFAULT  RUNTIME                                           DESCRIPTION
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	jmx.base-name                            ----     ----
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.base-directories                []       [/tmp/trino-local-file-system-exchange-manager/]  List of base directories separated by commas
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.encryption-enabled              true     true
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.file-listing-parallelism        50       50                                                Max parallelism of file listing calls when enumerating spooling files. The actual parallelism will depend on implementation
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.sink-buffer-pool-min-size       10       10
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.sink-buffers-per-partition      2        2
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.sink-max-file-size              1GB      1GB                                               Max size of files written by exchange sinks
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.source-concurrent-readers       4        4
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.source-handle-target-data-size  256MB    256MB                                             Target size of the data referenced by a single source handle
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.max-output-partition-count      50       50
2022-10-28T10:38:03.578+0530	INFO	main	Bootstrap	exchange.max-page-storage-size           16MB     16MB                                              Max storage size of a page written to a sink, including the page itself and its size represented as an int
2022-10-28T10:38:03.644+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle starting...
2022-10-28T10:38:03.644+0530	INFO	main	io.airlift.bootstrap.LifeCycleManager	Life cycle started
2022-10-28T10:38:03.644+0530	INFO	main	io.trino.exchange.ExchangeManagerRegistry	-- Loaded exchange manager filesystem --
2022-10-28T10:38:03.662+0530	INFO	main	io.trino.server.Server	======== SERVER STARTED ========
2022-10-28T10:39:37.912+0530	DEBUG	dispatcher-query-0	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 1.95ms
2022-10-28T10:39:37.933+0530	DEBUG	dispatcher-query-0	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 717.08us
2022-10-28T10:39:37.949+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050937_00000_2ymdz is QUEUED
2022-10-28T10:39:37.952+0530	INFO	Query-20221028_050937_00000_2ymdz-7030	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:39:37.956+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_050937_00000_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:39:37.958+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_050937_00000_2ymdz is FAILED
2022-10-28T10:39:37.958+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050937_00000_2ymdz failed
io.trino.spi.TrinoException: line 1:1: Catalog must be specified when session catalog is not set
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:48)
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:43)
	at io.trino.metadata.MetadataUtil.createCatalogSchemaName(MetadataUtil.java:130)
	at io.trino.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowTables(ShowQueriesRewrite.java:268)
	at io.trino.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowTables(ShowQueriesRewrite.java:216)
	at io.trino.sql.tree.ShowTables.accept(ShowTables.java:72)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.rewrite.ShowQueriesRewrite.rewrite(ShowQueriesRewrite.java:213)
	at io.trino.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:53)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:76)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:71)
	at io.trino.execution.SqlQueryExecution.analyze(SqlQueryExecution.java:266)
	at io.trino.execution.SqlQueryExecution.<init>(SqlQueryExecution.java:203)
	at io.trino.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:829)
	at io.trino.dispatcher.LocalDispatchQueryFactory.lambda$createDispatchQuery$0(LocalDispatchQueryFactory.java:133)
	at io.trino.$gen.Trino_dev____20221028_050721_2.call(Unknown Source)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


2022-10-28T10:39:37.961+0530	INFO	dispatcher-query-2	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_050937_00000_2ymdz :: FAILED (MISSING_CATALOG_NAME) :: elapsed 9ms :: planning 9ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2022-10-28T10:39:37.947+05:30 :: end 2022-10-28T10:39:37.956+05:30
2022-10-28T10:39:45.173+0530	DEBUG	dispatcher-query-4	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 28.21us
2022-10-28T10:39:45.173+0530	DEBUG	dispatcher-query-4	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 14.75us
2022-10-28T10:39:45.174+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_050945_00001_2ymdz is QUEUED
2022-10-28T10:39:45.174+0530	INFO	Query-20221028_050945_00001_2ymdz-7030	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:39:45.175+0530	DEBUG	dispatcher-query-5	io.trino.execution.QueryStateMachine	Query 20221028_050945_00001_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:39:45.176+0530	DEBUG	Query-20221028_050945_00001_2ymdz-7030	io.trino.security.AccessControl	Invocation of checkCanShowTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050945_00001_2ymdz}, schema=tpcds.default) succeeded in 977.38us
2022-10-28T10:39:45.278+0530	DEBUG	dispatcher-query-5	io.trino.execution.QueryStateMachine	Query 20221028_050945_00001_2ymdz is FAILED
2022-10-28T10:39:45.278+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050945_00001_2ymdz failed
io.trino.spi.TrinoException: line 1:1: Schema 'default' does not exist
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:48)
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:43)
	at io.trino.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowTables(ShowQueriesRewrite.java:277)
	at io.trino.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowTables(ShowQueriesRewrite.java:216)
	at io.trino.sql.tree.ShowTables.accept(ShowTables.java:72)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.rewrite.ShowQueriesRewrite.rewrite(ShowQueriesRewrite.java:213)
	at io.trino.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:53)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:76)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:71)
	at io.trino.execution.SqlQueryExecution.analyze(SqlQueryExecution.java:266)
	at io.trino.execution.SqlQueryExecution.<init>(SqlQueryExecution.java:203)
	at io.trino.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:829)
	at io.trino.dispatcher.LocalDispatchQueryFactory.lambda$createDispatchQuery$0(LocalDispatchQueryFactory.java:133)
	at io.trino.$gen.Trino_dev____20221028_050721_2.call(Unknown Source)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


2022-10-28T10:39:45.278+0530	INFO	dispatcher-query-5	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_050945_00001_2ymdz :: FAILED (SCHEMA_NOT_FOUND) :: elapsed 103ms :: planning 103ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2022-10-28T10:39:45.174+05:30 :: end 2022-10-28T10:39:45.277+05:30
2022-10-28T10:39:55.499+0530	DEBUG	dispatcher-query-0	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 76.00us
2022-10-28T10:39:55.500+0530	DEBUG	dispatcher-query-0	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 21.58us
2022-10-28T10:39:55.507+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is QUEUED
2022-10-28T10:39:55.508+0530	INFO	Query-20221028_050955_00002_2ymdz-7034	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:39:55.508+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:39:55.509+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7034	io.trino.security.AccessControl	Invocation of checkCanShowSchemas(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, catalogName='tpcds') succeeded in 660.54us
2022-10-28T10:39:55.535+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7034	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, tableName=tpcds.information_schema.schemata, columnName='catalog_name', type=varchar) succeeded in 480.83us
2022-10-28T10:39:55.535+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7034	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, tableName=tpcds.information_schema.schemata, columnName='schema_name', type=varchar) succeeded in 13.29us
2022-10-28T10:39:55.535+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7034	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, tableName=tpcds.information_schema.schemata) succeeded in 78.79us
2022-10-28T10:39:55.554+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7034	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, tableName=tpcds.information_schema.schemata, columnNames=[schema_name]) succeeded in 241.75us
2022-10-28T10:39:55.557+0530	INFO	Query-20221028_050955_00002_2ymdz-7034	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:39:55.558+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is DISPATCHING
2022-10-28T10:39:55.559+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is PLANNING
2022-10-28T10:39:55.605+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Project[]
   │   Layout: [catalog_name:varchar, schema_name:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [catalog_name:varchar, schema_name:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [catalog_name:varchar, schema_name:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [schema_name ASC NULLS LAST]]
            │   Layout: [catalog_name:varchar, schema_name:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [catalog_name:varchar, schema_name:varchar]
               │   Estimates: 
               └─ ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                      Layout: [catalog_name:varchar, schema_name:varchar]
                      Estimates: 
                      catalog_name := catalog_name
                      schema_name := schema_name

2022-10-28T10:39:55.621+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Project[]
   │   Layout: [catalog_name:varchar, schema_name:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [catalog_name:varchar, schema_name:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [catalog_name:varchar, schema_name:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [schema_name ASC NULLS LAST]]
            │   Layout: [catalog_name:varchar, schema_name:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [catalog_name:varchar, schema_name:varchar]
               │   Estimates: 
               └─ ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                      Layout: [catalog_name:varchar, schema_name:varchar]
                      Estimates: 
                      catalog_name := catalog_name
                      schema_name := schema_name

2022-10-28T10:39:55.623+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Project[]
   │   Layout: [catalog_name:varchar, schema_name:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [catalog_name:varchar, schema_name:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [catalog_name:varchar, schema_name:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [schema_name ASC NULLS LAST]]
            │   Layout: [catalog_name:varchar, schema_name:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [catalog_name:varchar, schema_name:varchar]
               │   Estimates: 
               └─ ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                      Layout: [catalog_name:varchar, schema_name:varchar]
                      Estimates: 
                      catalog_name := catalog_name
                      schema_name := schema_name

2022-10-28T10:39:55.624+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneOutputSourceColumns
Before:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ GroupReference[groupId = 2]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 2]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.627+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 3]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.631+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 10]
       Layout: [schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

2022-10-28T10:39:55.631+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 4]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.632+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 11]
       Layout: [schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

2022-10-28T10:39:55.632+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 5]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.633+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 12]
       Layout: [schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

2022-10-28T10:39:55.634+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneSortColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ GroupReference[groupId = 6]
             Layout: [catalog_name:varchar, schema_name:varchar]
             Estimates: 

2022-10-28T10:39:55.635+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 13]
       Layout: [schema_name:varchar]
       Estimates: 

After:
GroupReference[groupId = 13]
    Layout: [schema_name:varchar]
    Estimates: 

2022-10-28T10:39:55.640+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 7]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.640+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 15]
       Layout: [schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

2022-10-28T10:39:55.641+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 8]
          Layout: [catalog_name:varchar, schema_name:varchar]
          Estimates: 

2022-10-28T10:39:55.641+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 16]
       Layout: [schema_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 8]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

2022-10-28T10:39:55.644+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneTableScanColumns
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 8]
       Layout: [catalog_name:varchar, schema_name:varchar]
       Estimates: 

After:
ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [schema_name:varchar]
    Estimates: 
    schema_name := schema_name

2022-10-28T10:39:55.645+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [schema_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 17]
       Layout: [schema_name:varchar]
       Estimates: 

After:
GroupReference[groupId = 17]
    Layout: [schema_name:varchar]
    Estimates: 

2022-10-28T10:39:55.645+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.646+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.646+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.650+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.650+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.651+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.651+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.653+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.653+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.653+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.654+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.654+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.654+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.655+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.655+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.655+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.656+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.656+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.663+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.664+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.664+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.664+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.664+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.665+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.665+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.665+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.665+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.665+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.666+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.666+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.666+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.667+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.667+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.667+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.667+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.667+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.668+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.668+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.668+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.668+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.668+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.669+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.670+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.670+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.670+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.670+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.670+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.671+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.671+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.671+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.672+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.672+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.673+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [schema_name:varchar]
    Estimates: 
    schema_name := schema_name

After:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [schema_name:varchar]
    Estimates: 
    schema_name := schema_name

2022-10-28T10:39:55.673+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.673+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.674+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.674+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.674+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ Sort[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
          Layout: [schema_name:varchar]
          Estimates: 
          schema_name := schema_name

2022-10-28T10:39:55.685+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.686+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.687+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.687+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.688+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.688+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.688+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.690+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.690+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.690+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.691+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.692+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.692+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                Layout: [schema_name:varchar]
                Estimates: 
                schema_name := schema_name

2022-10-28T10:39:55.696+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.696+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.696+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.697+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.697+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.698+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.704+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.704+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.704+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.706+0530	DEBUG	Query-20221028_050955_00002_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [Schema]]
│   Layout: [schema_name:varchar]
│   Estimates: 
│   Schema := schema_name
└─ RemoteMerge[orderBy = [schema_name ASC NULLS LAST]]
   │   Layout: [schema_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [schema_name ASC NULLS LAST]]
      │   Layout: [schema_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [schema_name ASC NULLS LAST]]
         │   Layout: [schema_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [schema_name:varchar]
            │   Estimates: 
            └─ TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
                   Layout: [schema_name:varchar]
                   Estimates: 
                   schema_name := schema_name

2022-10-28T10:39:55.728+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.0 is PLANNED
2022-10-28T10:39:55.729+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.1 is PLANNED
2022-10-28T10:39:55.729+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.2 is PLANNED
2022-10-28T10:39:55.733+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is STARTING
2022-10-28T10:39:55.740+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is PLANNED
2022-10-28T10:39:55.741+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is PLANNED
2022-10-28T10:39:55.741+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is PLANNED
2022-10-28T10:39:55.766+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is SCHEDULING
2022-10-28T10:39:55.771+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.2 is SCHEDULING
2022-10-28T10:39:55.780+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.2 is RUNNING
2022-10-28T10:39:55.784+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is RUNNING
2022-10-28T10:39:55.784+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is SCHEDULED
2022-10-28T10:39:55.784+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is SCHEDULING
2022-10-28T10:39:55.784+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.1 is SCHEDULING
2022-10-28T10:39:55.784+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.1 is RUNNING
2022-10-28T10:39:55.786+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is SCHEDULED
2022-10-28T10:39:55.786+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.0 is SCHEDULING
2022-10-28T10:39:55.787+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.0 is RUNNING
2022-10-28T10:39:55.787+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is SCHEDULING
2022-10-28T10:39:55.787+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is SCHEDULED
2022-10-28T10:39:55.845+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.2.0.0 is RUNNING
2022-10-28T10:39:55.855+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.1.0.0 is RUNNING
2022-10-28T10:39:55.855+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.0.0.0 is RUNNING
2022-10-28T10:39:55.901+0530	DEBUG	Task-20221028_050955_00002_2ymdz.1.0.0-7059	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_050955_00002_2ymdz.1.0.0
2022-10-28T10:39:55.901+0530	DEBUG	Task-20221028_050955_00002_2ymdz.2.0.0-139	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_050955_00002_2ymdz.2.0.0
2022-10-28T10:39:55.901+0530	DEBUG	Task-20221028_050955_00002_2ymdz.0.0.0-137	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_050955_00002_2ymdz.0.0.0
2022-10-28T10:39:55.909+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is RUNNING
2022-10-28T10:39:55.909+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-16-111	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageWithPositionComparator_20221028_050955_37
2022-10-28T10:39:55.913+0530	DEBUG	20221028_050955_00002_2ymdz.2.0.0-0-97	io.trino.connector.informationschema.InformationSchemaPageSourceProvider	Building information schema table (queryId=20221028_050955_00002_2ymdz; tableHandle=InformationSchemaTableHandle{catalogName=tpcds, table=SCHEMATA, prefixes=[tpcds.*.*], limit=OptionalLong.empty})
2022-10-28T10:39:55.918+0530	DEBUG	20221028_050955_00002_2ymdz.2.0.0-0-97	io.trino.security.AccessControl	Invocation of filterSchemas(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_050955_00002_2ymdz}, catalogName='tpcds', schemaNames=[information_schema, tiny, sf1, sf10, sf100, sf300, sf1000, sf3000, sf10000, sf30000, sf100000]) succeeded in 35.83us
2022-10-28T10:39:55.921+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is RUNNING
2022-10-28T10:39:55.923+0530	DEBUG	20221028_050955_00002_2ymdz.2.0.0-0-97	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.2.0.0-0 io.trino.connector.informationschema.InformationSchemaSplit@5c8668b7 (start = 4.2380541959725E8, wall = 19 ms, cpu = 13 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:39:55.923+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.2.0.0 is FLUSHING
2022-10-28T10:39:55.931+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is RUNNING
2022-10-28T10:39:55.932+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is FLUSHING
2022-10-28T10:39:55.938+0530	DEBUG	http-worker-135	io.trino.execution.SqlTask	Aborting task 20221028_050955_00002_2ymdz.2.0.0 output 0
2022-10-28T10:39:55.939+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.2.0.0 is FINISHED
2022-10-28T10:39:55.939+0530	DEBUG	Task-20221028_050955_00002_2ymdz.2.0.0-7064	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_050955_00002_2ymdz.2.0.0
2022-10-28T10:39:55.940+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-0-101	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PagesIndexComparator_20221028_050955_38
2022-10-28T10:39:55.941+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.2 is PENDING
2022-10-28T10:39:55.941+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.2 is FINISHED
2022-10-28T10:39:55.942+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-10-97	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-10  (start = 4.23805419751E8, wall = 38 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.942+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-2-113	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-2  (start = 4.23805419590166E8, wall = 38 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.942+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-9-94	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-9  (start = 4.238054197235E8, wall = 38 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-4-111	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-4  (start = 4.23805419600416E8, wall = 39 ms, cpu = 3 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-1-98	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-1  (start = 4.23805419574375E8, wall = 39 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-6-110	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-6  (start = 4.23805419654625E8, wall = 39 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-0-101	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-0  (start = 4.23805419579291E8, wall = 39 ms, cpu = 2 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-5-105	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-5  (start = 4.23805419658875E8, wall = 38 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-11-99	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-11  (start = 4.23805419780333E8, wall = 39 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-7-106	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-7  (start = 4.23805419676833E8, wall = 39 ms, cpu = 11 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.943+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-12-108	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-12  (start = 4.23805419811416E8, wall = 39 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.944+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-15-107	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-15  (start = 4.23805420001458E8, wall = 39 ms, cpu = 1 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:39:55.945+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-3-103	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-3  (start = 4.23805419601625E8, wall = 41 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.946+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-16-96	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-16  (start = 4.23805419968583E8, wall = 42 ms, cpu = 10 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:39:55.946+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-8-109	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-8  (start = 4.23805419694666E8, wall = 42 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:39:55.946+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-13-100	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-13  (start = 4.23805419823916E8, wall = 42 ms, cpu = 0 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:39:55.947+0530	DEBUG	20221028_050955_00002_2ymdz.1.0.0-14-104	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.1.0.0-14  (start = 4.23805419858666E8, wall = 43 ms, cpu = 1 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:39:55.951+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.1.0.0 is FLUSHING
2022-10-28T10:39:55.952+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is FLUSHING
2022-10-28T10:39:55.953+0530	DEBUG	http-worker-135	io.trino.execution.SqlTask	Aborting task 20221028_050955_00002_2ymdz.1.0.0 output 0
2022-10-28T10:39:55.953+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.1.0.0 is FINISHED
2022-10-28T10:39:55.953+0530	DEBUG	Task-20221028_050955_00002_2ymdz.1.0.0-7053	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_050955_00002_2ymdz.1.0.0
2022-10-28T10:39:55.954+0530	DEBUG	20221028_050955_00002_2ymdz.0.0.0-0-112	io.trino.execution.executor.TaskExecutor	Split 20221028_050955_00002_2ymdz.0.0.0-0  (start = 4.23805420260333E8, wall = 49 ms, cpu = 4 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:39:55.954+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:39:55.954+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.1 is PENDING
2022-10-28T10:39:55.954+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.1 is FINISHED
2022-10-28T10:39:55.955+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is FLUSHING
2022-10-28T10:39:55.957+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_050955_00002_2ymdz.0.0.0 output 0
2022-10-28T10:39:55.957+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_050955_00002_2ymdz.0.0.0 is FINISHED
2022-10-28T10:39:55.957+0530	DEBUG	Task-20221028_050955_00002_2ymdz.0.0.0-7062	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_050955_00002_2ymdz.0.0.0
2022-10-28T10:39:55.958+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.0 is PENDING
2022-10-28T10:39:55.958+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_050955_00002_2ymdz.0 is FINISHED
2022-10-28T10:39:55.959+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.0 is FINISHED
2022-10-28T10:39:55.959+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.1 is FINISHED
2022-10-28T10:39:55.959+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_050955_00002_2ymdz.2 is FINISHED
2022-10-28T10:39:55.959+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is FINISHING
2022-10-28T10:39:56.102+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_050955_00002_2ymdz is FINISHED
2022-10-28T10:39:56.103+0530	INFO	dispatcher-query-0	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_050955_00002_2ymdz :: FINISHED :: elapsed 598ms :: planning 174ms :: waiting 51ms :: scheduling 235ms :: running 26ms :: finishing 163ms :: begin 2022-10-28T10:39:55.503+05:30 :: end 2022-10-28T10:39:56.101+05:30
2022-10-28T10:40:02.855+0530	DEBUG	dispatcher-query-1	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 73.71us
2022-10-28T10:40:02.855+0530	DEBUG	dispatcher-query-1	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 23.13us
2022-10-28T10:40:02.856+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is QUEUED
2022-10-28T10:40:02.857+0530	INFO	Query-20221028_051002_00003_2ymdz-7029	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:40:02.857+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:40:02.857+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of checkCanShowTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, schema=tpcds.sf1) succeeded in 80.96us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnName='table_catalog', type=varchar) succeeded in 29.46us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnName='table_schema', type=varchar) succeeded in 10.00us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnName='table_name', type=varchar) succeeded in 8.21us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnName='table_type', type=varchar) succeeded in 8.04us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnName='table_comment', type=varchar) succeeded in 7.38us
2022-10-28T10:40:02.859+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables) succeeded in 9.79us
2022-10-28T10:40:02.885+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7029	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, tableName=tpcds.information_schema.tables, columnNames=[table_schema, table_name]) succeeded in 54.42us
2022-10-28T10:40:02.885+0530	INFO	Query-20221028_051002_00003_2ymdz-7029	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:40:02.885+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is DISPATCHING
2022-10-28T10:40:02.885+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is PLANNING
2022-10-28T10:40:02.899+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [table_name ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
                      Estimates: 
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      table_type := table_type
                      table_comment := table_comment

2022-10-28T10:40:02.902+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [table_name ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
                      Estimates: 
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      table_type := table_type
                      table_comment := table_comment

2022-10-28T10:40:02.903+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [table_name ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
                      Estimates: 
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      table_type := table_type
                      table_comment := table_comment

2022-10-28T10:40:02.903+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneOutputSourceColumns
Before:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 2]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.903+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 3]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.904+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 11]
       Layout: [table_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

2022-10-28T10:40:02.904+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 4]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.905+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 12]
       Layout: [table_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

2022-10-28T10:40:02.905+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 5]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.905+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 13]
       Layout: [table_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

2022-10-28T10:40:02.905+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneSortColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ GroupReference[groupId = 6]
             Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
             Estimates: 

2022-10-28T10:40:02.906+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 14]
       Layout: [table_name:varchar]
       Estimates: 

After:
GroupReference[groupId = 14]
    Layout: [table_name:varchar]
    Estimates: 

2022-10-28T10:40:02.906+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 7]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.906+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 16]
       Layout: [table_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

2022-10-28T10:40:02.907+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 8]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.907+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 17]
       Layout: [table_name:varchar]
       Estimates: 

After:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

2022-10-28T10:40:02.907+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneFilterColumns
Before:
Project[]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
FilterProject[filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
│   Layout: [table_name:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [table_schema:varchar, table_name:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 9]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
          Estimates: 

2022-10-28T10:40:02.908+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneTableScanColumns
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 9]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, table_type:varchar, table_comment:varchar]
       Estimates: 

After:
ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name

2022-10-28T10:40:02.909+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 20]
       Layout: [table_schema:varchar, table_name:varchar]
       Estimates: 

After:
GroupReference[groupId = 20]
    Layout: [table_schema:varchar, table_name:varchar]
    Estimates: 

2022-10-28T10:40:02.910+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.910+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.915+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.ExpressionRewriteRuleSet$FilterExpressionRewrite
Before:
Filter[filterPredicate = ("table_schema" = CAST('sf1' AS varchar))]
│   Layout: [table_schema:varchar, table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar]
       Estimates: 

After:
Filter[filterPredicate = ("table_schema" = VARCHAR 'sf1')]
│   Layout: [table_schema:varchar, table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar]
       Estimates: 

2022-10-28T10:40:02.928+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.929+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.930+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.930+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.930+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.930+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.931+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.931+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.931+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.932+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.932+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.932+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.932+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.932+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.933+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.933+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.946+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.946+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.947+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.959+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PushPredicateIntoTableScan
Before:
Filter[filterPredicate = ("table_schema" = VARCHAR 'sf1')]
│   Layout: [table_schema:varchar, table_name:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar]
       Estimates: 

After:
ScanFilter[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
    Layout: [table_schema:varchar, table_name:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name

2022-10-28T10:40:02.960+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.961+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.961+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.962+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.962+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.963+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.963+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.963+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.964+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.964+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.965+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.966+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.966+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.967+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.967+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.967+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.967+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.967+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.968+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.968+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.968+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.968+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.968+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.969+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.970+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.971+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.972+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.973+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.973+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.973+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.973+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.973+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name

After:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name

2022-10-28T10:40:02.974+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.975+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.976+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.976+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.976+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ Sort[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
          Layout: [table_name:varchar]
          Estimates: 
          table_schema := table_schema
          table_name := table_name

2022-10-28T10:40:02.979+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.979+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.980+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.981+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.981+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.982+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.982+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.983+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.984+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.985+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.985+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.989+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.989+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ RemoteExchange[type = REPARTITION]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                Layout: [table_name:varchar]
                Estimates: 
                table_schema := table_schema
                table_name := table_name

2022-10-28T10:40:02.990+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.991+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.991+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.991+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.991+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.992+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.992+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.993+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.993+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.993+0530	DEBUG	Query-20221028_051002_00003_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [Table]]
│   Layout: [table_name:varchar]
│   Estimates: 
│   Table := table_name
└─ RemoteMerge[orderBy = [table_name ASC NULLS LAST]]
   │   Layout: [table_name:varchar]
   │   Estimates: 
   └─ LocalMerge[orderBy = [table_name ASC NULLS LAST]]
      │   Layout: [table_name:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [table_name ASC NULLS LAST]]
         │   Layout: [table_name:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [table_name:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty}, filterPredicate = ("table_schema" = VARCHAR 'sf1')]
                   Layout: [table_name:varchar]
                   Estimates: 
                   table_schema := table_schema
                   table_name := table_name

2022-10-28T10:40:02.996+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.0 is PLANNED
2022-10-28T10:40:02.996+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.1 is PLANNED
2022-10-28T10:40:02.996+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.2 is PLANNED
2022-10-28T10:40:02.996+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is STARTING
2022-10-28T10:40:02.996+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is PLANNED
2022-10-28T10:40:02.996+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is PLANNED
2022-10-28T10:40:02.996+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is PLANNED
2022-10-28T10:40:02.997+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is SCHEDULING
2022-10-28T10:40:02.997+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.2 is SCHEDULING
2022-10-28T10:40:02.997+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.2 is RUNNING
2022-10-28T10:40:02.998+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is RUNNING
2022-10-28T10:40:02.998+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.1 is SCHEDULING
2022-10-28T10:40:02.998+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is SCHEDULED
2022-10-28T10:40:02.998+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.1 is RUNNING
2022-10-28T10:40:02.999+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.0 is SCHEDULING
2022-10-28T10:40:02.999+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.2.0.0 is RUNNING
2022-10-28T10:40:02.999+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is SCHEDULING
2022-10-28T10:40:02.999+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is SCHEDULED
2022-10-28T10:40:02.999+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.1.0.0 is RUNNING
2022-10-28T10:40:02.999+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.0 is RUNNING
2022-10-28T10:40:03.000+0530	DEBUG	Task-20221028_051002_00003_2ymdz.1.0.0-133	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051002_00003_2ymdz.1.0.0
2022-10-28T10:40:03.000+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is SCHEDULING
2022-10-28T10:40:03.000+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is SCHEDULED
2022-10-28T10:40:03.001+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.0.0.0 is RUNNING
2022-10-28T10:40:03.002+0530	DEBUG	Task-20221028_051002_00003_2ymdz.0.0.0-135	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051002_00003_2ymdz.0.0.0
2022-10-28T10:40:03.004+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is RUNNING
2022-10-28T10:40:03.008+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is RUNNING
2022-10-28T10:40:03.030+0530	DEBUG	Task-20221028_051002_00003_2ymdz.2.0.0-7056	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CursorProcessor_20221028_051003_39
2022-10-28T10:40:03.037+0530	DEBUG	Task-20221028_051002_00003_2ymdz.2.0.0-7056	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageFilter_20221028_051003_40
2022-10-28T10:40:03.040+0530	DEBUG	Task-20221028_051002_00003_2ymdz.2.0.0-7056	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051002_00003_2ymdz.2.0.0
2022-10-28T10:40:03.042+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is RUNNING
2022-10-28T10:40:03.044+0530	DEBUG	20221028_051002_00003_2ymdz.2.0.0-0-95	io.trino.connector.informationschema.InformationSchemaPageSourceProvider	Building information schema table (queryId=20221028_051002_00003_2ymdz; tableHandle=InformationSchemaTableHandle{catalogName=tpcds, table=TABLES, prefixes=[tpcds.sf1.*], limit=OptionalLong.empty})
2022-10-28T10:40:03.048+0530	DEBUG	20221028_051002_00003_2ymdz.2.0.0-0-95	io.trino.security.AccessControl	Invocation of filterTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, catalogName='tpcds', tableNames=[sf1.call_center, sf1.catalog_page, sf1.catalog_returns, sf1.catalog_sales, sf1.customer, sf1.customer_address, sf1.customer_demographics, sf1.date_dim, sf1.household_demographics, sf1.income_band, sf1.inventory, sf1.item, sf1.promotion, sf1.reason, sf1.ship_mode, sf1.store, sf1.store_returns, sf1.store_sales, sf1.time_dim, sf1.warehouse, sf1.web_page, sf1.web_returns, sf1.web_sales, sf1.web_site, sf1.dbgen_version]) succeeded in 29.96us
2022-10-28T10:40:03.048+0530	DEBUG	20221028_051002_00003_2ymdz.2.0.0-0-95	io.trino.security.AccessControl	Invocation of filterTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051002_00003_2ymdz}, catalogName='tpcds', tableNames=[]) succeeded in 8.21us
2022-10-28T10:40:03.055+0530	DEBUG	20221028_051002_00003_2ymdz.2.0.0-0-95	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.2.0.0-0 io.trino.connector.informationschema.InformationSchemaSplit@6bf355fc (start = 4.23812556474833E8, wall = 14 ms, cpu = 12 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:40:03.055+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.2.0.0 is FLUSHING
2022-10-28T10:40:03.056+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is FLUSHING
2022-10-28T10:40:03.076+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_051002_00003_2ymdz.2.0.0 output 0
2022-10-28T10:40:03.076+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.2.0.0 is FINISHED
2022-10-28T10:40:03.077+0530	DEBUG	Task-20221028_051002_00003_2ymdz.2.0.0-7064	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051002_00003_2ymdz.2.0.0
2022-10-28T10:40:03.077+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-2-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-2  (start = 4.23812517507708E8, wall = 76 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:40:03.078+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-3-111	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-3  (start = 4.23812517638583E8, wall = 76 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:40:03.078+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-7-98	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-7  (start = 4.23812518058166E8, wall = 76 ms, cpu = 0 ms, wait = 2 ms, calls = 3) is finished
2022-10-28T10:40:03.078+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-8-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-8  (start = 4.23812518121166E8, wall = 75 ms, cpu = 0 ms, wait = 2 ms, calls = 3) is finished
2022-10-28T10:40:03.078+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.2 is FINISHED
2022-10-28T10:40:03.078+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.2 is PENDING
2022-10-28T10:40:03.078+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-4-95	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-4  (start = 4.23812517739416E8, wall = 76 ms, cpu = 0 ms, wait = 2 ms, calls = 4) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-9-111	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-9  (start = 4.23812518176166E8, wall = 76 ms, cpu = 0 ms, wait = 2 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-5-106	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-5  (start = 4.23812517841083E8, wall = 77 ms, cpu = 0 ms, wait = 3 ms, calls = 4) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-0-101	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-0  (start = 4.23812517029E8, wall = 78 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-14-108	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-14  (start = 4.23812519303041E8, wall = 75 ms, cpu = 0 ms, wait = 4 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-15-97	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-15  (start = 4.23812519366916E8, wall = 75 ms, cpu = 0 ms, wait = 4 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-13-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-13  (start = 4.23812519293875E8, wall = 76 ms, cpu = 0 ms, wait = 3 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-6-94	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-6  (start = 4.23812517947833E8, wall = 77 ms, cpu = 0 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:40:03.079+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-11-107	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-11  (start = 4.23812519144916E8, wall = 76 ms, cpu = 0 ms, wait = 3 ms, calls = 3) is finished
2022-10-28T10:40:03.080+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-10-100	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-10  (start = 4.23812518211E8, wall = 77 ms, cpu = 0 ms, wait = 4 ms, calls = 3) is finished
2022-10-28T10:40:03.080+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-12-98	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-12  (start = 4.23812519179875E8, wall = 76 ms, cpu = 0 ms, wait = 3 ms, calls = 3) is finished
2022-10-28T10:40:03.080+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-1-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-1  (start = 4.23812517308958E8, wall = 78 ms, cpu = 0 ms, wait = 4 ms, calls = 4) is finished
2022-10-28T10:40:03.081+0530	DEBUG	20221028_051002_00003_2ymdz.1.0.0-16-105	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.1.0.0-16  (start = 4.23812519442083E8, wall = 77 ms, cpu = 1 ms, wait = 3 ms, calls = 3) is finished
2022-10-28T10:40:03.084+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.1.0.0 is FLUSHING
2022-10-28T10:40:03.085+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is FLUSHING
2022-10-28T10:40:03.087+0530	DEBUG	http-worker-136	io.trino.execution.SqlTask	Aborting task 20221028_051002_00003_2ymdz.1.0.0 output 0
2022-10-28T10:40:03.087+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.1.0.0 is FINISHED
2022-10-28T10:40:03.087+0530	DEBUG	Task-20221028_051002_00003_2ymdz.1.0.0-7063	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051002_00003_2ymdz.1.0.0
2022-10-28T10:40:03.088+0530	DEBUG	20221028_051002_00003_2ymdz.0.0.0-0-96	io.trino.execution.executor.TaskExecutor	Split 20221028_051002_00003_2ymdz.0.0.0-0  (start = 4.23812519525708E8, wall = 84 ms, cpu = 1 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:40:03.088+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:40:03.088+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.1 is PENDING
2022-10-28T10:40:03.088+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.1 is FINISHED
2022-10-28T10:40:03.089+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is FLUSHING
2022-10-28T10:40:03.090+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_051002_00003_2ymdz.0.0.0 output 0
2022-10-28T10:40:03.090+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051002_00003_2ymdz.0.0.0 is FINISHED
2022-10-28T10:40:03.091+0530	DEBUG	Task-20221028_051002_00003_2ymdz.0.0.0-7052	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051002_00003_2ymdz.0.0.0
2022-10-28T10:40:03.091+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.0 is PENDING
2022-10-28T10:40:03.091+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051002_00003_2ymdz.0 is FINISHED
2022-10-28T10:40:03.092+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.0 is FINISHED
2022-10-28T10:40:03.092+0530	DEBUG	query-execution-2	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.1 is FINISHED
2022-10-28T10:40:03.092+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is FINISHING
2022-10-28T10:40:03.092+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051002_00003_2ymdz.2 is FINISHED
2022-10-28T10:40:03.228+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051002_00003_2ymdz is FINISHED
2022-10-28T10:40:03.228+0530	INFO	dispatcher-query-0	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051002_00003_2ymdz :: FINISHED :: elapsed 371ms :: planning 111ms :: waiting 29ms :: scheduling 77ms :: running 32ms :: finishing 151ms :: begin 2022-10-28T10:40:02.856+05:30 :: end 2022-10-28T10:40:03.227+05:30
2022-10-28T10:40:49.863+0530	DEBUG	dispatcher-query-6	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 30.13us
2022-10-28T10:40:49.864+0530	DEBUG	dispatcher-query-6	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 11.96us
2022-10-28T10:40:49.875+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is QUEUED
2022-10-28T10:40:49.875+0530	INFO	Query-20221028_051049_00004_2ymdz-7033	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:40:49.883+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_sold_date_sk', type=bigint) succeeded in 33.96us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_sold_time_sk', type=bigint) succeeded in 7.63us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_item_sk', type=bigint) succeeded in 5.54us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_customer_sk', type=bigint) succeeded in 4.96us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_cdemo_sk', type=bigint) succeeded in 5.04us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_hdemo_sk', type=bigint) succeeded in 4.92us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_addr_sk', type=bigint) succeeded in 4.92us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_store_sk', type=bigint) succeeded in 4.75us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_promo_sk', type=bigint) succeeded in 148.67us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ticket_number', type=bigint) succeeded in 17.17us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_quantity', type=integer) succeeded in 4.00us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_wholesale_cost', type=decimal(7,2)) succeeded in 3.83us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_list_price', type=decimal(7,2)) succeeded in 4.17us
2022-10-28T10:40:49.887+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_sales_price', type=decimal(7,2)) succeeded in 3.92us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ext_discount_amt', type=decimal(7,2)) succeeded in 3.96us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ext_sales_price', type=decimal(7,2)) succeeded in 3.83us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ext_wholesale_cost', type=decimal(7,2)) succeeded in 3.79us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ext_list_price', type=decimal(7,2)) succeeded in 3.88us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_ext_tax', type=decimal(7,2)) succeeded in 3.88us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_coupon_amt', type=decimal(7,2)) succeeded in 3.83us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_net_paid', type=decimal(7,2)) succeeded in 3.79us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_net_paid_inc_tax', type=decimal(7,2)) succeeded in 3.79us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnName='ss_net_profit', type=decimal(7,2)) succeeded in 3.79us
2022-10-28T10:40:49.888+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales) succeeded in 6.38us
2022-10-28T10:40:49.889+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7033	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051049_00004_2ymdz}, tableName=tpcds.sf1.store_sales, columnNames=[ss_sold_time_sk, ss_cdemo_sk, ss_promo_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_net_profit, ss_addr_sk, ss_ticket_number, ss_wholesale_cost, ss_sold_date_sk, ss_item_sk, ss_ext_list_price, ss_store_sk, ss_coupon_amt, ss_quantity, ss_list_price, ss_sales_price, ss_customer_sk, ss_ext_wholesale_cost, ss_net_paid, ss_ext_tax, ss_hdemo_sk, ss_net_paid_inc_tax]) succeeded in 23.33us
2022-10-28T10:40:49.889+0530	INFO	Query-20221028_051049_00004_2ymdz-7033	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:40:49.890+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is DISPATCHING
2022-10-28T10:40:49.890+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is PLANNING
2022-10-28T10:40:49.893+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ Project[]
   │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:store_sales:sf1.0]
                Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
                Estimates: 
                ss_sold_date_sk := tpcds:ss_sold_date_sk
                ss_sold_time_sk := tpcds:ss_sold_time_sk
                ss_item_sk := tpcds:ss_item_sk
                ss_customer_sk := tpcds:ss_customer_sk
                ss_cdemo_sk := tpcds:ss_cdemo_sk
                ss_hdemo_sk := tpcds:ss_hdemo_sk
                ss_addr_sk := tpcds:ss_addr_sk
                ss_store_sk := tpcds:ss_store_sk
                ss_promo_sk := tpcds:ss_promo_sk
                ss_ticket_number := tpcds:ss_ticket_number
                ss_quantity := tpcds:ss_quantity
                ss_wholesale_cost := tpcds:ss_wholesale_cost
                ss_list_price := tpcds:ss_list_price
                ss_sales_price := tpcds:ss_sales_price
                ss_ext_discount_amt := tpcds:ss_ext_discount_amt
                ss_ext_sales_price := tpcds:ss_ext_sales_price
                ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
                ss_ext_list_price := tpcds:ss_ext_list_price
                ss_ext_tax := tpcds:ss_ext_tax
                ss_coupon_amt := tpcds:ss_coupon_amt
                ss_net_paid := tpcds:ss_net_paid
                ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
                ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.896+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ Project[]
   │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:store_sales:sf1.0]
                Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
                Estimates: 
                ss_sold_date_sk := tpcds:ss_sold_date_sk
                ss_sold_time_sk := tpcds:ss_sold_time_sk
                ss_item_sk := tpcds:ss_item_sk
                ss_customer_sk := tpcds:ss_customer_sk
                ss_cdemo_sk := tpcds:ss_cdemo_sk
                ss_hdemo_sk := tpcds:ss_hdemo_sk
                ss_addr_sk := tpcds:ss_addr_sk
                ss_store_sk := tpcds:ss_store_sk
                ss_promo_sk := tpcds:ss_promo_sk
                ss_ticket_number := tpcds:ss_ticket_number
                ss_quantity := tpcds:ss_quantity
                ss_wholesale_cost := tpcds:ss_wholesale_cost
                ss_list_price := tpcds:ss_list_price
                ss_sales_price := tpcds:ss_sales_price
                ss_ext_discount_amt := tpcds:ss_ext_discount_amt
                ss_ext_sales_price := tpcds:ss_ext_sales_price
                ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
                ss_ext_list_price := tpcds:ss_ext_list_price
                ss_ext_tax := tpcds:ss_ext_tax
                ss_coupon_amt := tpcds:ss_coupon_amt
                ss_net_paid := tpcds:ss_net_paid
                ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
                ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.897+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ Project[]
   │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:store_sales:sf1.0]
                Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
                Estimates: 
                ss_sold_date_sk := tpcds:ss_sold_date_sk
                ss_sold_time_sk := tpcds:ss_sold_time_sk
                ss_item_sk := tpcds:ss_item_sk
                ss_customer_sk := tpcds:ss_customer_sk
                ss_cdemo_sk := tpcds:ss_cdemo_sk
                ss_hdemo_sk := tpcds:ss_hdemo_sk
                ss_addr_sk := tpcds:ss_addr_sk
                ss_store_sk := tpcds:ss_store_sk
                ss_promo_sk := tpcds:ss_promo_sk
                ss_ticket_number := tpcds:ss_ticket_number
                ss_quantity := tpcds:ss_quantity
                ss_wholesale_cost := tpcds:ss_wholesale_cost
                ss_list_price := tpcds:ss_list_price
                ss_sales_price := tpcds:ss_sales_price
                ss_ext_discount_amt := tpcds:ss_ext_discount_amt
                ss_ext_sales_price := tpcds:ss_ext_sales_price
                ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
                ss_ext_list_price := tpcds:ss_ext_list_price
                ss_ext_tax := tpcds:ss_ext_tax
                ss_coupon_amt := tpcds:ss_coupon_amt
                ss_net_paid := tpcds:ss_net_paid
                ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
                ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.898+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

After:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

2022-10-28T10:40:49.898+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

After:
GroupReference[groupId = 4]
    Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
    Estimates: 

2022-10-28T10:40:49.898+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

After:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

2022-10-28T10:40:49.899+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 

After:
GroupReference[groupId = 6]
    Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
    Estimates: 

2022-10-28T10:40:49.899+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_customer_sk := tpcds:ss_customer_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_addr_sk := tpcds:ss_addr_sk
       ss_store_sk := tpcds:ss_store_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_quantity := tpcds:ss_quantity
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_ext_tax := tpcds:ss_ext_tax
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_net_paid := tpcds:ss_net_paid
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
       ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.899+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_customer_sk := tpcds:ss_customer_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_addr_sk := tpcds:ss_addr_sk
       ss_store_sk := tpcds:ss_store_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_quantity := tpcds:ss_quantity
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_ext_tax := tpcds:ss_ext_tax
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_net_paid := tpcds:ss_net_paid
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
       ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.899+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_customer_sk := tpcds:ss_customer_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_addr_sk := tpcds:ss_addr_sk
       ss_store_sk := tpcds:ss_store_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_quantity := tpcds:ss_quantity
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_ext_tax := tpcds:ss_ext_tax
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_net_paid := tpcds:ss_net_paid
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax
       ss_net_profit := tpcds:ss_net_profit

2022-10-28T10:40:49.900+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.900+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.900+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.900+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.900+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.901+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.902+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.902+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.902+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.902+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.902+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.903+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.904+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.905+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.906+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.907+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.908+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = tpcds:store_sales:sf1.0]
    Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
    Estimates: 
    ss_sold_time_sk := tpcds:ss_sold_time_sk
    ss_cdemo_sk := tpcds:ss_cdemo_sk
    ss_promo_sk := tpcds:ss_promo_sk
    ss_ext_discount_amt := tpcds:ss_ext_discount_amt
    ss_ext_sales_price := tpcds:ss_ext_sales_price
    ss_net_profit := tpcds:ss_net_profit
    ss_addr_sk := tpcds:ss_addr_sk
    ss_ticket_number := tpcds:ss_ticket_number
    ss_wholesale_cost := tpcds:ss_wholesale_cost
    ss_sold_date_sk := tpcds:ss_sold_date_sk
    ss_item_sk := tpcds:ss_item_sk
    ss_ext_list_price := tpcds:ss_ext_list_price
    ss_store_sk := tpcds:ss_store_sk
    ss_coupon_amt := tpcds:ss_coupon_amt
    ss_quantity := tpcds:ss_quantity
    ss_list_price := tpcds:ss_list_price
    ss_sales_price := tpcds:ss_sales_price
    ss_customer_sk := tpcds:ss_customer_sk
    ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
    ss_net_paid := tpcds:ss_net_paid
    ss_ext_tax := tpcds:ss_ext_tax
    ss_hdemo_sk := tpcds:ss_hdemo_sk
    ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

After:
TableScan[table = tpcds:store_sales:sf1.0]
    Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
    Estimates: 
    ss_sold_time_sk := tpcds:ss_sold_time_sk
    ss_cdemo_sk := tpcds:ss_cdemo_sk
    ss_promo_sk := tpcds:ss_promo_sk
    ss_ext_discount_amt := tpcds:ss_ext_discount_amt
    ss_ext_sales_price := tpcds:ss_ext_sales_price
    ss_net_profit := tpcds:ss_net_profit
    ss_addr_sk := tpcds:ss_addr_sk
    ss_ticket_number := tpcds:ss_ticket_number
    ss_wholesale_cost := tpcds:ss_wholesale_cost
    ss_sold_date_sk := tpcds:ss_sold_date_sk
    ss_item_sk := tpcds:ss_item_sk
    ss_ext_list_price := tpcds:ss_ext_list_price
    ss_store_sk := tpcds:ss_store_sk
    ss_coupon_amt := tpcds:ss_coupon_amt
    ss_quantity := tpcds:ss_quantity
    ss_list_price := tpcds:ss_list_price
    ss_sales_price := tpcds:ss_sales_price
    ss_customer_sk := tpcds:ss_customer_sk
    ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
    ss_net_paid := tpcds:ss_net_paid
    ss_ext_tax := tpcds:ss_ext_tax
    ss_hdemo_sk := tpcds:ss_hdemo_sk
    ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.909+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.910+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.910+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.910+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.910+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.910+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.911+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.912+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.912+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.912+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.913+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.914+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.914+0530	DEBUG	Query-20221028_051049_00004_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]]
│   Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
│   Estimates: 
└─ TableScan[table = tpcds:store_sales:sf1.0]
       Layout: [ss_sold_date_sk:bigint, ss_sold_time_sk:bigint, ss_item_sk:bigint, ss_customer_sk:bigint, ss_cdemo_sk:bigint, ss_hdemo_sk:bigint, ss_addr_sk:bigint, ss_store_sk:bigint, ss_promo_sk:bigint, ss_ticket_number:bigint, ss_quantity:integer, ss_wholesale_cost:decimal(7,2), ss_list_price:decimal(7,2), ss_sales_price:decimal(7,2), ss_ext_discount_amt:decimal(7,2), ss_ext_sales_price:decimal(7,2), ss_ext_wholesale_cost:decimal(7,2), ss_ext_list_price:decimal(7,2), ss_ext_tax:decimal(7,2), ss_coupon_amt:decimal(7,2), ss_net_paid:decimal(7,2), ss_net_paid_inc_tax:decimal(7,2), ss_net_profit:decimal(7,2)]
       Estimates: 
       ss_sold_time_sk := tpcds:ss_sold_time_sk
       ss_cdemo_sk := tpcds:ss_cdemo_sk
       ss_promo_sk := tpcds:ss_promo_sk
       ss_ext_discount_amt := tpcds:ss_ext_discount_amt
       ss_ext_sales_price := tpcds:ss_ext_sales_price
       ss_net_profit := tpcds:ss_net_profit
       ss_addr_sk := tpcds:ss_addr_sk
       ss_ticket_number := tpcds:ss_ticket_number
       ss_wholesale_cost := tpcds:ss_wholesale_cost
       ss_sold_date_sk := tpcds:ss_sold_date_sk
       ss_item_sk := tpcds:ss_item_sk
       ss_ext_list_price := tpcds:ss_ext_list_price
       ss_store_sk := tpcds:ss_store_sk
       ss_coupon_amt := tpcds:ss_coupon_amt
       ss_quantity := tpcds:ss_quantity
       ss_list_price := tpcds:ss_list_price
       ss_sales_price := tpcds:ss_sales_price
       ss_customer_sk := tpcds:ss_customer_sk
       ss_ext_wholesale_cost := tpcds:ss_ext_wholesale_cost
       ss_net_paid := tpcds:ss_net_paid
       ss_ext_tax := tpcds:ss_ext_tax
       ss_hdemo_sk := tpcds:ss_hdemo_sk
       ss_net_paid_inc_tax := tpcds:ss_net_paid_inc_tax

2022-10-28T10:40:49.916+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051049_00004_2ymdz.0 is PLANNED
2022-10-28T10:40:49.916+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is STARTING
2022-10-28T10:40:49.916+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051049_00004_2ymdz.0 is PLANNED
2022-10-28T10:40:49.921+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051049_00004_2ymdz.0 is SCHEDULING
2022-10-28T10:40:49.922+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051049_00004_2ymdz.0 is SCHEDULING
2022-10-28T10:40:49.922+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051049_00004_2ymdz.0 is RUNNING
2022-10-28T10:40:49.923+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051049_00004_2ymdz.0 is SCHEDULED
2022-10-28T10:40:49.923+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is RUNNING
2022-10-28T10:40:49.924+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_051049_00004_2ymdz.0.0.0 is RUNNING
2022-10-28T10:40:49.939+0530	DEBUG	Task-20221028_051049_00004_2ymdz.0.0.0-136	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051049_00004_2ymdz.0.0.0
2022-10-28T10:40:49.942+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051049_00004_2ymdz.0 is RUNNING
2022-10-28T10:40:49.950+0530	DEBUG	20221028_051049_00004_2ymdz.0.0.0-3-101	io.trino.execution.executor.TaskExecutor	Split 20221028_051049_00004_2ymdz.0.0.0-3 TpcdsSplit{partNumber=1, totalParts=4, noSexism=false} (start = 4.23859456165916E8, wall = 10 ms, cpu = 5 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:40:49.950+0530	DEBUG	20221028_051049_00004_2ymdz.0.0.0-0-109	io.trino.execution.executor.TaskExecutor	Split 20221028_051049_00004_2ymdz.0.0.0-0 TpcdsSplit{partNumber=3, totalParts=4, noSexism=false} (start = 4.23859456074916E8, wall = 10 ms, cpu = 3 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:40:49.950+0530	DEBUG	20221028_051049_00004_2ymdz.0.0.0-1-111	io.trino.execution.executor.TaskExecutor	Split 20221028_051049_00004_2ymdz.0.0.0-1 TpcdsSplit{partNumber=2, totalParts=4, noSexism=false} (start = 4.23859456076E8, wall = 10 ms, cpu = 3 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:40:56.794+0530	DEBUG	http-worker-143	io.trino.execution.SqlQueryManager	Cancel query 20221028_051049_00004_2ymdz
2022-10-28T10:40:56.797+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051049_00004_2ymdz is FAILED
2022-10-28T10:40:56.797+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051049_00004_2ymdz.0 is ABORTED
2022-10-28T10:40:56.798+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051049_00004_2ymdz.0 is ABORTED
2022-10-28T10:40:56.798+0530	DEBUG	http-worker-133	io.trino.execution.SqlTask	Aborting task 20221028_051049_00004_2ymdz.0.0.0 output 0
2022-10-28T10:40:56.798+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051049_00004_2ymdz.0.0.0 is ABORTED
2022-10-28T10:40:56.798+0530	DEBUG	Task-20221028_051049_00004_2ymdz.0.0.0-7063	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051049_00004_2ymdz.0.0.0
2022-10-28T10:40:56.800+0530	INFO	dispatcher-query-7	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051049_00004_2ymdz :: FAILED (USER_CANCELED) :: elapsed 6923ms :: planning 26ms :: waiting 7ms :: scheduling 41ms :: running 6858ms :: finishing 0ms :: begin 2022-10-28T10:40:49.873+05:30 :: end 2022-10-28T10:40:56.796+05:30
2022-10-28T10:40:56.822+0530	DEBUG	20221028_051049_00004_2ymdz.0.0.0-2-106	io.trino.execution.executor.TaskExecutor	Split 20221028_051049_00004_2ymdz.0.0.0-2 TpcdsSplit{partNumber=0, totalParts=4, noSexism=false} (start = 4.23859456132333E8, wall = 6882 ms, cpu = 6787 ms, wait = 0 ms, calls = 7) is finished
2022-10-28T10:41:08.879+0530	DEBUG	dispatcher-query-7	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 40.83us
2022-10-28T10:41:08.879+0530	DEBUG	dispatcher-query-7	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 9.79us
2022-10-28T10:41:08.887+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is QUEUED
2022-10-28T10:41:08.887+0530	INFO	Query-20221028_051108_00005_2ymdz-7031	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:41:08.892+0530	DEBUG	dispatcher-query-5	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:41:08.893+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of checkCanShowColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, table=tpcds.sf1.store_sales) succeeded in 1.04ms
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_catalog', type=varchar) succeeded in 38.67us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_schema', type=varchar) succeeded in 12.25us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_name', type=varchar) succeeded in 10.50us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_name', type=varchar) succeeded in 9.50us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='ordinal_position', type=bigint) succeeded in 9.50us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_default', type=varchar) succeeded in 8.42us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='is_nullable', type=varchar) succeeded in 8.29us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='data_type', type=varchar) succeeded in 7.88us
2022-10-28T10:41:08.894+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='comment', type=varchar) succeeded in 8.96us
2022-10-28T10:41:08.895+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='extra_info', type=varchar) succeeded in 10.63us
2022-10-28T10:41:08.895+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_comment', type=varchar) succeeded in 7.92us
2022-10-28T10:41:08.895+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns) succeeded in 20.46us
2022-10-28T10:41:08.898+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7031	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.information_schema.columns, columnNames=[ordinal_position, extra_info, table_schema, column_name, data_type, comment, table_name]) succeeded in 29.08us
2022-10-28T10:41:08.898+0530	INFO	Query-20221028_051108_00005_2ymdz-7031	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:41:08.898+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is DISPATCHING
2022-10-28T10:41:08.898+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is PLANNING
2022-10-28T10:41:08.901+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:08.904+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:08.906+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:08.906+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneOutputSourceColumns
Before:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 2]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:08.906+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 3]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:08.907+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 11]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:08.907+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 4]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:08.907+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 12]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:08.907+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 5]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:08.908+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 13]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:08.908+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneSortColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ GroupReference[groupId = 6]
             Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
             Estimates: 

2022-10-28T10:41:08.909+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 7]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:08.910+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 16]
       Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:08.910+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   │   expr := COALESCE("extra_info", CAST('' AS varchar))
   │   expr_0 := COALESCE("comment", CAST('' AS varchar))
   └─ GroupReference[groupId = 8]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
          Estimates: 

2022-10-28T10:41:08.914+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 17]
       Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

2022-10-28T10:41:08.914+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneFilterColumns
Before:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

After:
FilterProject[filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ Project[]
   │   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 9]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
          Estimates: 

2022-10-28T10:41:08.916+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneTableScanColumns
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 9]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

After:
ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name
    column_name := column_name
    ordinal_position := ordinal_position
    data_type := data_type
    comment := comment
    extra_info := extra_info

2022-10-28T10:41:08.917+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 20]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
GroupReference[groupId = 20]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 

2022-10-28T10:41:08.918+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", CAST('' AS varchar))
             expr_0 := COALESCE("comment", CAST('' AS varchar))
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:08.919+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", CAST('' AS varchar))
             expr_0 := COALESCE("comment", CAST('' AS varchar))
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:08.920+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.ExpressionRewriteRuleSet$ProjectExpressionRewrite
Before:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", VARCHAR '')
│   expr_0 := COALESCE("comment", VARCHAR '')
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

2022-10-28T10:41:08.926+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.ExpressionRewriteRuleSet$FilterExpressionRewrite
Before:
Filter[filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('store_sales' AS varchar)))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
Filter[filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

2022-10-28T10:41:08.935+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:08.935+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.936+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.936+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.936+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.937+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.937+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.937+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.938+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.938+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.938+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.939+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.939+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.939+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.939+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.942+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.945+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.945+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.945+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.949+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PushPredicateIntoTableScan
Before:
Filter[filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
ScanFilter[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

2022-10-28T10:41:08.949+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.951+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.951+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.952+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.953+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.953+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.953+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.953+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.955+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.955+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.957+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.959+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.959+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.960+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.961+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.961+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.961+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.961+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.963+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.965+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.965+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.966+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.968+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.968+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.968+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.969+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.970+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

After:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

2022-10-28T10:41:08.970+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.970+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.971+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.971+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.971+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:08.974+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.974+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.975+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.976+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.977+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.977+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.978+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.978+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.979+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.980+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.980+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.981+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.981+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:08.982+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.983+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.983+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.983+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.983+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.984+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.984+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.985+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.985+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.985+0530	DEBUG	Query-20221028_051108_00005_2ymdz-7129	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'store_sales'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:08.987+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.0 is PLANNED
2022-10-28T10:41:08.987+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.1 is PLANNED
2022-10-28T10:41:08.987+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.2 is PLANNED
2022-10-28T10:41:08.987+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is STARTING
2022-10-28T10:41:08.987+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is PLANNED
2022-10-28T10:41:08.987+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is PLANNED
2022-10-28T10:41:08.987+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is PLANNED
2022-10-28T10:41:08.988+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is SCHEDULING
2022-10-28T10:41:08.988+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.2 is SCHEDULING
2022-10-28T10:41:08.988+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.2 is RUNNING
2022-10-28T10:41:08.989+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is SCHEDULED
2022-10-28T10:41:08.989+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is RUNNING
2022-10-28T10:41:08.989+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.1 is SCHEDULING
2022-10-28T10:41:08.989+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.1 is RUNNING
2022-10-28T10:41:08.989+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.0 is SCHEDULING
2022-10-28T10:41:08.989+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.2.0.0 is RUNNING
2022-10-28T10:41:08.989+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is SCHEDULING
2022-10-28T10:41:08.989+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is SCHEDULED
2022-10-28T10:41:09.001+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is SCHEDULING
2022-10-28T10:41:09.001+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is SCHEDULED
2022-10-28T10:41:09.008+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.0.0.0 is RUNNING
2022-10-28T10:41:09.011+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.0 is RUNNING
2022-10-28T10:41:09.045+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.1.0.0 is RUNNING
2022-10-28T10:41:09.047+0530	DEBUG	Task-20221028_051108_00005_2ymdz.1.0.0-7148	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051108_00005_2ymdz.1.0.0
2022-10-28T10:41:09.051+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-16-107	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageWithPositionComparator_20221028_051109_41
2022-10-28T10:41:09.051+0530	DEBUG	Task-20221028_051108_00005_2ymdz.0.0.0-7060	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051108_00005_2ymdz.0.0.0
2022-10-28T10:41:09.054+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is RUNNING
2022-10-28T10:41:09.054+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is RUNNING
2022-10-28T10:41:09.056+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-139	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CursorProcessor_20221028_051109_42
2022-10-28T10:41:09.058+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-139	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageFilter_20221028_051109_43
2022-10-28T10:41:09.059+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-139	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageProjectionWork_20221028_051109_44
2022-10-28T10:41:09.060+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-139	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageProjectionWork_20221028_051109_45
2022-10-28T10:41:09.061+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-139	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051108_00005_2ymdz.2.0.0
2022-10-28T10:41:09.062+0530	DEBUG	20221028_051108_00005_2ymdz.2.0.0-0-103	io.trino.connector.informationschema.InformationSchemaPageSourceProvider	Building information schema table (queryId=20221028_051108_00005_2ymdz; tableHandle=InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.store_sales], limit=OptionalLong.empty})
2022-10-28T10:41:09.062+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is RUNNING
2022-10-28T10:41:09.069+0530	DEBUG	20221028_051108_00005_2ymdz.2.0.0-0-103	io.trino.security.AccessControl	Invocation of filterTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, catalogName='tpcds', tableNames=[sf1.store_sales]) succeeded in 20.58us
2022-10-28T10:41:09.069+0530	DEBUG	20221028_051108_00005_2ymdz.2.0.0-0-103	io.trino.security.AccessControl	Invocation of filterColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051108_00005_2ymdz}, tableName=tpcds.sf1.store_sales, columns=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit]) succeeded in 19.04us
2022-10-28T10:41:09.072+0530	DEBUG	20221028_051108_00005_2ymdz.2.0.0-0-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.2.0.0-0 io.trino.connector.informationschema.InformationSchemaSplit@6ddc171d (start = 4.23878577631083E8, wall = 10 ms, cpu = 9 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:41:09.072+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.2.0.0 is FLUSHING
2022-10-28T10:41:09.072+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is FLUSHING
2022-10-28T10:41:09.080+0530	DEBUG	http-worker-133	io.trino.execution.SqlTask	Aborting task 20221028_051108_00005_2ymdz.2.0.0 output 0
2022-10-28T10:41:09.080+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.2.0.0 is FINISHED
2022-10-28T10:41:09.081+0530	DEBUG	Task-20221028_051108_00005_2ymdz.2.0.0-7064	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051108_00005_2ymdz.2.0.0
2022-10-28T10:41:09.081+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-1-107	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PagesIndexComparator_20221028_051109_46
2022-10-28T10:41:09.081+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.2 is PENDING
2022-10-28T10:41:09.081+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.2 is FINISHED
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-15-98	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-15  (start = 4.23878565174708E8, wall = 33 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-10-108	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-10  (start = 4.23878564945791E8, wall = 33 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-9-96	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-9  (start = 4.23878564927291E8, wall = 34 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-14-101	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-14  (start = 4.23878565154833E8, wall = 33 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-12-112	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-12  (start = 4.23878565037166E8, wall = 33 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.082+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-0-97	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-0  (start = 4.23878564410541E8, wall = 34 ms, cpu = 1 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-3-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-3  (start = 4.23878564489208E8, wall = 34 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-1-107	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-1  (start = 4.23878564417083E8, wall = 35 ms, cpu = 2 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-13-95	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-13  (start = 4.23878565123375E8, wall = 34 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-5-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-5  (start = 4.23878564535541E8, wall = 35 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-4-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-4  (start = 4.23878564515208E8, wall = 35 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-7-109	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-7  (start = 4.23878564765333E8, wall = 35 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-6-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-6  (start = 4.23878564670583E8, wall = 35 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-2-94	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-2  (start = 4.23878564476791E8, wall = 35 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.083+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-16-107	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-16  (start = 4.23878565273041E8, wall = 34 ms, cpu = 2 ms, wait = 0 ms, calls = 2) is finished
2022-10-28T10:41:09.084+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-8-104	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-8  (start = 4.23878564897333E8, wall = 35 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.084+0530	DEBUG	20221028_051108_00005_2ymdz.1.0.0-11-100	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.1.0.0-11  (start = 4.23878564990291E8, wall = 35 ms, cpu = 0 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:41:09.084+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.1.0.0 is FLUSHING
2022-10-28T10:41:09.085+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is FLUSHING
2022-10-28T10:41:09.085+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_051108_00005_2ymdz.1.0.0 output 0
2022-10-28T10:41:09.085+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.1.0.0 is FINISHED
2022-10-28T10:41:09.086+0530	DEBUG	Task-20221028_051108_00005_2ymdz.1.0.0-7052	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051108_00005_2ymdz.1.0.0
2022-10-28T10:41:09.086+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.1 is FINISHED
2022-10-28T10:41:09.086+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.1 is PENDING
2022-10-28T10:41:09.086+0530	DEBUG	20221028_051108_00005_2ymdz.0.0.0-0-102	io.trino.execution.executor.TaskExecutor	Split 20221028_051108_00005_2ymdz.0.0.0-0  (start = 4.238785681095E8, wall = 35 ms, cpu = 3 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:09.087+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:41:09.087+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is FLUSHING
2022-10-28T10:41:09.088+0530	DEBUG	http-worker-143	io.trino.execution.SqlTask	Aborting task 20221028_051108_00005_2ymdz.0.0.0 output 0
2022-10-28T10:41:09.088+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051108_00005_2ymdz.0.0.0 is FINISHED
2022-10-28T10:41:09.088+0530	DEBUG	Task-20221028_051108_00005_2ymdz.0.0.0-7062	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051108_00005_2ymdz.0.0.0
2022-10-28T10:41:09.089+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.0 is PENDING
2022-10-28T10:41:09.089+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051108_00005_2ymdz.0 is FINISHED
2022-10-28T10:41:09.089+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.0 is FINISHED
2022-10-28T10:41:09.089+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.2 is FINISHED
2022-10-28T10:41:09.089+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is FINISHING
2022-10-28T10:41:09.089+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051108_00005_2ymdz.1 is FINISHED
2022-10-28T10:41:09.204+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051108_00005_2ymdz is FINISHED
2022-10-28T10:41:09.204+0530	INFO	dispatcher-query-2	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051108_00005_2ymdz :: FINISHED :: elapsed 320ms :: planning 89ms :: waiting 5ms :: scheduling 90ms :: running 18ms :: finishing 123ms :: begin 2022-10-28T10:41:08.883+05:30 :: end 2022-10-28T10:41:09.203+05:30
2022-10-28T10:41:45.159+0530	DEBUG	dispatcher-query-2	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 80.88us
2022-10-28T10:41:45.160+0530	DEBUG	dispatcher-query-2	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 23.83us
2022-10-28T10:41:45.162+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is QUEUED
2022-10-28T10:41:45.163+0530	INFO	Query-20221028_051145_00006_2ymdz-7137	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:41:45.167+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of checkCanShowColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, table=tpcds.sf1.item) succeeded in 101.67us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_catalog', type=varchar) succeeded in 29.79us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_schema', type=varchar) succeeded in 10.08us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='table_name', type=varchar) succeeded in 9.29us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_name', type=varchar) succeeded in 9.58us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='ordinal_position', type=bigint) succeeded in 10.08us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_default', type=varchar) succeeded in 8.92us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='is_nullable', type=varchar) succeeded in 8.92us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='data_type', type=varchar) succeeded in 9.21us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='comment', type=varchar) succeeded in 8.96us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='extra_info', type=varchar) succeeded in 8.96us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnName='column_comment', type=varchar) succeeded in 8.96us
2022-10-28T10:41:45.169+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns) succeeded in 26.88us
2022-10-28T10:41:45.173+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7137	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.information_schema.columns, columnNames=[ordinal_position, extra_info, table_schema, column_name, data_type, comment, table_name]) succeeded in 88.50us
2022-10-28T10:41:45.174+0530	INFO	Query-20221028_051145_00006_2ymdz-7137	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:41:45.174+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is DISPATCHING
2022-10-28T10:41:45.174+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is PLANNING
2022-10-28T10:41:45.174+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:41:45.178+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:45.180+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:45.181+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ Project[]
         │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ Project[]
               │   Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
                      Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", CAST('' AS varchar))
                      expr_0 := COALESCE("comment", CAST('' AS varchar))
                      table_catalog := table_catalog
                      table_schema := table_schema
                      table_name := table_name
                      column_name := column_name
                      ordinal_position := ordinal_position
                      column_default := column_default
                      is_nullable := is_nullable
                      data_type := data_type
                      comment := comment
                      extra_info := extra_info
                      column_comment := column_comment

2022-10-28T10:41:45.181+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneOutputSourceColumns
Before:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 2]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:45.182+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 3]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:45.182+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 11]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:45.182+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 4]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:45.183+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 12]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:45.183+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 5]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:45.183+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 13]
       Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:45.183+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneSortColumns
Before:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Project[]
      │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ GroupReference[groupId = 6]
             Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
             Estimates: 

2022-10-28T10:41:45.184+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 7]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
          Estimates: 

2022-10-28T10:41:45.185+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 16]
       Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

2022-10-28T10:41:45.185+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 7]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ Project[]
   │   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   │   expr := COALESCE("extra_info", CAST('' AS varchar))
   │   expr_0 := COALESCE("comment", CAST('' AS varchar))
   └─ GroupReference[groupId = 8]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
          Estimates: 

2022-10-28T10:41:45.186+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
└─ GroupReference[groupId = 17]
       Layout: [column_name:varchar, ordinal_position:bigint, data_type:varchar, expr:varchar, expr_0:varchar]
       Estimates: 

After:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

2022-10-28T10:41:45.186+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneFilterColumns
Before:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 8]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

After:
FilterProject[filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ Project[]
   │   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
   │   Estimates: 
   └─ GroupReference[groupId = 9]
          Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
          Estimates: 

2022-10-28T10:41:45.188+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneTableScanColumns
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 9]
       Layout: [table_catalog:varchar, table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, column_default:varchar, is_nullable:varchar, data_type:varchar, comment:varchar, extra_info:varchar, column_comment:varchar]
       Estimates: 

After:
ScanProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    table_schema := table_schema
    table_name := table_name
    column_name := column_name
    ordinal_position := ordinal_position
    data_type := data_type
    comment := comment
    extra_info := extra_info

2022-10-28T10:41:45.188+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 20]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
GroupReference[groupId = 20]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 

2022-10-28T10:41:45.189+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", CAST('' AS varchar))
             expr_0 := COALESCE("comment", CAST('' AS varchar))
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:45.190+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", CAST('' AS varchar))
             expr_0 := COALESCE("comment", CAST('' AS varchar))
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:45.191+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.ExpressionRewriteRuleSet$ProjectExpressionRewrite
Before:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", CAST('' AS varchar))
│   expr_0 := COALESCE("comment", CAST('' AS varchar))
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
Project[]
│   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   expr := COALESCE("extra_info", VARCHAR '')
│   expr_0 := COALESCE("comment", VARCHAR '')
└─ GroupReference[groupId = 5]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

2022-10-28T10:41:45.194+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.ExpressionRewriteRuleSet$FilterExpressionRewrite
Before:
Filter[filterPredicate = (("table_schema" = CAST('sf1' AS varchar)) AND ("table_name" = CAST('item' AS varchar)))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
Filter[filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

2022-10-28T10:41:45.196+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             table_schema := table_schema
             table_name := table_name
             column_name := column_name
             ordinal_position := ordinal_position
             data_type := data_type
             comment := comment
             extra_info := extra_info

2022-10-28T10:41:45.197+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.197+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.197+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.198+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.198+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.198+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.203+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.204+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.204+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.205+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.205+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.205+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.205+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.206+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.209+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.211+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.211+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.212+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.*.*], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.215+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PushPredicateIntoTableScan
Before:
Filter[filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
│   Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
       Estimates: 

After:
ScanFilter[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

2022-10-28T10:41:45.216+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.218+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.218+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.220+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.220+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.220+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.220+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.221+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.222+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.222+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.223+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.225+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.226+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.226+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.226+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.226+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.227+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.227+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.227+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.228+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.228+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.228+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.228+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.229+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.230+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.231+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.231+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.233+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.233+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.233+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.233+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.234+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.234+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.234+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.234+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.234+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.235+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

After:
TableScan[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}]
    Layout: [table_schema:varchar, table_name:varchar, column_name:varchar, ordinal_position:bigint, data_type:varchar, comment:varchar, extra_info:varchar]
    Estimates: 
    ordinal_position := ordinal_position
    extra_info := extra_info
    table_schema := table_schema
    column_name := column_name
    data_type := data_type
    comment := comment
    table_name := table_name

2022-10-28T10:41:45.235+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.235+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.236+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.237+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.237+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ Sort[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
             Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
             Estimates: 
             expr := COALESCE("extra_info", VARCHAR '')
             expr_0 := COALESCE("comment", VARCHAR '')
             ordinal_position := ordinal_position
             extra_info := extra_info
             table_schema := table_schema
             column_name := column_name
             data_type := data_type
             comment := comment
             table_name := table_name

2022-10-28T10:41:45.239+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.239+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.240+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.241+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.241+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.242+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.242+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.243+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.244+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.244+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.255+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.255+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.256+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ RemoteExchange[type = REPARTITION]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                   Estimates: 
                   expr := COALESCE("extra_info", VARCHAR '')
                   expr_0 := COALESCE("comment", VARCHAR '')
                   ordinal_position := ordinal_position
                   extra_info := extra_info
                   table_schema := table_schema
                   column_name := column_name
                   data_type := data_type
                   comment := comment
                   table_name := table_name

2022-10-28T10:41:45.257+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.257+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.257+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.258+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.258+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.258+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.259+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.259+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.259+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.259+0530	DEBUG	Query-20221028_051145_00006_2ymdz-7032	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [Column, Type, Extra, Comment]]
│   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
│   Estimates: 
│   Column := column_name
│   Type := data_type
│   Extra := expr
│   Comment := expr_0
└─ Project[]
   │   Layout: [column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
   │   Estimates: 
   └─ RemoteMerge[orderBy = [ordinal_position ASC NULLS LAST]]
      │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
      │   Estimates: 
      └─ LocalMerge[orderBy = [ordinal_position ASC NULLS LAST]]
         │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
         │   Estimates: 
         └─ PartialSort[orderBy = [ordinal_position ASC NULLS LAST]]
            │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
            │   Estimates: 
            └─ RemoteExchange[type = REPARTITION]
               │   Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
               │   Estimates: 
               └─ ScanFilterProject[table = $info_schema@tpcds:InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty}, filterPredicate = (("table_schema" = VARCHAR 'sf1') AND ("table_name" = VARCHAR 'item'))]
                      Layout: [ordinal_position:bigint, column_name:varchar, data_type:varchar, expr:varchar, expr_0:varchar]
                      Estimates: 
                      expr := COALESCE("extra_info", VARCHAR '')
                      expr_0 := COALESCE("comment", VARCHAR '')
                      ordinal_position := ordinal_position
                      extra_info := extra_info
                      table_schema := table_schema
                      column_name := column_name
                      data_type := data_type
                      comment := comment
                      table_name := table_name

2022-10-28T10:41:45.261+0530	DEBUG	query-execution-0	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.0 is PLANNED
2022-10-28T10:41:45.261+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.1 is PLANNED
2022-10-28T10:41:45.261+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.2 is PLANNED
2022-10-28T10:41:45.261+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is STARTING
2022-10-28T10:41:45.261+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is PLANNED
2022-10-28T10:41:45.261+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is PLANNED
2022-10-28T10:41:45.261+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is PLANNED
2022-10-28T10:41:45.262+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is SCHEDULING
2022-10-28T10:41:45.262+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.2 is SCHEDULING
2022-10-28T10:41:45.262+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.2 is RUNNING
2022-10-28T10:41:45.263+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is RUNNING
2022-10-28T10:41:45.263+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.1 is SCHEDULING
2022-10-28T10:41:45.263+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is SCHEDULED
2022-10-28T10:41:45.263+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.1 is RUNNING
2022-10-28T10:41:45.263+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.0 is SCHEDULING
2022-10-28T10:41:45.264+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.2.0.0 is RUNNING
2022-10-28T10:41:45.264+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is SCHEDULING
2022-10-28T10:41:45.264+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is SCHEDULED
2022-10-28T10:41:45.264+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.0 is RUNNING
2022-10-28T10:41:45.264+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.1.0.0 is RUNNING
2022-10-28T10:41:45.265+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is SCHEDULING
2022-10-28T10:41:45.265+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is SCHEDULED
2022-10-28T10:41:45.265+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.0.0.0 is RUNNING
2022-10-28T10:41:45.266+0530	DEBUG	Task-20221028_051145_00006_2ymdz.1.0.0-7145	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051145_00006_2ymdz.1.0.0
2022-10-28T10:41:45.267+0530	DEBUG	Task-20221028_051145_00006_2ymdz.0.0.0-133	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051145_00006_2ymdz.0.0.0
2022-10-28T10:41:45.267+0530	DEBUG	Task-20221028_051145_00006_2ymdz.2.0.0-7058	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/CursorProcessor_20221028_051145_47
2022-10-28T10:41:45.268+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is RUNNING
2022-10-28T10:41:45.269+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is RUNNING
2022-10-28T10:41:45.269+0530	DEBUG	Task-20221028_051145_00006_2ymdz.2.0.0-7058	io.trino.util.CompilerUtils	Defining class: io/trino/$gen/PageFilter_20221028_051145_48
2022-10-28T10:41:45.270+0530	DEBUG	Task-20221028_051145_00006_2ymdz.2.0.0-7058	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051145_00006_2ymdz.2.0.0
2022-10-28T10:41:45.270+0530	DEBUG	20221028_051145_00006_2ymdz.2.0.0-0-99	io.trino.connector.informationschema.InformationSchemaPageSourceProvider	Building information schema table (queryId=20221028_051145_00006_2ymdz; tableHandle=InformationSchemaTableHandle{catalogName=tpcds, table=COLUMNS, prefixes=[tpcds.sf1.item], limit=OptionalLong.empty})
2022-10-28T10:41:45.271+0530	DEBUG	20221028_051145_00006_2ymdz.2.0.0-0-99	io.trino.security.AccessControl	Invocation of filterTables(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, catalogName='tpcds', tableNames=[sf1.item]) succeeded in 17.38us
2022-10-28T10:41:45.271+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is RUNNING
2022-10-28T10:41:45.271+0530	DEBUG	20221028_051145_00006_2ymdz.2.0.0-0-99	io.trino.security.AccessControl	Invocation of filterColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051145_00006_2ymdz}, tableName=tpcds.sf1.item, columns=[i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]) succeeded in 18.92us
2022-10-28T10:41:45.280+0530	DEBUG	20221028_051145_00006_2ymdz.2.0.0-0-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.2.0.0-0 io.trino.connector.informationschema.InformationSchemaSplit@78bcbd3d (start = 4.23914787080791E8, wall = 9 ms, cpu = 1 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:41:45.280+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.2.0.0 is FLUSHING
2022-10-28T10:41:45.281+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is FLUSHING
2022-10-28T10:41:45.282+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_051145_00006_2ymdz.2.0.0 output 0
2022-10-28T10:41:45.282+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.2.0.0 is FINISHED
2022-10-28T10:41:45.282+0530	DEBUG	Task-20221028_051145_00006_2ymdz.2.0.0-7062	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051145_00006_2ymdz.2.0.0
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-2-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-2  (start = 4.23914783001208E8, wall = 16 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-0-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-0  (start = 4.23914782980125E8, wall = 16 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-5-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-5  (start = 4.23914783098416E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-3-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-3  (start = 4.23914783058416E8, wall = 16 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-7-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-7  (start = 4.23914783131625E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-8-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-8  (start = 4.23914783210125E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-10-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-10  (start = 4.23914783273166E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-11-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-11  (start = 4.23914783309333E8, wall = 16 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-12-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-12  (start = 4.23914783321416E8, wall = 16 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-14-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-14  (start = 4.23914783425875E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-9-7077	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-9  (start = 4.23914783201833E8, wall = 17 ms, cpu = 0 ms, wait = 1 ms, calls = 3) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-15-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-15  (start = 4.23914783433541E8, wall = 16 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-1-109	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-1  (start = 4.23914782998875E8, wall = 17 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.283+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-13-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-13  (start = 4.23914783413875E8, wall = 17 ms, cpu = 0 ms, wait = 1 ms, calls = 4) is finished
2022-10-28T10:41:45.284+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-4-111	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-4  (start = 4.23914783107125E8, wall = 17 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:41:45.284+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-6-97	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-6  (start = 4.23914783115916E8, wall = 17 ms, cpu = 0 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:41:45.284+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.2 is PENDING
2022-10-28T10:41:45.284+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.2 is FINISHED
2022-10-28T10:41:45.285+0530	DEBUG	20221028_051145_00006_2ymdz.1.0.0-16-104	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.1.0.0-16  (start = 4.23914783469166E8, wall = 18 ms, cpu = 1 ms, wait = 0 ms, calls = 3) is finished
2022-10-28T10:41:45.285+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.1.0.0 is FLUSHING
2022-10-28T10:41:45.286+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is FLUSHING
2022-10-28T10:41:45.288+0530	DEBUG	http-worker-7058	io.trino.execution.SqlTask	Aborting task 20221028_051145_00006_2ymdz.1.0.0 output 0
2022-10-28T10:41:45.288+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.1.0.0 is FINISHED
2022-10-28T10:41:45.288+0530	DEBUG	Task-20221028_051145_00006_2ymdz.1.0.0-7063	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051145_00006_2ymdz.1.0.0
2022-10-28T10:41:45.289+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.1 is PENDING
2022-10-28T10:41:45.289+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.1 is FINISHED
2022-10-28T10:41:45.289+0530	DEBUG	20221028_051145_00006_2ymdz.0.0.0-0-112	io.trino.execution.executor.TaskExecutor	Split 20221028_051145_00006_2ymdz.0.0.0-0  (start = 4.23914783960291E8, wall = 21 ms, cpu = 0 ms, wait = 0 ms, calls = 4) is finished
2022-10-28T10:41:45.289+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:41:45.289+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is FLUSHING
2022-10-28T10:41:45.291+0530	DEBUG	http-worker-7145	io.trino.execution.SqlTask	Aborting task 20221028_051145_00006_2ymdz.0.0.0 output 0
2022-10-28T10:41:45.291+0530	DEBUG	task-notification-1	io.trino.execution.TaskStateMachine	Task 20221028_051145_00006_2ymdz.0.0.0 is FINISHED
2022-10-28T10:41:45.291+0530	DEBUG	Task-20221028_051145_00006_2ymdz.0.0.0-7053	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051145_00006_2ymdz.0.0.0
2022-10-28T10:41:45.292+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.0 is PENDING
2022-10-28T10:41:45.292+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051145_00006_2ymdz.0 is FINISHED
2022-10-28T10:41:45.292+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.0 is FINISHED
2022-10-28T10:41:45.292+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.1 is FINISHED
2022-10-28T10:41:45.292+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is FINISHING
2022-10-28T10:41:45.292+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051145_00006_2ymdz.2 is FINISHED
2022-10-28T10:41:45.414+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051145_00006_2ymdz is FINISHED
2022-10-28T10:41:45.414+0530	INFO	dispatcher-query-4	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051145_00006_2ymdz :: FINISHED :: elapsed 251ms :: planning 87ms :: waiting 4ms :: scheduling 21ms :: running 12ms :: finishing 131ms :: begin 2022-10-28T10:41:45.162+05:30 :: end 2022-10-28T10:41:45.413+05:30
2022-10-28T10:42:00.400+0530	DEBUG	dispatcher-query-4	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 40.63us
2022-10-28T10:42:00.401+0530	DEBUG	dispatcher-query-4	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 11.63us
2022-10-28T10:42:00.401+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is QUEUED
2022-10-28T10:42:00.401+0530	INFO	Query-20221028_051200_00007_2ymdz-7032	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:42:00.402+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_sk', type=bigint) succeeded in 35.38us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_id', type=char(16)) succeeded in 12.63us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_start_date', type=date) succeeded in 9.17us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_end_date', type=date) succeeded in 8.38us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_desc', type=varchar(200)) succeeded in 8.08us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_current_price', type=decimal(7,2)) succeeded in 7.92us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_wholesale_cost', type=decimal(7,2)) succeeded in 8.17us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand_id', type=integer) succeeded in 8.33us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand', type=char(50)) succeeded in 8.13us
2022-10-28T10:42:00.403+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class_id', type=integer) succeeded in 8.79us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class', type=char(50)) succeeded in 8.38us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category_id', type=integer) succeeded in 8.00us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category', type=char(50)) succeeded in 8.25us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact_id', type=integer) succeeded in 13.71us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact', type=char(50)) succeeded in 8.50us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_size', type=char(20)) succeeded in 8.38us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_formulation', type=char(20)) succeeded in 7.63us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_color', type=char(20)) succeeded in 7.71us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_units', type=char(10)) succeeded in 10.79us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_container', type=char(10)) succeeded in 7.54us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manager_id', type=integer) succeeded in 8.25us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnName='i_product_name', type=char(50)) succeeded in 7.67us
2022-10-28T10:42:00.404+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item) succeeded in 15.46us
2022-10-28T10:42:00.406+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7032	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051200_00007_2ymdz}, tableName=tpcds.sf1.item, columnNames=[i_item_desc, i_container, i_wholesale_cost, i_manufact_id, i_brand_id, i_formulation, i_current_price, i_size, i_rec_start_date, i_manufact, i_item_sk, i_manager_id, i_item_id, i_class_id, i_class, i_category, i_category_id, i_brand, i_units, i_rec_end_date, i_color, i_product_name]) succeeded in 24.04us
2022-10-28T10:42:00.406+0530	INFO	Query-20221028_051200_00007_2ymdz-7032	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:42:00.406+0530	DEBUG	dispatcher-query-6	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is DISPATCHING
2022-10-28T10:42:00.406+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is PLANNING
2022-10-28T10:42:00.408+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.410+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.410+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.411+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:42:00.411+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
GroupReference[groupId = 4]
    Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
    Estimates: 

2022-10-28T10:42:00.412+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:42:00.412+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
GroupReference[groupId = 6]
    Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
    Estimates: 

2022-10-28T10:42:00.412+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_sk := tpcds:i_item_sk
       i_item_id := tpcds:i_item_id
       i_rec_start_date := tpcds:i_rec_start_date
       i_rec_end_date := tpcds:i_rec_end_date
       i_item_desc := tpcds:i_item_desc
       i_current_price := tpcds:i_current_price
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_brand_id := tpcds:i_brand_id
       i_brand := tpcds:i_brand
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category_id := tpcds:i_category_id
       i_category := tpcds:i_category
       i_manufact_id := tpcds:i_manufact_id
       i_manufact := tpcds:i_manufact
       i_size := tpcds:i_size
       i_formulation := tpcds:i_formulation
       i_color := tpcds:i_color
       i_units := tpcds:i_units
       i_container := tpcds:i_container
       i_manager_id := tpcds:i_manager_id
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.413+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_sk := tpcds:i_item_sk
       i_item_id := tpcds:i_item_id
       i_rec_start_date := tpcds:i_rec_start_date
       i_rec_end_date := tpcds:i_rec_end_date
       i_item_desc := tpcds:i_item_desc
       i_current_price := tpcds:i_current_price
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_brand_id := tpcds:i_brand_id
       i_brand := tpcds:i_brand
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category_id := tpcds:i_category_id
       i_category := tpcds:i_category
       i_manufact_id := tpcds:i_manufact_id
       i_manufact := tpcds:i_manufact
       i_size := tpcds:i_size
       i_formulation := tpcds:i_formulation
       i_color := tpcds:i_color
       i_units := tpcds:i_units
       i_container := tpcds:i_container
       i_manager_id := tpcds:i_manager_id
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.413+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_sk := tpcds:i_item_sk
       i_item_id := tpcds:i_item_id
       i_rec_start_date := tpcds:i_rec_start_date
       i_rec_end_date := tpcds:i_rec_end_date
       i_item_desc := tpcds:i_item_desc
       i_current_price := tpcds:i_current_price
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_brand_id := tpcds:i_brand_id
       i_brand := tpcds:i_brand
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category_id := tpcds:i_category_id
       i_category := tpcds:i_category
       i_manufact_id := tpcds:i_manufact_id
       i_manufact := tpcds:i_manufact
       i_size := tpcds:i_size
       i_formulation := tpcds:i_formulation
       i_color := tpcds:i_color
       i_units := tpcds:i_units
       i_container := tpcds:i_container
       i_manager_id := tpcds:i_manager_id
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.413+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.413+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.414+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.414+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.414+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.414+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.414+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.415+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.415+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.415+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.415+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.415+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.416+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.416+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.416+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.416+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.416+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.417+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.418+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.418+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.418+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.418+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.418+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.419+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.420+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.421+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.422+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = tpcds:item:sf1.0]
    Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
    Estimates: 
    i_item_desc := tpcds:i_item_desc
    i_container := tpcds:i_container
    i_wholesale_cost := tpcds:i_wholesale_cost
    i_manufact_id := tpcds:i_manufact_id
    i_brand_id := tpcds:i_brand_id
    i_formulation := tpcds:i_formulation
    i_current_price := tpcds:i_current_price
    i_size := tpcds:i_size
    i_rec_start_date := tpcds:i_rec_start_date
    i_manufact := tpcds:i_manufact
    i_item_sk := tpcds:i_item_sk
    i_manager_id := tpcds:i_manager_id
    i_item_id := tpcds:i_item_id
    i_class_id := tpcds:i_class_id
    i_class := tpcds:i_class
    i_category := tpcds:i_category
    i_category_id := tpcds:i_category_id
    i_brand := tpcds:i_brand
    i_units := tpcds:i_units
    i_rec_end_date := tpcds:i_rec_end_date
    i_color := tpcds:i_color
    i_product_name := tpcds:i_product_name

After:
TableScan[table = tpcds:item:sf1.0]
    Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
    Estimates: 
    i_item_desc := tpcds:i_item_desc
    i_container := tpcds:i_container
    i_wholesale_cost := tpcds:i_wholesale_cost
    i_manufact_id := tpcds:i_manufact_id
    i_brand_id := tpcds:i_brand_id
    i_formulation := tpcds:i_formulation
    i_current_price := tpcds:i_current_price
    i_size := tpcds:i_size
    i_rec_start_date := tpcds:i_rec_start_date
    i_manufact := tpcds:i_manufact
    i_item_sk := tpcds:i_item_sk
    i_manager_id := tpcds:i_manager_id
    i_item_id := tpcds:i_item_id
    i_class_id := tpcds:i_class_id
    i_class := tpcds:i_class
    i_category := tpcds:i_category
    i_category_id := tpcds:i_category_id
    i_brand := tpcds:i_brand
    i_units := tpcds:i_units
    i_rec_end_date := tpcds:i_rec_end_date
    i_color := tpcds:i_color
    i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.423+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.424+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.425+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.425+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.425+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.425+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.425+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.426+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.426+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.426+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.426+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.426+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.427+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.428+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.428+0530	DEBUG	Query-20221028_051200_00007_2ymdz-7029	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, i_brand, i_class_id, i_class, i_category_id, i_category, i_manufact_id, i_manufact, i_size, i_formulation, i_color, i_units, i_container, i_manager_id, i_product_name]]
│   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 
       i_item_desc := tpcds:i_item_desc
       i_container := tpcds:i_container
       i_wholesale_cost := tpcds:i_wholesale_cost
       i_manufact_id := tpcds:i_manufact_id
       i_brand_id := tpcds:i_brand_id
       i_formulation := tpcds:i_formulation
       i_current_price := tpcds:i_current_price
       i_size := tpcds:i_size
       i_rec_start_date := tpcds:i_rec_start_date
       i_manufact := tpcds:i_manufact
       i_item_sk := tpcds:i_item_sk
       i_manager_id := tpcds:i_manager_id
       i_item_id := tpcds:i_item_id
       i_class_id := tpcds:i_class_id
       i_class := tpcds:i_class
       i_category := tpcds:i_category
       i_category_id := tpcds:i_category_id
       i_brand := tpcds:i_brand
       i_units := tpcds:i_units
       i_rec_end_date := tpcds:i_rec_end_date
       i_color := tpcds:i_color
       i_product_name := tpcds:i_product_name

2022-10-28T10:42:00.429+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051200_00007_2ymdz.0 is PLANNED
2022-10-28T10:42:00.429+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is STARTING
2022-10-28T10:42:00.429+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is PLANNED
2022-10-28T10:42:00.430+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is SCHEDULING
2022-10-28T10:42:00.430+0530	DEBUG	query-execution-1	io.trino.execution.StageStateMachine	Stage 20221028_051200_00007_2ymdz.0 is SCHEDULING
2022-10-28T10:42:00.430+0530	DEBUG	query-execution-4	io.trino.execution.StageStateMachine	Stage 20221028_051200_00007_2ymdz.0 is RUNNING
2022-10-28T10:42:00.431+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is SCHEDULED
2022-10-28T10:42:00.431+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is RUNNING
2022-10-28T10:42:00.431+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051200_00007_2ymdz.0.0.0 is RUNNING
2022-10-28T10:42:00.435+0530	DEBUG	Task-20221028_051200_00007_2ymdz.0.0.0-137	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051200_00007_2ymdz.0.0.0
2022-10-28T10:42:00.436+0530	DEBUG	20221028_051200_00007_2ymdz.0.0.0-2-7077	io.trino.execution.executor.TaskExecutor	Split 20221028_051200_00007_2ymdz.0.0.0-2 TpcdsSplit{partNumber=2, totalParts=4, noSexism=false} (start = 4.23929952144666E8, wall = 1 ms, cpu = 1 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:42:00.436+0530	DEBUG	20221028_051200_00007_2ymdz.0.0.0-3-99	io.trino.execution.executor.TaskExecutor	Split 20221028_051200_00007_2ymdz.0.0.0-3 TpcdsSplit{partNumber=3, totalParts=4, noSexism=false} (start = 4.2392995216875E8, wall = 1 ms, cpu = 1 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:42:00.436+0530	DEBUG	20221028_051200_00007_2ymdz.0.0.0-0-103	io.trino.execution.executor.TaskExecutor	Split 20221028_051200_00007_2ymdz.0.0.0-0 TpcdsSplit{partNumber=1, totalParts=4, noSexism=false} (start = 4.2392995210525E8, wall = 1 ms, cpu = 1 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:42:00.437+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is RUNNING
2022-10-28T10:42:00.893+0530	DEBUG	20221028_051200_00007_2ymdz.0.0.0-1-113	io.trino.execution.executor.TaskExecutor	Split 20221028_051200_00007_2ymdz.0.0.0-1 TpcdsSplit{partNumber=0, totalParts=4, noSexism=false} (start = 4.23929952125583E8, wall = 457 ms, cpu = 441 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:42:00.893+0530	DEBUG	task-notification-0	io.trino.execution.TaskStateMachine	Task 20221028_051200_00007_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:42:00.894+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is FLUSHING
2022-10-28T10:42:00.895+0530	DEBUG	http-worker-7056	io.trino.execution.SqlTask	Aborting task 20221028_051200_00007_2ymdz.0.0.0 output 0
2022-10-28T10:42:00.895+0530	DEBUG	task-notification-4	io.trino.execution.TaskStateMachine	Task 20221028_051200_00007_2ymdz.0.0.0 is FINISHED
2022-10-28T10:42:00.896+0530	DEBUG	Task-20221028_051200_00007_2ymdz.0.0.0-7064	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051200_00007_2ymdz.0.0.0
2022-10-28T10:42:00.897+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051200_00007_2ymdz.0 is PENDING
2022-10-28T10:42:00.897+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051200_00007_2ymdz.0 is FINISHED
2022-10-28T10:42:00.897+0530	DEBUG	query-execution-3	io.trino.execution.StageStateMachine	Stage 20221028_051200_00007_2ymdz.0 is FINISHED
2022-10-28T10:42:00.897+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is FINISHING
2022-10-28T10:42:01.159+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051200_00007_2ymdz is FINISHED
2022-10-28T10:42:01.160+0530	INFO	dispatcher-query-6	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051200_00007_2ymdz :: FINISHED :: elapsed 758ms :: planning 23ms :: waiting 5ms :: scheduling 11ms :: running 460ms :: finishing 264ms :: begin 2022-10-28T10:42:00.401+05:30 :: end 2022-10-28T10:42:01.159+05:30
2022-10-28T10:42:27.291+0530	DEBUG	dispatcher-query-6	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 27.96us
2022-10-28T10:42:27.292+0530	DEBUG	dispatcher-query-6	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 9.46us
2022-10-28T10:42:27.297+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051227_00008_2ymdz is QUEUED
2022-10-28T10:42:27.298+0530	INFO	Query-20221028_051227_00008_2ymdz-7032	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:42:27.299+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_sk', type=bigint) succeeded in 28.75us
2022-10-28T10:42:27.299+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_id', type=char(16)) succeeded in 12.67us
2022-10-28T10:42:27.299+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_start_date', type=date) succeeded in 9.46us
2022-10-28T10:42:27.299+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_end_date', type=date) succeeded in 10.71us
2022-10-28T10:42:27.299+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_desc', type=varchar(200)) succeeded in 8.79us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_current_price', type=decimal(7,2)) succeeded in 8.67us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_wholesale_cost', type=decimal(7,2)) succeeded in 12.38us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand_id', type=integer) succeeded in 10.08us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand', type=char(50)) succeeded in 20.50us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class_id', type=integer) succeeded in 11.08us
2022-10-28T10:42:27.300+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051227_00008_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class', type=char(50)) succeeded in 10.21us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category_id', type=integer) succeeded in 43.50us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category', type=char(50)) succeeded in 15.29us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact_id', type=integer) succeeded in 10.75us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact', type=char(50)) succeeded in 10.50us
2022-10-28T10:42:27.300+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_size', type=char(20)) succeeded in 9.71us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_formulation', type=char(20)) succeeded in 9.54us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_color', type=char(20)) succeeded in 9.75us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_units', type=char(10)) succeeded in 9.50us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_container', type=char(10)) succeeded in 9.25us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manager_id', type=integer) succeeded in 9.38us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item, columnName='i_product_name', type=char(50)) succeeded in 7.79us
2022-10-28T10:42:27.301+0530	DEBUG	Query-20221028_051227_00008_2ymdz-7032	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051227_00008_2ymdz}, tableName=tpcds.sf1.item) succeeded in 18.58us
2022-10-28T10:42:27.301+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051227_00008_2ymdz is FAILED
2022-10-28T10:42:27.301+0530	INFO	dispatcher-query-8	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051227_00008_2ymdz :: FAILED (COLUMN_NOT_FOUND) :: elapsed 6ms :: planning 6ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2022-10-28T10:42:27.295+05:30 :: end 2022-10-28T10:42:27.301+05:30
2022-10-28T10:42:27.301+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051227_00008_2ymdz failed
io.trino.spi.TrinoException: line 1:8: Column 'product_name' cannot be resolved
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:48)
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:43)
	at io.trino.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:33)
	at io.trino.sql.analyzer.Scope.lambda$resolveField$7(Scope.java:228)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at io.trino.sql.analyzer.Scope.resolveField(Scope.java:228)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:664)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:581)
	at io.trino.sql.tree.Identifier.accept(Identifier.java:91)
	at io.trino.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:27)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:604)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:485)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:3441)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeExpression(StatementAnalyzer.java:4086)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelectSingleColumn(StatementAnalyzer.java:3898)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelect(StatementAnalyzer.java:3684)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:2439)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:457)
	at io.trino.sql.tree.QuerySpecification.accept(QuerySpecification.java:155)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:482)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:1397)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:457)
	at io.trino.sql.tree.Query.accept(Query.java:107)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:436)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:79)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:71)
	at io.trino.execution.SqlQueryExecution.analyze(SqlQueryExecution.java:266)
	at io.trino.execution.SqlQueryExecution.<init>(SqlQueryExecution.java:203)
	at io.trino.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:829)
	at io.trino.dispatcher.LocalDispatchQueryFactory.lambda$createDispatchQuery$0(LocalDispatchQueryFactory.java:133)
	at io.trino.$gen.Trino_dev____20221028_050721_2.call(Unknown Source)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


2022-10-28T10:42:33.393+0530	DEBUG	dispatcher-query-3	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 88.88us
2022-10-28T10:42:33.394+0530	DEBUG	dispatcher-query-3	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 17.92us
2022-10-28T10:42:33.397+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051233_00009_2ymdz is QUEUED
2022-10-28T10:42:33.398+0530	INFO	Query-20221028_051233_00009_2ymdz-7031	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:42:33.400+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_051233_00009_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_sk', type=bigint) succeeded in 71.08us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_id', type=char(16)) succeeded in 10.04us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_start_date', type=date) succeeded in 9.38us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_end_date', type=date) succeeded in 8.79us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_desc', type=varchar(200)) succeeded in 16.38us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_current_price', type=decimal(7,2)) succeeded in 8.58us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_wholesale_cost', type=decimal(7,2)) succeeded in 8.50us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand_id', type=integer) succeeded in 8.50us
2022-10-28T10:42:33.401+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand', type=char(50)) succeeded in 8.58us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class_id', type=integer) succeeded in 9.04us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class', type=char(50)) succeeded in 8.79us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category_id', type=integer) succeeded in 8.71us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category', type=char(50)) succeeded in 8.58us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact_id', type=integer) succeeded in 8.50us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact', type=char(50)) succeeded in 10.92us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_size', type=char(20)) succeeded in 9.08us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_formulation', type=char(20)) succeeded in 8.67us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_color', type=char(20)) succeeded in 8.54us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_units', type=char(10)) succeeded in 8.92us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_container', type=char(10)) succeeded in 8.63us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manager_id', type=integer) succeeded in 8.71us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item, columnName='i_product_name', type=char(50)) succeeded in 8.79us
2022-10-28T10:42:33.402+0530	DEBUG	Query-20221028_051233_00009_2ymdz-7031	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051233_00009_2ymdz}, tableName=tpcds.sf1.item) succeeded in 31.96us
2022-10-28T10:42:33.404+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051233_00009_2ymdz failed
io.trino.spi.TrinoException: line 1:8: Column 'productname' cannot be resolved
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:48)
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:43)
	at io.trino.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:33)
	at io.trino.sql.analyzer.Scope.lambda$resolveField$7(Scope.java:228)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at io.trino.sql.analyzer.Scope.resolveField(Scope.java:228)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:664)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:581)
	at io.trino.sql.tree.Identifier.accept(Identifier.java:91)
	at io.trino.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:27)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:604)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:485)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:3441)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeExpression(StatementAnalyzer.java:4086)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelectSingleColumn(StatementAnalyzer.java:3898)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelect(StatementAnalyzer.java:3684)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:2439)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:457)
	at io.trino.sql.tree.QuerySpecification.accept(QuerySpecification.java:155)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:482)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:1397)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:457)
	at io.trino.sql.tree.Query.accept(Query.java:107)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:436)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:79)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:71)
	at io.trino.execution.SqlQueryExecution.analyze(SqlQueryExecution.java:266)
	at io.trino.execution.SqlQueryExecution.<init>(SqlQueryExecution.java:203)
	at io.trino.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:829)
	at io.trino.dispatcher.LocalDispatchQueryFactory.lambda$createDispatchQuery$0(LocalDispatchQueryFactory.java:133)
	at io.trino.$gen.Trino_dev____20221028_050721_2.call(Unknown Source)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


2022-10-28T10:42:33.405+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051233_00009_2ymdz is FAILED
2022-10-28T10:42:33.405+0530	INFO	dispatcher-query-0	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051233_00009_2ymdz :: FAILED (COLUMN_NOT_FOUND) :: elapsed 7ms :: planning 7ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2022-10-28T10:42:33.396+05:30 :: end 2022-10-28T10:42:33.403+05:30
2022-10-28T10:42:45.844+0530	DEBUG	dispatcher-query-1	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 73.54us
2022-10-28T10:42:45.845+0530	DEBUG	dispatcher-query-1	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 28.00us
2022-10-28T10:42:45.847+0530	DEBUG	dispatcher-query-0	io.trino.execution.QueryStateMachine	Query 20221028_051245_00010_2ymdz is QUEUED
2022-10-28T10:42:45.847+0530	INFO	Query-20221028_051245_00010_2ymdz-7031	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:42:45.848+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_sk', type=bigint) succeeded in 102.75us
2022-10-28T10:42:45.848+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_id', type=char(16)) succeeded in 11.13us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_start_date', type=date) succeeded in 8.92us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_end_date', type=date) succeeded in 9.33us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_desc', type=varchar(200)) succeeded in 8.71us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_current_price', type=decimal(7,2)) succeeded in 8.71us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_wholesale_cost', type=decimal(7,2)) succeeded in 9.42us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand_id', type=integer) succeeded in 8.75us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand', type=char(50)) succeeded in 12.96us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class_id', type=integer) succeeded in 11.58us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class', type=char(50)) succeeded in 9.08us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category_id', type=integer) succeeded in 8.67us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category', type=char(50)) succeeded in 8.67us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact_id', type=integer) succeeded in 8.58us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact', type=char(50)) succeeded in 8.58us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_size', type=char(20)) succeeded in 8.63us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_formulation', type=char(20)) succeeded in 8.58us
2022-10-28T10:42:45.849+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_color', type=char(20)) succeeded in 8.63us
2022-10-28T10:42:45.850+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_units', type=char(10)) succeeded in 8.58us
2022-10-28T10:42:45.850+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_container', type=char(10)) succeeded in 8.50us
2022-10-28T10:42:45.850+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manager_id', type=integer) succeeded in 8.54us
2022-10-28T10:42:45.850+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item, columnName='i_product_name', type=char(50)) succeeded in 8.58us
2022-10-28T10:42:45.850+0530	DEBUG	Query-20221028_051245_00010_2ymdz-7031	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051245_00010_2ymdz}, tableName=tpcds.sf1.item) succeeded in 25.17us
2022-10-28T10:42:45.851+0530	DEBUG	dispatcher-query-2	io.trino.execution.QueryStateMachine	Query 20221028_051245_00010_2ymdz failed
io.trino.spi.TrinoException: line 1:8: Column 'l_product_name' cannot be resolved
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:48)
	at io.trino.sql.analyzer.SemanticExceptions.semanticException(SemanticExceptions.java:43)
	at io.trino.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:33)
	at io.trino.sql.analyzer.Scope.lambda$resolveField$7(Scope.java:228)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at io.trino.sql.analyzer.Scope.resolveField(Scope.java:228)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:664)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:581)
	at io.trino.sql.tree.Identifier.accept(Identifier.java:91)
	at io.trino.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:27)
	at io.trino.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:604)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:485)
	at io.trino.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:3441)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeExpression(StatementAnalyzer.java:4086)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelectSingleColumn(StatementAnalyzer.java:3898)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelect(StatementAnalyzer.java:3684)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:2439)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:457)
	at io.trino.sql.tree.QuerySpecification.accept(QuerySpecification.java:155)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:482)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:1397)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:457)
	at io.trino.sql.tree.Query.accept(Query.java:107)
	at io.trino.sql.tree.AstVisitor.process(AstVisitor.java:27)
	at io.trino.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:474)
	at io.trino.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:436)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:79)
	at io.trino.sql.analyzer.Analyzer.analyze(Analyzer.java:71)
	at io.trino.execution.SqlQueryExecution.analyze(SqlQueryExecution.java:266)
	at io.trino.execution.SqlQueryExecution.<init>(SqlQueryExecution.java:203)
	at io.trino.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:829)
	at io.trino.dispatcher.LocalDispatchQueryFactory.lambda$createDispatchQuery$0(LocalDispatchQueryFactory.java:133)
	at io.trino.$gen.Trino_dev____20221028_050721_2.call(Unknown Source)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


2022-10-28T10:42:45.852+0530	DEBUG	dispatcher-query-5	io.trino.execution.QueryStateMachine	Query 20221028_051245_00010_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:42:45.856+0530	DEBUG	dispatcher-query-3	io.trino.execution.QueryStateMachine	Query 20221028_051245_00010_2ymdz is FAILED
2022-10-28T10:42:45.857+0530	INFO	dispatcher-query-3	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051245_00010_2ymdz :: FAILED (COLUMN_NOT_FOUND) :: elapsed 4ms :: planning 4ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2022-10-28T10:42:45.846+05:30 :: end 2022-10-28T10:42:45.850+05:30
2022-10-28T10:43:06.905+0530	DEBUG	dispatcher-query-3	io.trino.security.AccessControl	Invocation of checkCanSetUser(principal=Optional[pramanathan], userName='pramanathan') succeeded in 77.67us
2022-10-28T10:43:06.906+0530	DEBUG	dispatcher-query-3	io.trino.security.AccessControl	Invocation of checkCanExecuteQuery(identity=Identity{user='pramanathan', principal=pramanathan}) succeeded in 18.42us
2022-10-28T10:43:06.909+0530	DEBUG	dispatcher-query-7	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is QUEUED
2022-10-28T10:43:06.909+0530	INFO	Query-20221028_051306_00011_2ymdz-7137	io.trino.execution.SqlQueryExecution	Palani: Analysis started
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_sk', type=bigint) succeeded in 80.29us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_id', type=char(16)) succeeded in 9.75us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_start_date', type=date) succeeded in 8.88us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_rec_end_date', type=date) succeeded in 12.88us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_item_desc', type=varchar(200)) succeeded in 8.58us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_current_price', type=decimal(7,2)) succeeded in 8.88us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_wholesale_cost', type=decimal(7,2)) succeeded in 8.67us
2022-10-28T10:43:06.912+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand_id', type=integer) succeeded in 8.75us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_brand', type=char(50)) succeeded in 8.96us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class_id', type=integer) succeeded in 8.71us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_class', type=char(50)) succeeded in 8.75us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category_id', type=integer) succeeded in 8.58us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_category', type=char(50)) succeeded in 8.58us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact_id', type=integer) succeeded in 8.67us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manufact', type=char(50)) succeeded in 8.58us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_size', type=char(20)) succeeded in 8.50us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_formulation', type=char(20)) succeeded in 8.50us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_color', type=char(20)) succeeded in 8.29us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_units', type=char(10)) succeeded in 8.58us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_container', type=char(10)) succeeded in 8.50us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_manager_id', type=integer) succeeded in 8.54us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getColumnMasks(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnName='i_product_name', type=char(50)) succeeded in 8.50us
2022-10-28T10:43:06.913+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of getRowFilters(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item) succeeded in 173.38us
2022-10-28T10:43:06.915+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7137	io.trino.security.AccessControl	Invocation of checkCanSelectFromColumns(context=SecurityContext{identity=Identity{user='pramanathan', principal=pramanathan}, queryId=20221028_051306_00011_2ymdz}, tableName=tpcds.sf1.item, columnNames=[i_category, i_product_name]) succeeded in 49.46us
2022-10-28T10:43:06.915+0530	INFO	Query-20221028_051306_00011_2ymdz-7137	io.trino.execution.SqlQueryExecution	Palani: Analysis complete
2022-10-28T10:43:06.916+0530	DEBUG	dispatcher-query-4	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is WAITING_FOR_RESOURCES
2022-10-28T10:43:06.919+0530	DEBUG	dispatcher-query-1	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is DISPATCHING
2022-10-28T10:43:06.922+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	Initial plan:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.923+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is PLANNING
2022-10-28T10:43:06.925+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.926+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
   │   Estimates: 
   └─ Project[]
      │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
      │   Estimates: 
      └─ Project[]
         │   Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
         │   Estimates: 
         └─ ScanProject[table = tpcds:item:sf1.0]
                Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
                Estimates: 
                i_item_sk := tpcds:i_item_sk
                i_item_id := tpcds:i_item_id
                i_rec_start_date := tpcds:i_rec_start_date
                i_rec_end_date := tpcds:i_rec_end_date
                i_item_desc := tpcds:i_item_desc
                i_current_price := tpcds:i_current_price
                i_wholesale_cost := tpcds:i_wholesale_cost
                i_brand_id := tpcds:i_brand_id
                i_brand := tpcds:i_brand
                i_class_id := tpcds:i_class_id
                i_class := tpcds:i_class
                i_category_id := tpcds:i_category_id
                i_category := tpcds:i_category
                i_manufact_id := tpcds:i_manufact_id
                i_manufact := tpcds:i_manufact
                i_size := tpcds:i_size
                i_formulation := tpcds:i_formulation
                i_color := tpcds:i_color
                i_units := tpcds:i_units
                i_container := tpcds:i_container
                i_manager_id := tpcds:i_manager_id
                i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.926+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneOutputSourceColumns
Before:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_category:char(50), i_product_name:char(50)]
   │   Estimates: 
   └─ GroupReference[groupId = 2]
          Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
          Estimates: 

2022-10-28T10:43:06.927+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 2]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_category:char(50), i_product_name:char(50)]
   │   Estimates: 
   └─ GroupReference[groupId = 3]
          Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
          Estimates: 

2022-10-28T10:43:06.928+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 8]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:43:06.928+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 3]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_category:char(50), i_product_name:char(50)]
   │   Estimates: 
   └─ GroupReference[groupId = 4]
          Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
          Estimates: 

2022-10-28T10:43:06.929+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 9]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:43:06.929+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 4]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_category:char(50), i_product_name:char(50)]
   │   Estimates: 
   └─ GroupReference[groupId = 5]
          Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
          Estimates: 

2022-10-28T10:43:06.930+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 10]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:43:06.930+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneProjectColumns
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 5]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ Project[]
   │   Layout: [i_category:char(50), i_product_name:char(50)]
   │   Estimates: 
   └─ GroupReference[groupId = 6]
          Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
          Estimates: 

2022-10-28T10:43:06.931+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.InlineProjections
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 11]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 

After:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

2022-10-28T10:43:06.931+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.PruneTableScanColumns
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 6]
       Layout: [i_item_sk:bigint, i_item_id:char(16), i_rec_start_date:date, i_rec_end_date:date, i_item_desc:varchar(200), i_current_price:decimal(7,2), i_wholesale_cost:decimal(7,2), i_brand_id:integer, i_brand:char(50), i_class_id:integer, i_class:char(50), i_category_id:integer, i_category:char(50), i_manufact_id:integer, i_manufact:char(50), i_size:char(20), i_formulation:char(20), i_color:char(20), i_units:char(10), i_container:char(10), i_manager_id:integer, i_product_name:char(50)]
       Estimates: 

After:
ScanProject[table = tpcds:item:sf1.0]
    Layout: [i_category:char(50), i_product_name:char(50)]
    Estimates: 
    i_category := tpcds:i_category
    i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.932+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.RemoveRedundantIdentityProjections
Before:
Project[]
│   Layout: [i_category:char(50), i_product_name:char(50)]
│   Estimates: 
└─ GroupReference[groupId = 12]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 

After:
GroupReference[groupId = 12]
    Layout: [i_category:char(50), i_product_name:char(50)]
    Estimates: 

2022-10-28T10:43:06.932+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.932+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.932+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.932+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.933+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.933+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.933+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.933+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.933+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.TransformQuantifiedComparisonApplyToCorrelatedJoin:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.934+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.935+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.935+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.CheckSubqueryNodesAreRewritten:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.935+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.935+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.935+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.936+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.936+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.936+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.936+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.936+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.937+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.IndexJoinOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.938+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.LimitPushDown:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.MetadataQueryOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.939+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.940+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.ReplicateJoinAndSemiJoinInDelete:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.OptimizeMixedDistinctAggregations:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.941+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.iterative.IterativeOptimizer	Rule: io.trino.sql.planner.iterative.rule.DetermineTableScanNodePartitioning
Before:
TableScan[table = tpcds:item:sf1.0]
    Layout: [i_category:char(50), i_product_name:char(50)]
    Estimates: 
    i_category := tpcds:i_category
    i_product_name := tpcds:i_product_name

After:
TableScan[table = tpcds:item:sf1.0]
    Layout: [i_category:char(50), i_product_name:char(50)]
    Estimates: 
    i_category := tpcds:i_category
    i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.942+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.943+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.StatsRecordingPlanOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.UnaliasSymbolReferences:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.944+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.AddLocalExchanges:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.HashGenerationOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.945+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.IterativeOptimizer:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.946+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.iterative.rule.RemoveUnsupportedDynamicFilters:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.946+0530	DEBUG	Query-20221028_051306_00011_2ymdz-7036	io.trino.sql.planner.LogicalPlanner	io.trino.sql.planner.optimizations.BeginTableWrite:
Output[columnNames = [i_product_name, i_category]]
│   Layout: [i_product_name:char(50), i_category:char(50)]
│   Estimates: 
└─ TableScan[table = tpcds:item:sf1.0]
       Layout: [i_category:char(50), i_product_name:char(50)]
       Estimates: 
       i_category := tpcds:i_category
       i_product_name := tpcds:i_product_name

2022-10-28T10:43:06.947+0530	DEBUG	query-execution-5	io.trino.execution.StageStateMachine	Stage 20221028_051306_00011_2ymdz.0 is PLANNED
2022-10-28T10:43:06.947+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is STARTING
2022-10-28T10:43:06.947+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is PLANNED
2022-10-28T10:43:06.948+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is SCHEDULING
2022-10-28T10:43:06.948+0530	DEBUG	query-execution-5	io.trino.execution.StageStateMachine	Stage 20221028_051306_00011_2ymdz.0 is SCHEDULING
2022-10-28T10:43:06.949+0530	DEBUG	query-execution-7	io.trino.execution.StageStateMachine	Stage 20221028_051306_00011_2ymdz.0 is RUNNING
2022-10-28T10:43:06.950+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is RUNNING
2022-10-28T10:43:06.950+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is SCHEDULED
2022-10-28T10:43:06.987+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051306_00011_2ymdz.0.0.0 is RUNNING
2022-10-28T10:43:06.989+0530	DEBUG	Task-20221028_051306_00011_2ymdz.0.0.0-7061	io.trino.execution.executor.TaskExecutor	Task scheduled 20221028_051306_00011_2ymdz.0.0.0
2022-10-28T10:43:06.990+0530	DEBUG	20221028_051306_00011_2ymdz.0.0.0-2-110	io.trino.execution.executor.TaskExecutor	Split 20221028_051306_00011_2ymdz.0.0.0-2 TpcdsSplit{partNumber=3, totalParts=4, noSexism=false} (start = 4.23996506430125E8, wall = 0 ms, cpu = 0 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:43:06.990+0530	DEBUG	20221028_051306_00011_2ymdz.0.0.0-3-95	io.trino.execution.executor.TaskExecutor	Split 20221028_051306_00011_2ymdz.0.0.0-3 TpcdsSplit{partNumber=2, totalParts=4, noSexism=false} (start = 4.23996506438041E8, wall = 0 ms, cpu = 0 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:43:06.990+0530	DEBUG	20221028_051306_00011_2ymdz.0.0.0-1-109	io.trino.execution.executor.TaskExecutor	Split 20221028_051306_00011_2ymdz.0.0.0-1 TpcdsSplit{partNumber=1, totalParts=4, noSexism=false} (start = 4.23996506383583E8, wall = 0 ms, cpu = 0 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:43:06.990+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is RUNNING
2022-10-28T10:43:07.268+0530	DEBUG	20221028_051306_00011_2ymdz.0.0.0-0-107	io.trino.execution.executor.TaskExecutor	Split 20221028_051306_00011_2ymdz.0.0.0-0 TpcdsSplit{partNumber=0, totalParts=4, noSexism=false} (start = 4.23996506380583E8, wall = 279 ms, cpu = 274 ms, wait = 0 ms, calls = 1) is finished
2022-10-28T10:43:07.269+0530	DEBUG	task-notification-3	io.trino.execution.TaskStateMachine	Task 20221028_051306_00011_2ymdz.0.0.0 is FLUSHING
2022-10-28T10:43:07.270+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is FLUSHING
2022-10-28T10:43:07.290+0530	DEBUG	http-worker-139	io.trino.execution.SqlTask	Aborting task 20221028_051306_00011_2ymdz.0.0.0 output 0
2022-10-28T10:43:07.290+0530	DEBUG	task-notification-2	io.trino.execution.TaskStateMachine	Task 20221028_051306_00011_2ymdz.0.0.0 is FINISHED
2022-10-28T10:43:07.290+0530	DEBUG	Task-20221028_051306_00011_2ymdz.0.0.0-7062	io.trino.execution.executor.TaskExecutor	Task finished or failed 20221028_051306_00011_2ymdz.0.0.0
2022-10-28T10:43:07.291+0530	DEBUG	stage-scheduler	io.trino.execution.scheduler.PipelinedStageExecution	Pipelined stage execution 20221028_051306_00011_2ymdz.0 is FINISHED
2022-10-28T10:43:07.291+0530	DEBUG	query-execution-6	io.trino.execution.StageStateMachine	Stage 20221028_051306_00011_2ymdz.0 is PENDING
2022-10-28T10:43:07.291+0530	DEBUG	query-execution-6	io.trino.execution.StageStateMachine	Stage 20221028_051306_00011_2ymdz.0 is FINISHED
2022-10-28T10:43:07.291+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is FINISHING
2022-10-28T10:43:07.296+0530	DEBUG	dispatcher-query-8	io.trino.execution.QueryStateMachine	Query 20221028_051306_00011_2ymdz is FINISHED
2022-10-28T10:43:07.296+0530	INFO	dispatcher-query-6	io.trino.event.QueryMonitor	TIMELINE: Query 20221028_051306_00011_2ymdz :: FINISHED :: elapsed 387ms :: planning 29ms :: waiting 8ms :: scheduling 52ms :: running 301ms :: finishing 5ms :: begin 2022-10-28T10:43:06.908+05:30 :: end 2022-10-28T10:43:07.295+05:30
2022-10-28T12:40:11.685+0530	INFO	Thread-353	io.airlift.bootstrap.LifeCycleManager	JVM is shutting down, cleaning up
2022-10-28T12:40:11.685+0530	INFO	Thread-355	io.airlift.bootstrap.LifeCycleManager	JVM is shutting down, cleaning up
2022-10-28T12:40:11.685+0530	INFO	Thread-354	io.airlift.bootstrap.LifeCycleManager	JVM is shutting down, cleaning up
