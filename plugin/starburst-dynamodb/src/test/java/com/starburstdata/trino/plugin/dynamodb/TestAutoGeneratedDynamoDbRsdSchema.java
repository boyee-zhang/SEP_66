/*
 * Copyright Starburst Data, Inc. All rights reserved.
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF STARBURST DATA.
 * The copyright notice above does not evidence any
 * actual or intended publication of such source code.
 *
 * Redistribution of this material is strictly prohibited.
 */
package com.starburstdata.trino.plugin.dynamodb;

import io.trino.testing.AbstractTestQueryFramework;
import io.trino.testing.QueryRunner;
import io.trino.tpch.TpchTable;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static io.trino.tpch.TpchTable.REGION;
import static java.util.Objects.requireNonNull;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TestAutoGeneratedDynamoDbRsdSchema
        extends AbstractTestQueryFramework
{
    private static final String EXPECTED_AUTO_GENERATED_SCHEMAS_DIRECTORY = "src/test/resources/auto-generated-schemas";
    private static final List<TpchTable<?>> TPCH_TABLES = TpchTable.getTables();

    private String actualSchemasDirectory;

    @Override
    protected QueryRunner createQueryRunner()
            throws Exception
    {
        TestingDynamoDbServer server = closeAfterClass(new TestingDynamoDbServer());
        this.actualSchemasDirectory = server.getSchemaDirectory().getAbsolutePath();
        return DynamoDbQueryRunner.builder(server.getEndpointUrl(), server.getSchemaDirectory())
                .setFirstColumnAsPrimaryKeyEnabled(true)
                .setTables(TPCH_TABLES) // Explicitly defined the tables to make it reusable in the `testVerifyAutoGeneratedSchemas` test.
                .addConnectorProperties(
                        Map.of("dynamodb.generate-schema-files", "ON_START")) // Set to the same value as that of set in Galaxy configs.
                .build();
    }

    @Test
    public void testVerifyAutoGeneratedSchemas()
    {
        requireNonNull(actualSchemasDirectory);
        assertTrue(Files.exists(Path.of(actualSchemasDirectory)));
        Set<String> expectedProgrammaticallyCreatedSchemas = TPCH_TABLES.stream().map(table -> table.getTableName() + ".rsd").collect(Collectors.toSet());
        Set<String> actualProgrammaticallyCreatedSchemas = Stream.of(requireNonNull(new File(actualSchemasDirectory).listFiles(), "schema files do not exist"))
                .filter(file -> !file.isDirectory())
                .map(File::getName)
                .collect(Collectors.toSet());

        assertEquals(expectedProgrammaticallyCreatedSchemas, actualProgrammaticallyCreatedSchemas);

        // Delete existing schemas
        Stream.of(requireNonNull(new File(actualSchemasDirectory).listFiles(), "schema files do not exist"))
                .filter(file -> !file.isDirectory())
                .forEach(file -> assertTrue(file.delete()));

        // Verify schema files do not exist
        assertTrue(Stream.of(requireNonNull(new File(actualSchemasDirectory).listFiles(), "schema files do not exist"))
                .filter(file -> !file.isDirectory())
                .map(File::getName)
                .toList()
                .isEmpty());

        // Auto-recreate schemas
        assertQuerySucceeds("SHOW TABLES"); // rsd is auto generated as table is queried, if absent.

        for (TpchTable<?> table : TPCH_TABLES) {
            String tableName = table.getTableName();

            // Verify auto generated file content is as expected
            File actualAutoGeneratedRsdFile = new File(actualSchemasDirectory, tableName + ".rsd");
            File expectedAutoGeneratedRsdFile1 = new File(EXPECTED_AUTO_GENERATED_SCHEMAS_DIRECTORY, tableName + "1.rsd");
            File expectedAutoGeneratedRsdFile2 = new File(EXPECTED_AUTO_GENERATED_SCHEMAS_DIRECTORY, tableName + "2.rsd");

            if (table.getTableName().equals(REGION.getTableName())) {
                File expectedAutoGeneratedRsdFile3 = new File(EXPECTED_AUTO_GENERATED_SCHEMAS_DIRECTORY, tableName + "3.rsd");
                assertThat(actualAutoGeneratedRsdFile).exists()
                        .satisfiesAnyOf(
                                actualFile -> assertThat(actualFile).hasSameTextualContentAs(expectedAutoGeneratedRsdFile1),
                                actualFile -> assertThat(actualFile).hasSameTextualContentAs(expectedAutoGeneratedRsdFile2),
                                actualFile -> assertThat(actualFile).hasSameTextualContentAs(expectedAutoGeneratedRsdFile3));
            }
            else {
                assertThat(actualAutoGeneratedRsdFile).exists()
                        .satisfiesAnyOf(
                                actualFile -> assertThat(actualFile).hasSameTextualContentAs(expectedAutoGeneratedRsdFile1),
                                actualFile -> assertThat(actualFile).hasSameTextualContentAs(expectedAutoGeneratedRsdFile2));
            }
        }
    }
}
