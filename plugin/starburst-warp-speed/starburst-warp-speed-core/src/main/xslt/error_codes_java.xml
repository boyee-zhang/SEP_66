<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" encoding="utf-8" indent="no" />

    <xsl:include href="templates/templates.xsl" />
    <xsl:output method="text" encoding="utf-8" indent="no" />

    <xsl:template match="error-codes">
        <xsl:variable name="error_codes_count" select="count(error-code)" />

        <!-- output license -->
        <xsl:call-template name="License" />
        <xsl:call-template name="NewLine" />
        <xsl:text>package io.trino.plugin.warp.gen.errorcodes;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:call-template name="NewLine" />
        <xsl:text>public enum ErrorCodes {</xsl:text>
        <xsl:call-template name="NewLine" />
        <!-- output includes -->
        <xsl:for-each select="error-code">
            <xsl:text>    </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text>(</xsl:text>
            <xsl:value-of select="@code" />
            <xsl:text>, "</xsl:text>
            <xsl:value-of select="@message" />
            <xsl:text>", </xsl:text>
            <xsl:value-of select="@unrecoverable" />
            <xsl:text>)</xsl:text>
            <xsl:if test="position() != $error_codes_count">
                <xsl:text>,</xsl:text>
            </xsl:if>
            <xsl:if test="position() = $error_codes_count">
                <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:call-template name="NewLine" />
        </xsl:for-each>

        <xsl:call-template name="NewLine" />
        <xsl:text>    private final int code;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    private final String message;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    private final boolean unrecoverable;</xsl:text>
        <xsl:call-template name="NewLine" />

        <xsl:call-template name="NewLine" />
        <xsl:text>    ErrorCodes(int code, String message, boolean unrecoverable)</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    {</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        this.code = code;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        this.message = message;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        this.unrecoverable = unrecoverable;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    }</xsl:text>
        <xsl:call-template name="NewLine" />

        <xsl:call-template name="NewLine" />
        <xsl:text>    public int getCode()</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    {</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        return this.code;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    }</xsl:text>
        <xsl:call-template name="NewLine" />

        <xsl:call-template name="NewLine" />
        <xsl:text>    public String getMessage()</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    {</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        return this.message;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    }</xsl:text>
        <xsl:call-template name="NewLine" />

        <xsl:call-template name="NewLine" />
        <xsl:text>    public boolean getUnrecoverable()</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    {</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>        return this.unrecoverable;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    }</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>}</xsl:text>
        <xsl:call-template name="NewLine" />
    </xsl:template>

</xsl:stylesheet>

