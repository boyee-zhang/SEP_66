<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" encoding="utf-8" indent="no" />

    <xsl:include href="templates/templates.xsl" />
    <xsl:output method="text" encoding="utf-8" indent="no" />

    <xsl:template match="Object">
        <xsl:variable name="constant-count" select="count(constant)" />
        <xsl:variable name="param-count" select="count(param)" />
        <!-- output license -->
        <xsl:call-template name="License" />
        <xsl:call-template name="NewLine" />
        <xsl:text>package io.trino.plugin.warp.gen.constants;</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:call-template name="NewLine" />
        <xsl:text>public enum </xsl:text>
        <xsl:value-of select="@java_name" />
        <xsl:call-template name="NewLine" />
        <xsl:text>{</xsl:text>
        <xsl:call-template name="NewLine" />
        <!-- output includes -->
        <xsl:for-each select="constant">
            <xsl:text>    </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:if test="@values">
                <xsl:text>(</xsl:text>
                <xsl:value-of select="@values" />
                <xsl:text>)</xsl:text>
            </xsl:if>
            <xsl:if test="position() != $constant-count">
                <xsl:text>,</xsl:text>
            </xsl:if>
            <xsl:if test="position() = $constant-count">
                <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:call-template name="NewLine" />
        </xsl:for-each>
        <!-- fields -->
        <xsl:for-each select="param">
            <xsl:text>    final </xsl:text>
            <xsl:value-of select="@type" />
            <xsl:text> </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text>;</xsl:text>
            <xsl:call-template name="NewLine" />
        </xsl:for-each>
        <!-- ctor -->
        <xsl:call-template name="NewLine" />
        <xsl:text>    </xsl:text>
        <xsl:value-of select="@java_name" />
        <xsl:text>(</xsl:text>
        <xsl:for-each select="param">
            <xsl:value-of select="@type" />
            <xsl:text> </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:if test="position() != $param-count">
                <xsl:text>, </xsl:text>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>)</xsl:text>
        <xsl:call-template name="NewLine" />
        <xsl:text>    {</xsl:text>
        <xsl:for-each select="param">
            <xsl:call-template name="NewLine" />
            <xsl:text>        this.</xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text> = </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text>;</xsl:text>
        </xsl:for-each>
        <xsl:call-template name="NewLine" />
        <xsl:text>    }</xsl:text>
        <xsl:call-template name="NewLine" />
        <!-- getters -->
        <xsl:for-each select="param">
            <xsl:call-template name="NewLine" />
            <xsl:text>    public </xsl:text>
            <xsl:value-of select="@type" />
            <xsl:text> </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text>()</xsl:text>
            <xsl:call-template name="NewLine" />
            <xsl:text>    {</xsl:text>
            <xsl:call-template name="NewLine" />
            <xsl:text>        return </xsl:text>
            <xsl:value-of select="@name" />
            <xsl:text>;</xsl:text>
            <xsl:call-template name="NewLine" />
            <xsl:text>    }</xsl:text>
            <xsl:call-template name="NewLine" />
        </xsl:for-each>
        <xsl:text>}</xsl:text>
        <xsl:call-template name="NewLine" />
    </xsl:template>
</xsl:stylesheet>

